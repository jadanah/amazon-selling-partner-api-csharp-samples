//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.FbaInventory.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerFbaInventoryClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.</param>
        /// <param name="nextToken">String token returned in the response of your previous request.</param>
        /// <returns>OK</returns>
        /// <exception cref="AmazonSellingPartnerFbaInventoryApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInventorySummariesResponse> GetInventorySummariesAsync(GranularityType granularityType, string granularityId, System.Collections.Generic.IEnumerable<string> marketplaceIds, bool? details = null, System.DateTime? startDateTime = null, System.Collections.Generic.IEnumerable<string> sellerSkus = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFbaInventoryClient : IAmazonSellingPartnerFbaInventoryClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerFbaInventoryClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.</param>
        /// <param name="nextToken">String token returned in the response of your previous request.</param>
        /// <returns>OK</returns>
        /// <exception cref="AmazonSellingPartnerFbaInventoryApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetInventorySummariesResponse> GetInventorySummariesAsync(GranularityType granularityType, string granularityId, System.Collections.Generic.IEnumerable<string> marketplaceIds, bool? details = null, System.DateTime? startDateTime = null, System.Collections.Generic.IEnumerable<string> sellerSkus = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (granularityType == null)
                throw new System.ArgumentNullException("granularityType");

            if (granularityId == null)
                throw new System.ArgumentNullException("granularityId");

            if (marketplaceIds == null)
                throw new System.ArgumentNullException("marketplaceIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inventory/v1/summaries?");
            urlBuilder_.Append(System.Uri.EscapeDataString("granularityType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(granularityType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("granularityId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(granularityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in marketplaceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (details != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("details") + "=").Append(System.Uri.EscapeDataString(ConvertToString(details, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDateTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDateTime") + "=").Append(System.Uri.EscapeDataString(startDateTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sellerSkus != null)
            {
                foreach (var item_ in sellerSkus) { urlBuilder_.Append(System.Uri.EscapeDataString("sellerSkus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInventoryApiException<GetInventorySummariesResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInventoryApiException<GetInventorySummariesResponse>("Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInventoryApiException<GetInventorySummariesResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInventoryApiException<GetInventorySummariesResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInventoryApiException<GetInventorySummariesResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventorySummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInventoryApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInventoryApiException<GetInventorySummariesResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFbaInventoryApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFbaInventoryApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFbaInventoryApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Describes a granularity at which inventory data can be aggregated. For example, if you use Marketplace granularity, the fulfillable quantity will reflect inventory that could be fulfilled in the given marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Granularity
    {
        /// <summary>
        /// The granularity type for the inventory aggregation level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("granularityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GranularityType { get; set; }

        /// <summary>
        /// The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the marketplaceId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("granularityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GranularityId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Granularity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Granularity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The quantity of reserved inventory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservedQuantity
    {
        /// <summary>
        /// The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalReservedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalReservedQuantity { get; set; }

        /// <summary>
        /// The number of units reserved for customer orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pendingCustomerOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PendingCustomerOrderQuantity { get; set; }

        /// <summary>
        /// The number of units being transferred from one fulfillment center to another.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pendingTransshipmentQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PendingTransshipmentQuantity { get; set; }

        /// <summary>
        /// The number of units that have been sidelined at the fulfillment center for additional processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fcProcessingQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FcProcessingQuantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReservedQuantity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReservedQuantity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The misplaced or warehouse damaged inventory that is actively being confirmed at our fulfillment centers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResearchingQuantityEntry
    {
        /// <summary>
        /// The duration of the research.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResearchingQuantityEntryName Name { get; set; }

        /// <summary>
        /// The number of units.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResearchingQuantityEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResearchingQuantityEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The number of misplaced or warehouse damaged units that are actively being confirmed at our fulfillment centers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResearchingQuantity
    {
        /// <summary>
        /// The total number of units currently being researched in Amazon's fulfillment network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResearchingQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResearchingQuantity { get; set; }

        /// <summary>
        /// A list of quantity details for items currently being researched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("researchingQuantityBreakdown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResearchingQuantityEntry> ResearchingQuantityBreakdown { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResearchingQuantity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResearchingQuantity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The quantity of unfulfillable inventory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnfulfillableQuantity
    {
        /// <summary>
        /// The total number of units in Amazon's fulfillment network in unsellable condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUnfulfillableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalUnfulfillableQuantity { get; set; }

        /// <summary>
        /// The number of units in customer damaged disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerDamagedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in warehouse damaged disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseDamagedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WarehouseDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in distributor damaged disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorDamagedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DistributorDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in carrier damaged disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierDamagedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CarrierDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in defective disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defectiveQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefectiveQuantity { get; set; }

        /// <summary>
        /// The number of units in expired disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiredQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiredQuantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnfulfillableQuantity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnfulfillableQuantity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Summarized inventory details. This object will not appear if the details parameter in the request is false.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryDetails
    {
        /// <summary>
        /// The item quantity that can be picked, packed, and shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FulfillableQuantity { get; set; }

        /// <summary>
        /// The number of units in an inbound shipment for which you have notified Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundWorkingQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundWorkingQuantity { get; set; }

        /// <summary>
        /// The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundShippedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundShippedQuantity { get; set; }

        /// <summary>
        /// The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundReceivingQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundReceivingQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("reservedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservedQuantity ReservedQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("researchingQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResearchingQuantity ResearchingQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("unfulfillableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnfulfillableQuantity UnfulfillableQuantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InventoryDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Inventory summary for a specific item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventorySummary
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Asin { get; set; }

        /// <summary>
        /// Amazon's fulfillment network SKU identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fnSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FnSku { get; set; }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The condition of the item as described by the seller (for example, New Item).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("inventoryDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InventoryDetails InventoryDetails { get; set; }

        /// <summary>
        /// The date and time that any quantity was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdatedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastUpdatedTime { get; set; }

        /// <summary>
        /// The localized language product title of the item within the specific marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>
        /// The total number of units in an inbound shipment or in Amazon fulfillment centers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalQuantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InventorySummary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventorySummary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of inventory summaries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventorySummaries : System.Collections.ObjectModel.Collection<InventorySummary>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InventorySummaries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventorySummaries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The process of returning the results to a request in batches of a defined size called pages. This is done to exercise some control over result size and overall throughput. It's a form of traffic management.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pagination
    {
        /// <summary>
        /// A generated string used to retrieve the next page of the result. If nextToken is returned, pass the value of nextToken to the next request. If nextToken is not returned, there are no more items to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Pagination FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pagination>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload schema for the getInventorySummaries operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInventorySummariesResult
    {
        [Newtonsoft.Json.JsonProperty("granularity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Granularity Granularity { get; set; } = new Granularity();

        [Newtonsoft.Json.JsonProperty("inventorySummaries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InventorySummaries InventorySummaries { get; set; } = new InventorySummaries();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInventorySummariesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInventorySummariesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The Response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInventorySummariesResponse
    {
        /// <summary>
        /// The payload for the getInventorySummaries operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInventorySummariesResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the getInventorySummaries operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInventorySummariesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInventorySummariesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition in a human-readable form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Additional information that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The granularity type for the inventory aggregation level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GranularityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Marketplace")]
        Marketplace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResearchingQuantityEntryName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"researchingQuantityInShortTerm")]
        ResearchingQuantityInShortTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"researchingQuantityInMidTerm")]
        ResearchingQuantityInMidTerm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"researchingQuantityInLongTerm")]
        ResearchingQuantityInLongTerm = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFbaInventoryApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerFbaInventoryApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFbaInventoryApiException<TResult> : AmazonSellingPartnerFbaInventoryApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerFbaInventoryApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603