//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.Finances.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerFinancesClient
    {
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        ListFinancialEventGroupsResponse ListFinancialEventGroups(int? maxResultsPerPage = null, System.DateTime? financialEventGroupStartedBefore = null, System.DateTime? financialEventGroupStartedAfter = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFinancialEventGroupsResponse> ListFinancialEventGroupsAsync(int? maxResultsPerPage = null, System.DateTime? financialEventGroupStartedBefore = null, System.DateTime? financialEventGroupStartedAfter = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        ListFinancialEventsResponse ListFinancialEventsByGroupId(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByGroupIdAsync(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Financial Events successfully retrieved.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        ListFinancialEventsResponse ListFinancialEventsByOrderId(string orderId, int? maxResultsPerPage = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Financial Events successfully retrieved.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByOrderIdAsync(string orderId, int? maxResultsPerPage = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        ListFinancialEventsResponse ListFinancialEvents(int? maxResultsPerPage = null, System.DateTime? postedAfter = null, System.DateTime? postedBefore = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsAsync(int? maxResultsPerPage = null, System.DateTime? postedAfter = null, System.DateTime? postedBefore = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFinancesClient : IAmazonSellingPartnerFinancesClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerFinancesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual ListFinancialEventGroupsResponse ListFinancialEventGroups(int? maxResultsPerPage = null, System.DateTime? financialEventGroupStartedBefore = null, System.DateTime? financialEventGroupStartedAfter = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListFinancialEventGroupsAsync(maxResultsPerPage, financialEventGroupStartedBefore, financialEventGroupStartedAfter, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListFinancialEventGroupsResponse> ListFinancialEventGroupsAsync(int? maxResultsPerPage = null, System.DateTime? financialEventGroupStartedBefore = null, System.DateTime? financialEventGroupStartedAfter = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("finances/v0/financialEventGroups?");
            if (maxResultsPerPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultsPerPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultsPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (financialEventGroupStartedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FinancialEventGroupStartedBefore") + "=").Append(System.Uri.EscapeDataString(financialEventGroupStartedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (financialEventGroupStartedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FinancialEventGroupStartedAfter") + "=").Append(System.Uri.EscapeDataString(financialEventGroupStartedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventGroupsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventGroupsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventGroupsResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventGroupsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventGroupsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventGroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventGroupsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFinancesApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual ListFinancialEventsResponse ListFinancialEventsByGroupId(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListFinancialEventsByGroupIdAsync(eventGroupId, maxResultsPerPage, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByGroupIdAsync(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (eventGroupId == null)
                throw new System.ArgumentNullException("eventGroupId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("finances/v0/financialEventGroups/{eventGroupId}/financialEvents?");
            urlBuilder_.Replace("{eventGroupId}", System.Uri.EscapeDataString(ConvertToString(eventGroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (maxResultsPerPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultsPerPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultsPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFinancesApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Financial Events successfully retrieved.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual ListFinancialEventsResponse ListFinancialEventsByOrderId(string orderId, int? maxResultsPerPage = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListFinancialEventsByOrderIdAsync(orderId, maxResultsPerPage, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Financial Events successfully retrieved.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByOrderIdAsync(string orderId, int? maxResultsPerPage = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("finances/v0/orders/{orderId}/financialEvents?");
            urlBuilder_.Replace("{orderId}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (maxResultsPerPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultsPerPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultsPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFinancesApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual ListFinancialEventsResponse ListFinancialEvents(int? maxResultsPerPage = null, System.DateTime? postedAfter = null, System.DateTime? postedBefore = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListFinancialEventsAsync(maxResultsPerPage, postedAfter, postedBefore, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page.</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.</param>
        /// <param name="nextToken">A string token returned in the response of your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFinancesApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsAsync(int? maxResultsPerPage = null, System.DateTime? postedAfter = null, System.DateTime? postedBefore = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("finances/v0/financialEvents?");
            if (maxResultsPerPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxResultsPerPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResultsPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PostedAfter") + "=").Append(System.Uri.EscapeDataString(postedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PostedBefore") + "=").Append(System.Uri.EscapeDataString(postedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListFinancialEventsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFinancesApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFinancesApiException<ListFinancialEventsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFinancesApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFinancesApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFinancesApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// An adjustment to the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustmentEvent
    {
        /// <summary>
        /// The type of adjustment.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.
        /// <br/>
        /// <br/>* ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.
        /// <br/>
        /// <br/>* PostageBilling - The amount paid by a seller for shipping labels.
        /// <br/>
        /// <br/>* PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.
        /// <br/>
        /// <br/>* LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.
        /// <br/>
        /// <br/>* CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.
        /// <br/>
        /// <br/>* ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.
        /// <br/>
        /// <br/>* SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdjustmentType { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The amount adjusted as part of this event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency AdjustmentAmount { get; set; }

        /// <summary>
        /// A list of information about adjustments to an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentItemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdjustmentItemList AdjustmentItemList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdjustmentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdjustmentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of adjustment event information for the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustmentEventList : System.Collections.ObjectModel.Collection<AdjustmentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdjustmentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdjustmentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item in an adjustment to the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustmentItem
    {
        /// <summary>
        /// Represents the number of units in the seller's inventory when the AdustmentType is FBAInventoryReimbursement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Quantity { get; set; }

        /// <summary>
        /// The per unit value of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PerUnitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency PerUnitAmount { get; set; }

        /// <summary>
        /// The total value of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// A unique identifier assigned to products stored in and fulfilled from a fulfillment center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FnSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FnSKU { get; set; }

        /// <summary>
        /// A short description of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdjustmentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdjustmentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about items in an adjustment to the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdjustmentItemList : System.Collections.ObjectModel.Collection<AdjustmentItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdjustmentItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdjustmentItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An expense related to an affordability promotion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AffordabilityExpenseEvent
    {
        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The date and time when the financial event was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// An encrypted, Amazon-defined marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Indicates the type of transaction. 
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* Charge - For an affordability promotion expense.
        /// <br/>
        /// <br/>* Refund - For an affordability promotion expense reversal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>
        /// The amount charged for clicks incurred under the Sponsored Products program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BaseExpense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency BaseExpense { get; set; }

        /// <summary>
        /// Central Goods and Service Tax, charged and collected by the central government.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxTypeCGST", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Currency TaxTypeCGST { get; set; } = new Currency();

        /// <summary>
        /// State Goods and Service Tax, charged and collected by the state government.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxTypeSGST", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Currency TaxTypeSGST { get; set; } = new Currency();

        /// <summary>
        /// Integrated Goods and Service Tax, charged and collected by the central government.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxTypeIGST", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Currency TaxTypeIGST { get; set; } = new Currency();

        /// <summary>
        /// The total amount charged to the seller. TotalExpense = BaseExpense + TaxTypeIGST + TaxTypeCGST + TaxTypeSGST.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalExpense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TotalExpense { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AffordabilityExpenseEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AffordabilityExpenseEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of expense information related to an affordability promotion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AffordabilityExpenseEventList : System.Collections.ObjectModel.Collection<AffordabilityExpenseEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AffordabilityExpenseEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AffordabilityExpenseEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A charge on the seller's account.
    /// <br/>
    /// <br/>Possible values:
    /// <br/>
    /// <br/>* Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
    /// <br/>
    /// <br/>* Tax - The tax collected by the seller on the Principal.
    /// <br/>
    /// <br/>* MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
    /// <br/>
    /// <br/>* MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
    /// <br/>
    /// <br/>* MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
    /// <br/>
    /// <br/>* MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
    /// <br/>
    /// <br/>* Discount - The promotional discount for an order item.
    /// <br/>
    /// <br/>* TaxDiscount - The tax amount deducted for promotional rebates.
    /// <br/>
    /// <br/>* CODItemCharge - The COD charge for an order item.
    /// <br/>
    /// <br/>* CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
    /// <br/>
    /// <br/>* CODOrderCharge - The COD charge for an order.
    /// <br/>
    /// <br/>* CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
    /// <br/>
    /// <br/>* CODShippingCharge - Shipping charges for a COD order.
    /// <br/>
    /// <br/>* CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
    /// <br/>
    /// <br/>* ShippingCharge - The shipping charge.
    /// <br/>
    /// <br/>* ShippingTax - The tax collected by the seller on a ShippingCharge.
    /// <br/>
    /// <br/>* Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
    /// <br/>
    /// <br/>* Giftwrap - The gift wrap charge.
    /// <br/>
    /// <br/>* GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
    /// <br/>
    /// <br/>* RestockingFee - The charge applied to the buyer when returning a product in certain categories.
    /// <br/>
    /// <br/>* ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
    /// <br/>
    /// <br/>* PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
    /// <br/>
    /// <br/>* GenericDeduction - A generic bad debt deduction.
    /// <br/>
    /// <br/>* FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
    /// <br/>
    /// <br/>* PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
    /// <br/>
    /// <br/>* ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
    /// <br/>
    /// <br/>* SAFE-TReimbursement - The SAFE-T claim amount for the item.
    /// <br/>
    /// <br/>* TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
    /// <br/>
    /// <br/>* TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
    /// <br/>
    /// <br/>* TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
    /// <br/>
    /// <br/>* TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeComponent
    {
        /// <summary>
        /// The type of charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ChargeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeType { get; set; }

        /// <summary>
        /// The amount of the charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency ChargeAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChargeComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChargeComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of charge information on the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeComponentList : System.Collections.ObjectModel.Collection<ChargeComponent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChargeComponentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChargeComponentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A payment instrument.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeInstrument
    {
        /// <summary>
        /// A short description of the charge instrument.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The account tail (trailing digits) of the charge instrument.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Tail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tail { get; set; }

        /// <summary>
        /// The amount charged to this charge instrument.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency Amount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChargeInstrument FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChargeInstrument>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of payment instruments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeInstrumentList : System.Collections.ObjectModel.Collection<ChargeInstrument>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChargeInstrumentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChargeInstrumentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An event related to coupon payments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CouponPaymentEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// A coupon identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CouponId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponId { get; set; }

        /// <summary>
        /// The description provided by the seller when they created the coupon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerCouponDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerCouponDescription { get; set; }

        /// <summary>
        /// The number of coupon clips or redemptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ClipOrRedemptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ClipOrRedemptionCount { get; set; }

        /// <summary>
        /// A payment event identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentEventId { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeComponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponent FeeComponent { get; set; }

        [Newtonsoft.Json.JsonProperty("ChargeComponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponent ChargeComponent { get; set; }

        /// <summary>
        /// The FeeComponent value plus the ChargeComponent value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TotalAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CouponPaymentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponPaymentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of coupon payment event information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CouponPaymentEventList : System.Collections.ObjectModel.Collection<CouponPaymentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CouponPaymentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponPaymentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A currency type and amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Currency
    {
        /// <summary>
        /// The three-digit currency code in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The monetary value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrencyAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Currency FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Currency>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A debt payment or debt adjustment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebtRecoveryEvent
    {
        /// <summary>
        /// The debt recovery type.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* DebtPayment
        /// <br/>
        /// <br/>* DebtPaymentFailure
        /// <br/>
        /// <br/>*DebtAdjustment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtRecoveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebtRecoveryType { get; set; }

        /// <summary>
        /// The amount applied for recovery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecoveryAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency RecoveryAmount { get; set; }

        /// <summary>
        /// The amount returned for overpayment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverPaymentCredit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency OverPaymentCredit { get; set; }

        [Newtonsoft.Json.JsonProperty("DebtRecoveryItemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtRecoveryItemList DebtRecoveryItemList { get; set; }

        [Newtonsoft.Json.JsonProperty("ChargeInstrumentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeInstrumentList ChargeInstrumentList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DebtRecoveryEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DebtRecoveryEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of debt recovery event information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebtRecoveryEventList : System.Collections.ObjectModel.Collection<DebtRecoveryEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DebtRecoveryEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DebtRecoveryEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item of a debt payment or debt adjustment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebtRecoveryItem
    {
        /// <summary>
        /// The amount applied for the recovery item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecoveryAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency RecoveryAmount { get; set; }

        /// <summary>
        /// The original debt amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency OriginalAmount { get; set; }

        /// <summary>
        /// The beginning date and time of the financial event group that contains the debt. In ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GroupBeginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? GroupBeginDate { get; set; }

        /// <summary>
        /// The ending date and time of the financial event group that contains the debt. In ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GroupEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? GroupEndDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DebtRecoveryItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DebtRecoveryItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of debt recovery item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebtRecoveryItemList : System.Collections.ObjectModel.Collection<DebtRecoveryItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DebtRecoveryItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DebtRecoveryItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A payment made directly to a seller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPayment
    {
        /// <summary>
        /// The type of payment.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.
        /// <br/>
        /// <br/>* StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.
        /// <br/>
        /// <br/>* PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.
        /// <br/>
        /// <br/>* PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.
        /// <br/>
        /// <br/>* CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.
        /// <br/>
        /// <br/>* CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DirectPaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DirectPaymentType { get; set; }

        /// <summary>
        /// The amount of the direct payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DirectPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency DirectPaymentAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DirectPayment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DirectPayment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of direct payment information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPaymentList : System.Collections.ObjectModel.Collection<DirectPayment>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DirectPaymentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DirectPaymentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FBALiquidationEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The identifier for the original removal order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginalRemovalOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalRemovalOrderId { get; set; }

        /// <summary>
        /// The amount paid by the liquidator for the seller's inventory. The seller receives this amount minus LiquidationFeeAmount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LiquidationProceedsAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency LiquidationProceedsAmount { get; set; }

        /// <summary>
        /// The fee charged to the seller by Amazon for liquidating the seller's FBA inventory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LiquidationFeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency LiquidationFeeAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FBALiquidationEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FBALiquidationEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of FBA inventory liquidation payment events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FBALiquidationEventList : System.Collections.ObjectModel.Collection<FBALiquidationEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FBALiquidationEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FBALiquidationEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A fee associated with the event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeComponent
    {
        /// <summary>
        /// The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeeType { get; set; }

        /// <summary>
        /// The amount of the fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency FeeAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeeComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeeComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of fee component information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeComponentList : System.Collections.ObjectModel.Collection<FeeComponent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeeComponentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeeComponentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information related to a financial event group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialEventGroup
    {
        /// <summary>
        /// A unique identifier for the financial event group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinancialEventGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialEventGroupId { get; set; }

        /// <summary>
        /// The processing status of the financial event group indicates whether the balance of the financial event group is settled.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* Open
        /// <br/>
        /// <br/>* Closed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProcessingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>
        /// The status of the fund transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundTransferStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FundTransferStatus { get; set; }

        /// <summary>
        /// The total amount in the currency of the marketplace in which the transactions occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginalTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency OriginalTotal { get; set; }

        /// <summary>
        /// The total amount in the currency of the marketplace in which the funds were disbursed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConvertedTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency ConvertedTotal { get; set; }

        /// <summary>
        /// The date and time when the disbursement or charge was initiated. Only present for closed settlements. In ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundTransferDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FundTransferDate { get; set; }

        /// <summary>
        /// The trace identifier used by sellers to look up transactions externally.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }

        /// <summary>
        /// The account tail of the payment instrument.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AccountTail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountTail { get; set; }

        /// <summary>
        /// The balance at the beginning of the settlement period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BeginningBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency BeginningBalance { get; set; }

        /// <summary>
        /// The date and time at which the financial event group is opened. In ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinancialEventGroupStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FinancialEventGroupStart { get; set; }

        /// <summary>
        /// The date and time at which the financial event group is closed. In ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinancialEventGroupEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FinancialEventGroupEnd { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FinancialEventGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialEventGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of financial event group information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialEventGroupList : System.Collections.ObjectModel.Collection<FinancialEventGroup>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FinancialEventGroupList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialEventGroupList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contains all information related to a financial event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialEvents
    {
        /// <summary>
        /// A list of shipment events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentEventList ShipmentEventList { get; set; }

        /// <summary>
        /// A list of refund events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RefundEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentEventList RefundEventList { get; set; }

        /// <summary>
        /// A list of guarantee claim events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GuaranteeClaimEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentEventList GuaranteeClaimEventList { get; set; }

        /// <summary>
        /// A list of chargeback events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ChargebackEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentEventList ChargebackEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("PayWithAmazonEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayWithAmazonEventList PayWithAmazonEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceProviderCreditEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SolutionProviderCreditEventList ServiceProviderCreditEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("RetrochargeEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RetrochargeEventList RetrochargeEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("RentalTransactionEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RentalTransactionEventList RentalTransactionEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductAdsPaymentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductAdsPaymentEventList ProductAdsPaymentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceFeeEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceFeeEventList ServiceFeeEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("SellerDealPaymentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellerDealPaymentEventList SellerDealPaymentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("DebtRecoveryEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtRecoveryEventList DebtRecoveryEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanServicingEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanServicingEventList LoanServicingEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("AdjustmentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdjustmentEventList AdjustmentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("SAFETReimbursementEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SAFETReimbursementEventList SAFETReimbursementEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("SellerReviewEnrollmentPaymentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellerReviewEnrollmentPaymentEventList SellerReviewEnrollmentPaymentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("FBALiquidationEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FBALiquidationEventList FBALiquidationEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("CouponPaymentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CouponPaymentEventList CouponPaymentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("ImagingServicesFeeEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImagingServicesFeeEventList ImagingServicesFeeEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkComminglingTransactionEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkComminglingTransactionEventList NetworkComminglingTransactionEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("AffordabilityExpenseEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AffordabilityExpenseEventList AffordabilityExpenseEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("AffordabilityExpenseReversalEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AffordabilityExpenseEventList AffordabilityExpenseReversalEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("TrialShipmentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrialShipmentEventList TrialShipmentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentSettleEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSettleEventList ShipmentSettleEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("TaxWithholdingEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxWithholdingEventList TaxWithholdingEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("RemovalShipmentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemovalShipmentEventList RemovalShipmentEventList { get; set; }

        [Newtonsoft.Json.JsonProperty("RemovalShipmentAdjustmentEventList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemovalShipmentAdjustmentEventList RemovalShipmentAdjustmentEventList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FinancialEvents FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FinancialEvents>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A fee event related to Amazon Imaging services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImagingServicesFeeEvent
    {
        /// <summary>
        /// The identifier for the imaging services request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ImagingRequestBillingItemID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImagingRequestBillingItemID { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// A list of fees associated with the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList FeeList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImagingServicesFeeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImagingServicesFeeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of fee events related to Amazon Imaging services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImagingServicesFeeEventList : System.Collections.ObjectModel.Collection<ImagingServicesFeeEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImagingServicesFeeEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImagingServicesFeeEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the listFinancialEventGroups operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListFinancialEventGroupsPayload
    {
        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        [Newtonsoft.Json.JsonProperty("FinancialEventGroupList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinancialEventGroupList FinancialEventGroupList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListFinancialEventGroupsPayload FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFinancialEventGroupsPayload>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the listFinancialEventGroups operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListFinancialEventGroupsResponse
    {
        /// <summary>
        /// The payload for the listFinancialEventGroups operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListFinancialEventGroupsPayload Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the listFinancialEventGroups operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListFinancialEventGroupsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFinancialEventGroupsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the listFinancialEvents operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListFinancialEventsPayload
    {
        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        [Newtonsoft.Json.JsonProperty("FinancialEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinancialEvents FinancialEvents { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListFinancialEventsPayload FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFinancialEventsPayload>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the listFinancialEvents operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListFinancialEventsResponse
    {
        /// <summary>
        /// The payload for the listFinancialEvents operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListFinancialEventsPayload Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the listFinancialEvents operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListFinancialEventsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListFinancialEventsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A loan advance, loan payment, or loan refund.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanServicingEvent
    {
        /// <summary>
        /// The amount of the loan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency LoanAmount { get; set; }

        /// <summary>
        /// The type of event.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* LoanAdvance
        /// <br/>
        /// <br/>* LoanPayment
        /// <br/>
        /// <br/>* LoanRefund
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SourceBusinessEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceBusinessEventType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoanServicingEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoanServicingEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of loan servicing events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanServicingEventList : System.Collections.ObjectModel.Collection<LoanServicingEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoanServicingEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoanServicingEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A network commingling transaction event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkComminglingTransactionEvent
    {
        /// <summary>
        /// The type of network item swap.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.
        /// <br/>
        /// <br/>* ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The identifier for the network item swap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NetCoTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetCoTransactionID { get; set; }

        /// <summary>
        /// The reason for the network item swap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SwapReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwapReason { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the swapped item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        /// <summary>
        /// The marketplace in which the event took place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The price of the swapped item minus TaxAmount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxExclusiveAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxExclusiveAmount { get; set; }

        /// <summary>
        /// The tax on the network item swap paid by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NetworkComminglingTransactionEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NetworkComminglingTransactionEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of network commingling transaction events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkComminglingTransactionEventList : System.Collections.ObjectModel.Collection<NetworkComminglingTransactionEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NetworkComminglingTransactionEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NetworkComminglingTransactionEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An event related to the seller's Pay with Amazon account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayWithAmazonEvent
    {
        /// <summary>
        /// An order identifier that is specified by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// The date and time when the payment transaction is posted. In ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionPostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TransactionPostedDate { get; set; }

        /// <summary>
        /// The type of business object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BusinessObjectType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessObjectType { get; set; }

        /// <summary>
        /// The sales channel for the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SalesChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesChannel { get; set; }

        /// <summary>
        /// The charge associated with the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Charge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponent Charge { get; set; }

        /// <summary>
        /// A list of fees associated with the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList FeeList { get; set; }

        /// <summary>
        /// The type of payment.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* Sales
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentAmountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmountType { get; set; }

        /// <summary>
        /// A short description of this payment event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmountDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountDescription { get; set; }

        /// <summary>
        /// The fulfillment channel.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* AFN - Amazon Fulfillment Network (Fulfillment by Amazon)
        /// <br/>
        /// <br/>* MFN - Merchant Fulfillment Network (self-fulfilled)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// The store name where the event occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StoreName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoreName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PayWithAmazonEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PayWithAmazonEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of events related to the seller's Pay with Amazon account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayWithAmazonEventList : System.Collections.ObjectModel.Collection<PayWithAmazonEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PayWithAmazonEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PayWithAmazonEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A Sponsored Products payment event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductAdsPaymentEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// Indicates if the transaction is for a charge or a refund.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* charge - Charge
        /// <br/>
        /// <br/>* refund - Refund
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Identifier for the invoice that the transaction appears in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Base amount of the transaction, before tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency BaseValue { get; set; }

        /// <summary>
        /// Tax amount of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxValue { get; set; }

        /// <summary>
        /// The total amount of the transaction. Equal to baseValue + taxValue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TransactionValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProductAdsPaymentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAdsPaymentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of sponsored products payment events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductAdsPaymentEventList : System.Collections.ObjectModel.Collection<ProductAdsPaymentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProductAdsPaymentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAdsPaymentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A promotion applied to an item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Promotion
    {
        /// <summary>
        /// The type of promotion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PromotionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PromotionType { get; set; }

        /// <summary>
        /// The seller-specified identifier for the promotion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PromotionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PromotionId { get; set; }

        /// <summary>
        /// The amount of promotional discount applied to the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PromotionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency PromotionAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Promotion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Promotion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of promotions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionList : System.Collections.ObjectModel.Collection<Promotion>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PromotionList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PromotionList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A removal shipment event for a removal order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The merchant removal orderId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderId { get; set; }

        /// <summary>
        /// The identifier for the removal shipment order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// The type of removal order.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* WHOLESALE_LIQUIDATION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>
        /// A list of removal shipment items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RemovalShipmentItemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemovalShipmentItemList RemovalShipmentItemList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of removal shipment event information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentEventList : System.Collections.ObjectModel.Collection<RemovalShipmentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item-level information for a removal shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentItem
    {
        /// <summary>
        /// An identifier for an item in a removal shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RemovalShipmentItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemovalShipmentItemId { get; set; }

        /// <summary>
        /// The tax collection model applied to the item.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
        /// <br/>
        /// <br/>* Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxCollectionModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCollectionModel { get; set; }

        /// <summary>
        /// The Amazon fulfillment network SKU for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentNetworkSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        /// The quantity of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// The total amount paid to the seller for the removed item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Revenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency Revenue { get; set; }

        /// <summary>
        /// The fee that Amazon charged to the seller for the removal of the item. The amount is a negative number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency FeeAmount { get; set; }

        /// <summary>
        /// Tax collected on the revenue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxAmount { get; set; }

        /// <summary>
        /// The tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel=MarketplaceFacilitator, then TaxWithheld=TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld=0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxWithheld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxWithheld { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about removal shipment items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentItemList : System.Collections.ObjectModel.Collection<RemovalShipmentItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentAdjustmentEvent
    {
        /// <summary>
        /// The date when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The unique identifier for the adjustment event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdjustmentEventId { get; set; }

        /// <summary>
        /// The merchant removal orderId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderId { get; set; }

        /// <summary>
        /// The orderId for shipping inventory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// The type of removal order.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* WHOLESALE_LIQUIDATION.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>
        /// A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RemovalShipmentItemAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemovalShipmentItemAdjustment> RemovalShipmentItemAdjustmentList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentAdjustmentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentAdjustmentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A comma-delimited list of Removal shipmentAdjustment details for FBA inventory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentAdjustmentEventList : System.Collections.ObjectModel.Collection<RemovalShipmentAdjustmentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentAdjustmentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentAdjustmentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item-level information for a removal shipment item adjustment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalShipmentItemAdjustment
    {
        /// <summary>
        /// An identifier for an item in a removal shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RemovalShipmentItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemovalShipmentItemId { get; set; }

        /// <summary>
        /// The tax collection model applied to the item.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
        /// <br/>
        /// <br/>* Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxCollectionModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCollectionModel { get; set; }

        /// <summary>
        /// The Amazon fulfillment network SKU for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentNetworkSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        /// Adjusted quantity of removal shipmentItemAdjustment items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdjustedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdjustedQuantity { get; set; }

        /// <summary>
        /// The total amount adjusted for disputed items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RevenueAdjustment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency RevenueAdjustment { get; set; }

        /// <summary>
        /// Adjustment on the Tax collected amount on the adjusted revenue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxAmountAdjustment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxAmountAdjustment { get; set; }

        /// <summary>
        /// Adjustment the tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel=MarketplaceFacilitator, then TaxWithheld=TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld=0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxWithheldAdjustment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxWithheldAdjustment { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemovalShipmentItemAdjustment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemovalShipmentItemAdjustment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An event related to a rental transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RentalTransactionEvent
    {
        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The type of rental event.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.
        /// <br/>
        /// <br/>* RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.
        /// <br/>
        /// <br/>* RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.
        /// <br/>
        /// <br/>* RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.
        /// <br/>
        /// <br/>* RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.
        /// <br/>
        /// <br/>* RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.
        /// <br/>
        /// <br/>* RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RentalEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RentalEventType { get; set; }

        /// <summary>
        /// The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtensionLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExtensionLength { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// A list of charges associated with the rental event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RentalChargeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList RentalChargeList { get; set; }

        /// <summary>
        /// A list of fees associated with the rental event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RentalFeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList RentalFeeList { get; set; }

        /// <summary>
        /// The name of the marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceName { get; set; }

        /// <summary>
        /// The amount of money the customer originally paid to rent the item. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RentalInitialValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency RentalInitialValue { get; set; }

        /// <summary>
        /// The amount of money Amazon sends the seller to compensate for a lost item or a failed charge. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RentalReimbursement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency RentalReimbursement { get; set; }

        /// <summary>
        /// A list of taxes withheld information for a rental item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RentalTaxWithheldList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxWithheldComponentList RentalTaxWithheldList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RentalTransactionEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RentalTransactionEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of rental transaction event information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RentalTransactionEventList : System.Collections.ObjectModel.Collection<RentalTransactionEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RentalTransactionEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RentalTransactionEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A retrocharge or retrocharge reversal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetrochargeEvent
    {
        /// <summary>
        /// The type of event.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* Retrocharge
        /// <br/>
        /// <br/>* RetrochargeReversal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RetrochargeEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RetrochargeEventType { get; set; }

        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The base tax associated with the retrocharge event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BaseTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency BaseTax { get; set; }

        /// <summary>
        /// The shipping tax associated with the retrocharge event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency ShippingTax { get; set; }

        /// <summary>
        /// The name of the marketplace where the retrocharge event occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceName { get; set; }

        /// <summary>
        /// A list of information about taxes withheld.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RetrochargeTaxWithheldList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxWithheldComponentList RetrochargeTaxWithheldList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RetrochargeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrochargeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about Retrocharge or RetrochargeReversal events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetrochargeEventList : System.Collections.ObjectModel.Collection<RetrochargeEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RetrochargeEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrochargeEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A SAFE-T claim reimbursement on the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SAFETReimbursementEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// A SAFE-T claim identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SAFETClaimId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SAFETClaimId { get; set; }

        /// <summary>
        /// The amount of the reimbursement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReimbursedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency ReimbursedAmount { get; set; }

        /// <summary>
        /// Indicates why the seller was reimbursed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode { get; set; }

        [Newtonsoft.Json.JsonProperty("SAFETReimbursementItemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SAFETReimbursementItemList SAFETReimbursementItemList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SAFETReimbursementEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SAFETReimbursementEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of SAFETReimbursementEvents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SAFETReimbursementEventList : System.Collections.ObjectModel.Collection<SAFETReimbursementEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SAFETReimbursementEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SAFETReimbursementEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item from a SAFE-T claim reimbursement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SAFETReimbursementItem
    {
        /// <summary>
        /// A list of charges associated with the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemChargeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList ItemChargeList { get; set; }

        /// <summary>
        /// The description of the item as shown on the product detail page on the retail website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The number of units of the item being reimbursed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Quantity { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SAFETReimbursementItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SAFETReimbursementItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of SAFETReimbursementItems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SAFETReimbursementItemList : System.Collections.ObjectModel.Collection<SAFETReimbursementItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SAFETReimbursementItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SAFETReimbursementItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An event linked to the payment of a fee related to the specified deal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerDealPaymentEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The unique identifier of the deal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dealId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealId { get; set; }

        /// <summary>
        /// The internal description of the deal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dealDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealDescription { get; set; }

        /// <summary>
        /// The type of event: SellerDealComplete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType { get; set; }

        /// <summary>
        /// The type of fee: RunLightningDealFee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeeType { get; set; }

        /// <summary>
        /// The monetary amount of the fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency FeeAmount { get; set; }

        /// <summary>
        /// The monetary amount of the tax applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TaxAmount { get; set; }

        /// <summary>
        /// The total monetary amount paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TotalAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerDealPaymentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerDealPaymentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of payment events for deal-related fees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerDealPaymentEventList : System.Collections.ObjectModel.Collection<SellerDealPaymentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerDealPaymentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerDealPaymentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A fee payment event for the Early Reviewer Program.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerReviewEnrollmentPaymentEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// An enrollment identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnrollmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnrollmentId { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ParentASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentASIN { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeComponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponent FeeComponent { get; set; }

        [Newtonsoft.Json.JsonProperty("ChargeComponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponent ChargeComponent { get; set; }

        /// <summary>
        /// The FeeComponent value plus the ChargeComponent value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TotalAmount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerReviewEnrollmentPaymentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerReviewEnrollmentPaymentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about fee events for the Early Reviewer Program.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerReviewEnrollmentPaymentEventList : System.Collections.ObjectModel.Collection<SellerReviewEnrollmentPaymentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerReviewEnrollmentPaymentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerReviewEnrollmentPaymentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A service fee on the seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceFeeEvent
    {
        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A short description of the service fee reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeeReason { get; set; }

        /// <summary>
        /// A list of fee components associated with the service fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList FeeList { get; set; }

        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FnSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FnSKU { get; set; }

        /// <summary>
        /// A short description of the service fee event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeeDescription { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceFeeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceFeeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about service fee events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceFeeEventList : System.Collections.ObjectModel.Collection<ServiceFeeEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceFeeEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceFeeEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A shipment, refund, guarantee claim, or chargeback.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentEvent
    {
        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A seller-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// The name of the marketplace where the event occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceName { get; set; }

        /// <summary>
        /// A list of order-level charges. These charges are applicable to Multi-Channel Fulfillment COD orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderChargeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList OrderChargeList { get; set; }

        /// <summary>
        /// A list of order-level charge adjustments. These adjustments are applicable to Multi-Channel Fulfillment COD orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderChargeAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList OrderChargeAdjustmentList { get; set; }

        /// <summary>
        /// A list of shipment-level fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentFeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList ShipmentFeeList { get; set; }

        /// <summary>
        /// A list of shipment-level fee adjustments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentFeeAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList ShipmentFeeAdjustmentList { get; set; }

        /// <summary>
        /// A list of order-level fees. These charges are applicable to Multi-Channel Fulfillment orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderFeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList OrderFeeList { get; set; }

        /// <summary>
        /// A list of order-level fee adjustments. These adjustments are applicable to Multi-Channel Fulfillment orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderFeeAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList OrderFeeAdjustmentList { get; set; }

        /// <summary>
        /// A list of transactions where buyers pay Amazon through one of the credit cards offered by Amazon or where buyers pay a seller directly through COD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DirectPaymentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DirectPaymentList DirectPaymentList { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentItemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentItemList ShipmentItemList { get; set; }

        /// <summary>
        /// A list of shipment item adjustments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentItemAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentItemList ShipmentItemAdjustmentList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of shipment event information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentEventList : System.Collections.ObjectModel.Collection<ShipmentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item of a shipment, refund, guarantee claim, or chargeback.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentItem
    {
        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// An Amazon-defined order item identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderAdjustmentItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderAdjustmentItemId { get; set; }

        /// <summary>
        /// The number of items shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityShipped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityShipped { get; set; }

        /// <summary>
        /// A list of charges associated with the shipment item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemChargeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList ItemChargeList { get; set; }

        /// <summary>
        /// A list of charge adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemChargeAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList ItemChargeAdjustmentList { get; set; }

        /// <summary>
        /// A list of fees associated with the shipment item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemFeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList ItemFeeList { get; set; }

        /// <summary>
        /// A list of fee adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemFeeAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList ItemFeeAdjustmentList { get; set; }

        /// <summary>
        /// A list of taxes withheld information for a shipment item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemTaxWithheldList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxWithheldComponentList ItemTaxWithheldList { get; set; }

        [Newtonsoft.Json.JsonProperty("PromotionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionList PromotionList { get; set; }

        /// <summary>
        /// A list of promotion adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PromotionAdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionList PromotionAdjustmentList { get; set; }

        /// <summary>
        /// The cost of Amazon Points granted for a shipment item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CostOfPointsGranted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency CostOfPointsGranted { get; set; }

        /// <summary>
        /// The cost of Amazon Points returned for a shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CostOfPointsReturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency CostOfPointsReturned { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of shipment items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentItemList : System.Collections.ObjectModel.Collection<ShipmentItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A credit given to a solution provider.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SolutionProviderCreditEvent
    {
        /// <summary>
        /// The transaction type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProviderTransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderTransactionType { get; set; }

        /// <summary>
        /// A seller-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// The identifier of the marketplace where the order was placed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The two-letter country code of the country associated with the marketplace where the order was placed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceCountryCode { get; set; }

        /// <summary>
        /// The Amazon-defined identifier of the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerId { get; set; }

        /// <summary>
        /// The store name where the payment event occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerStoreName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerStoreName { get; set; }

        /// <summary>
        /// The Amazon-defined identifier of the solution provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderId { get; set; }

        /// <summary>
        /// The store name where the payment event occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProviderStoreName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderStoreName { get; set; }

        /// <summary>
        /// The amount of the credit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency TransactionAmount { get; set; }

        /// <summary>
        /// The date and time that the credit transaction was created, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TransactionCreationDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SolutionProviderCreditEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SolutionProviderCreditEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about solution provider credits.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SolutionProviderCreditEventList : System.Collections.ObjectModel.Collection<SolutionProviderCreditEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SolutionProviderCreditEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SolutionProviderCreditEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Period which taxwithholding on seller's account is calculated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxWithholdingPeriod
    {
        /// <summary>
        /// Start of the time range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// End of the time range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxWithholdingPeriod FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxWithholdingPeriod>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A TaxWithholding event on seller's account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxWithholdingEvent
    {
        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The amount which tax was withheld against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BaseAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency BaseAmount { get; set; }

        /// <summary>
        /// The amount of the tax withholding deducted from seller's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WithheldAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency WithheldAmount { get; set; }

        /// <summary>
        /// Time period for which tax is withheld.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxWithholdingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxWithholdingPeriod TaxWithholdingPeriod { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxWithholdingEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxWithholdingEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of TaxWithholding events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxWithholdingEventList : System.Collections.ObjectModel.Collection<TaxWithholdingEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxWithholdingEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxWithholdingEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about the taxes withheld.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxWithheldComponent
    {
        /// <summary>
        /// The tax collection model applied to the item.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
        /// <br/>
        /// <br/>* Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxCollectionModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCollectionModel { get; set; }

        /// <summary>
        /// A list of charges that represent the types and amounts of taxes withheld.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxesWithheld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChargeComponentList TaxesWithheld { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxWithheldComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxWithheldComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about taxes withheld.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxWithheldComponentList : System.Collections.ObjectModel.Collection<TaxWithheldComponent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxWithheldComponentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxWithheldComponentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An event related to a trial shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrialShipmentEvent
    {
        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The identifier of the financial event group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinancialEventGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialEventGroupId { get; set; }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SKU { get; set; }

        /// <summary>
        /// A list of fees charged by Amazon for trial shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeComponentList FeeList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrialShipmentEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrialShipmentEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about trial shipment financial events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrialShipmentEventList : System.Collections.ObjectModel.Collection<TrialShipmentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrialShipmentEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrialShipmentEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of information about shipment settle financial events.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSettleEventList : System.Collections.ObjectModel.Collection<ShipmentEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentSettleEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentSettleEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition in a human-readable form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFinancesApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerFinancesApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFinancesApiException<TResult> : AmazonSellingPartnerFinancesApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerFinancesApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603