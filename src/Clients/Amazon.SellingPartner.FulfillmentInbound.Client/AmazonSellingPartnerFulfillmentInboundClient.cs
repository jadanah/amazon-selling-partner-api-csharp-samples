//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.FulfillmentInbound.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerFulfillmentInboundClient
    {
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetInboundGuidanceResponse GetInboundGuidance(string marketplaceId, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInboundGuidanceResponse> GetInboundGuidanceAsync(string marketplaceId, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        CreateInboundShipmentPlanResponse CreateInboundShipmentPlan(CreateInboundShipmentPlanRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanAsync(CreateInboundShipmentPlanRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        InboundShipmentResponse CreateInboundShipment(InboundShipmentRequest body, string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InboundShipmentResponse> CreateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        InboundShipmentResponse UpdateInboundShipment(InboundShipmentRequest body, string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InboundShipmentResponse> UpdateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetPreorderInfoResponse GetPreorderInfo(string shipmentId, string marketplaceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPreorderInfoResponse> GetPreorderInfoAsync(string shipmentId, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        ConfirmPreorderResponse ConfirmPreorder(string shipmentId, System.DateTime needByDate, string marketplaceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfirmPreorderResponse> ConfirmPreorderAsync(string shipmentId, System.DateTime needByDate, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
        /// <br/>
        /// <br/>Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
        /// <br/>
        /// <br/>Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetPrepInstructionsResponse GetPrepInstructions(string shipToCountryCode, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
        /// <br/>
        /// <br/>Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
        /// <br/>
        /// <br/>Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync(string shipToCountryCode, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetTransportDetailsResponse GetTransportDetails(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTransportDetailsResponse> GetTransportDetailsAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        PutTransportDetailsResponse PutTransportDetails(string shipmentId, PutTransportDetailsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PutTransportDetailsResponse> PutTransportDetailsAsync(string shipmentId, PutTransportDetailsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        VoidTransportResponse VoidTransport(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VoidTransportResponse> VoidTransportAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        EstimateTransportResponse EstimateTransport(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstimateTransportResponse> EstimateTransportAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        ConfirmTransportResponse ConfirmTransport(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfirmTransportResponse> ConfirmTransportAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested.</param>
        /// <param name="numberOfPackages">The number of packages in the shipment.</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.
        /// <br/>
        /// <br/>Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet.</param>
        /// <param name="pageSize">The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetLabelsResponse GetLabels(string shipmentId, PageType pageType, LabelType labelType, int? numberOfPackages = null, System.Collections.Generic.IEnumerable<string> packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested.</param>
        /// <param name="numberOfPackages">The number of packages in the shipment.</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.
        /// <br/>
        /// <br/>Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet.</param>
        /// <param name="pageSize">The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetLabelsResponse> GetLabelsAsync(string shipmentId, PageType pageType, LabelType labelType, int? numberOfPackages = null, System.Collections.Generic.IEnumerable<string> packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetBillOfLadingResponse GetBillOfLading(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBillOfLadingResponse> GetBillOfLadingAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetShipmentsResponse GetShipments(QueryType queryType, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> shipmentStatusList = null, System.Collections.Generic.IEnumerable<string> shipmentIdList = null, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetShipmentsResponse> GetShipmentsAsync(QueryType queryType, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> shipmentStatusList = null, System.Collections.Generic.IEnumerable<string> shipmentIdList = null, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetShipmentItemsResponse GetShipmentItemsByShipmentId(string shipmentId, string marketplaceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync(string shipmentId, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        GetShipmentItemsResponse GetShipmentItems(QueryType2 queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsAsync(QueryType2 queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFulfillmentInboundClient : IAmazonSellingPartnerFulfillmentInboundClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerFulfillmentInboundClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetInboundGuidanceResponse GetInboundGuidance(string marketplaceId, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetInboundGuidanceAsync(marketplaceId, sellerSKUList, aSINList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetInboundGuidanceResponse> GetInboundGuidanceAsync(string marketplaceId, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/itemsGuidance?");
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sellerSKUList != null)
            {
                foreach (var item_ in sellerSKUList) { urlBuilder_.Append(System.Uri.EscapeDataString("SellerSKUList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (aSINList != null)
            {
                foreach (var item_ in aSINList) { urlBuilder_.Append(System.Uri.EscapeDataString("ASINList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInboundGuidanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetInboundGuidanceResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual CreateInboundShipmentPlanResponse CreateInboundShipmentPlan(CreateInboundShipmentPlanRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateInboundShipmentPlanAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanAsync(CreateInboundShipmentPlanRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/plans");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInboundShipmentPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<CreateInboundShipmentPlanResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual InboundShipmentResponse CreateInboundShipment(InboundShipmentRequest body, string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateInboundShipmentAsync(body, shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InboundShipmentResponse> CreateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual InboundShipmentResponse UpdateInboundShipment(InboundShipmentRequest body, string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await UpdateInboundShipmentAsync(body, shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InboundShipmentResponse> UpdateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboundShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<InboundShipmentResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetPreorderInfoResponse GetPreorderInfo(string shipmentId, string marketplaceId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetPreorderInfoAsync(shipmentId, marketplaceId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPreorderInfoResponse> GetPreorderInfoAsync(string shipmentId, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/preorder?");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPreorderInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPreorderInfoResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual ConfirmPreorderResponse ConfirmPreorder(string shipmentId, System.DateTime needByDate, string marketplaceId)
        {
            return System.Threading.Tasks.Task.Run(async () => await ConfirmPreorderAsync(shipmentId, needByDate, marketplaceId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConfirmPreorderResponse> ConfirmPreorderAsync(string shipmentId, System.DateTime needByDate, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (needByDate == null)
                throw new System.ArgumentNullException("needByDate");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/preorder/confirm?");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("NeedByDate") + "=").Append(System.Uri.EscapeDataString(needByDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmPreorderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmPreorderResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
        /// <br/>
        /// <br/>Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
        /// <br/>
        /// <br/>Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetPrepInstructionsResponse GetPrepInstructions(string shipToCountryCode, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetPrepInstructionsAsync(shipToCountryCode, sellerSKUList, aSINList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
        /// <br/>
        /// <br/>Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
        /// <br/>
        /// <br/>Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync(string shipToCountryCode, System.Collections.Generic.IEnumerable<string> sellerSKUList = null, System.Collections.Generic.IEnumerable<string> aSINList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipToCountryCode == null)
                throw new System.ArgumentNullException("shipToCountryCode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/prepInstructions?");
            urlBuilder_.Append(System.Uri.EscapeDataString("ShipToCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipToCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sellerSKUList != null)
            {
                foreach (var item_ in sellerSKUList) { urlBuilder_.Append(System.Uri.EscapeDataString("SellerSKUList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (aSINList != null)
            {
                foreach (var item_ in aSINList) { urlBuilder_.Append(System.Uri.EscapeDataString("ASINList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPrepInstructionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetPrepInstructionsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetTransportDetailsResponse GetTransportDetails(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetTransportDetailsAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetTransportDetailsResponse> GetTransportDetailsAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/transport");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetTransportDetailsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual PutTransportDetailsResponse PutTransportDetails(string shipmentId, PutTransportDetailsRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await PutTransportDetailsAsync(shipmentId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PutTransportDetailsResponse> PutTransportDetailsAsync(string shipmentId, PutTransportDetailsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/transport");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutTransportDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<PutTransportDetailsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual VoidTransportResponse VoidTransport(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await VoidTransportAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VoidTransportResponse> VoidTransportAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/transport/void");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoidTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<VoidTransportResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual EstimateTransportResponse EstimateTransport(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await EstimateTransportAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EstimateTransportResponse> EstimateTransportAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/transport/estimate");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<EstimateTransportResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual ConfirmTransportResponse ConfirmTransport(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await ConfirmTransportAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConfirmTransportResponse> ConfirmTransportAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/transport/confirm");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfirmTransportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<ConfirmTransportResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested.</param>
        /// <param name="numberOfPackages">The number of packages in the shipment.</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.
        /// <br/>
        /// <br/>Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet.</param>
        /// <param name="pageSize">The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetLabelsResponse GetLabels(string shipmentId, PageType pageType, LabelType labelType, int? numberOfPackages = null, System.Collections.Generic.IEnumerable<string> packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetLabelsAsync(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets, pageSize, pageStartIndex, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested.</param>
        /// <param name="numberOfPackages">The number of packages in the shipment.</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.
        /// <br/>
        /// <br/>Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet.</param>
        /// <param name="pageSize">The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetLabelsResponse> GetLabelsAsync(string shipmentId, PageType pageType, LabelType labelType, int? numberOfPackages = null, System.Collections.Generic.IEnumerable<string> packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (pageType == null)
                throw new System.ArgumentNullException("pageType");

            if (labelType == null)
                throw new System.ArgumentNullException("labelType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/labels?");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("PageType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("LabelType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(labelType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (numberOfPackages != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NumberOfPackages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfPackages, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (packageLabelsToPrint != null)
            {
                foreach (var item_ in packageLabelsToPrint) { urlBuilder_.Append(System.Uri.EscapeDataString("PackageLabelsToPrint") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (numberOfPallets != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NumberOfPallets") + "=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfPallets, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageStartIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PageStartIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageStartIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetLabelsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetBillOfLadingResponse GetBillOfLading(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetBillOfLadingAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBillOfLadingResponse> GetBillOfLadingAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/billOfLading");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBillOfLadingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetBillOfLadingResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetShipmentsResponse GetShipments(QueryType queryType, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> shipmentStatusList = null, System.Collections.Generic.IEnumerable<string> shipmentIdList = null, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetShipmentsAsync(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetShipmentsResponse> GetShipmentsAsync(QueryType queryType, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> shipmentStatusList = null, System.Collections.Generic.IEnumerable<string> shipmentIdList = null, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (queryType == null)
                throw new System.ArgumentNullException("queryType");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments?");
            urlBuilder_.Append(System.Uri.EscapeDataString("QueryType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (shipmentStatusList != null)
            {
                foreach (var item_ in shipmentStatusList) { urlBuilder_.Append(System.Uri.EscapeDataString("ShipmentStatusList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (shipmentIdList != null)
            {
                foreach (var item_ in shipmentIdList) { urlBuilder_.Append(System.Uri.EscapeDataString("ShipmentIdList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (lastUpdatedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LastUpdatedAfter") + "=").Append(System.Uri.EscapeDataString(lastUpdatedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastUpdatedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LastUpdatedBefore") + "=").Append(System.Uri.EscapeDataString(lastUpdatedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetShipmentItemsResponse GetShipmentItemsByShipmentId(string shipmentId, string marketplaceId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetShipmentItemsByShipmentIdAsync(shipmentId, marketplaceId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync(string shipmentId, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipments/{shipmentId}/items?");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual GetShipmentItemsResponse GetShipmentItems(QueryType2 queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetShipmentItemsAsync(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentInboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsAsync(QueryType2 queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = null, System.DateTime? lastUpdatedBefore = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (queryType == null)
                throw new System.ArgumentNullException("queryType");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v0/shipmentItems?");
            urlBuilder_.Append(System.Uri.EscapeDataString("QueryType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastUpdatedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LastUpdatedAfter") + "=").Append(System.Uri.EscapeDataString(lastUpdatedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastUpdatedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LastUpdatedBefore") + "=").Append(System.Uri.EscapeDataString(lastUpdatedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentItemsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentInboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentInboundApiException<GetShipmentItemsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentInboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFulfillmentInboundApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFulfillmentInboundApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition in a human-readable form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Reasons why a given ASIN is not recommended for shipment to Amazon's fulfillment network.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASINInboundGuidance
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ASIN { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundGuidance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InboundGuidance InboundGuidance { get; set; }

        /// <summary>
        /// A list of reasons for the current inbound guidance for this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GuidanceReasonList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuidanceReasonList GuidanceReasonList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ASINInboundGuidance FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ASINInboundGuidance>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of ASINs and their associated inbound guidance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASINInboundGuidanceList : System.Collections.ObjectModel.Collection<ASINInboundGuidance>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ASINInboundGuidanceList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ASINInboundGuidanceList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item preparation instructions to help with item sourcing decisions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASINPrepInstructions
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        [Newtonsoft.Json.JsonProperty("BarcodeInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BarcodeInstruction? BarcodeInstruction { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepGuidance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepGuidance? PrepGuidance { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepInstructionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepInstructionList PrepInstructionList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ASINPrepInstructions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ASINPrepInstructions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of item preparation instructions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASINPrepInstructionsList : System.Collections.ObjectModel.Collection<ASINPrepInstructions>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ASINPrepInstructionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ASINPrepInstructionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Name of the individual or business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }

        /// <summary>
        /// The street address information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressLine1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(180)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional street address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The district or county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DistrictOrCounty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string DistrictOrCounty { get; set; }

        /// <summary>
        /// The city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }

        /// <summary>
        /// The state or province code.
        /// <br/>
        /// <br/>If state or province codes are used in your marketplace, it is recommended that you include one with your request. This helps Amazon to select the most appropriate Amazon fulfillment center for your inbound shipment plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StateOrProvinceCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// The country code in two-character ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The postal code.
        /// <br/>
        /// <br/>If postal codes are used in your marketplace, we recommended that you include one with your request. This helps Amazon select the most appropriate Amazon fulfillment center for the inbound shipment plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PostalCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Address FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The fees for Amazon to prep goods for shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonPrepFeesDetails
    {
        [Newtonsoft.Json.JsonProperty("PrepInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepInstruction? PrepInstruction { get; set; }

        /// <summary>
        /// The fee for Amazon to prepare 1 unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeePerUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount FeePerUnit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AmazonPrepFeesDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AmazonPrepFeesDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of preparation instructions and fees for Amazon to prep goods for shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonPrepFeesDetailsList : System.Collections.ObjectModel.Collection<AmazonPrepFeesDetails>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AmazonPrepFeesDetailsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AmazonPrepFeesDetailsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The monetary value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CurrencyCode CurrencyCode { get; set; }

        /// <summary>
        /// The amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Amount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Amount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Labeling requirements for the item. For more information about FBA labeling requirements, see the Seller Central Help for your marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BarcodeInstruction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresFNSKULabel")]
        RequiresFNSKULabel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CanUseOriginalBarcode")]
        CanUseOriginalBarcode = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MustProvideSellerSKU")]
        MustProvideSellerSKU = 2,

    }

    /// <summary>
    /// The manual processing fee per unit and total fee for a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BoxContentsFeeDetails
    {
        /// <summary>
        /// The number of units to ship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalUnits { get; set; }

        /// <summary>
        /// The manual processing fee per unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeePerUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount FeePerUnit { get; set; }

        /// <summary>
        /// The total manual processing fee for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount TotalFee { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BoxContentsFeeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BoxContentsFeeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Where the seller provided box contents information for a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BoxContentsSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEED")]
        FEED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"2D_BARCODE")]
        _2D_BARCODE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERACTIVE")]
        INTERACTIVE = 3,

    }

    /// <summary>
    /// The condition of the item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Condition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NewItem")]
        NewItem = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NewWithWarranty")]
        NewWithWarranty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NewOEM")]
        NewOEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NewOpenBox")]
        NewOpenBox = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UsedLikeNew")]
        UsedLikeNew = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UsedVeryGood")]
        UsedVeryGood = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UsedGood")]
        UsedGood = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UsedAcceptable")]
        UsedAcceptable = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UsedPoor")]
        UsedPoor = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UsedRefurbished")]
        UsedRefurbished = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectibleLikeNew")]
        CollectibleLikeNew = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectibleVeryGood")]
        CollectibleVeryGood = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectibleGood")]
        CollectibleGood = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectibleAcceptable")]
        CollectibleAcceptable = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectiblePoor")]
        CollectiblePoor = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RefurbishedWithWarranty")]
        RefurbishedWithWarranty = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Refurbished")]
        Refurbished = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmPreorderResult
    {
        /// <summary>
        /// Date passed in with the NeedByDate parameter. The confirmed shipment must arrive at the Amazon fulfillment center by this date to avoid delivery promise breaks for pre-ordered items. In YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConfirmedNeedByDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ConfirmedNeedByDate { get; set; }

        /// <summary>
        /// Date that determines which pre-order items in the shipment are eligible for pre-order. The pre-order Buy Box will appear for any pre-order item in the shipment with a release date on or after this date. In YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConfirmedFulfillableDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ConfirmedFulfillableDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfirmPreorderResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmPreorderResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the confirmPreorder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmPreorderResponse
    {
        /// <summary>
        /// The payload for the confirmPreorder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfirmPreorderResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfirmPreorderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmPreorderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommonTransportResult
    {
        [Newtonsoft.Json.JsonProperty("TransportResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportResult TransportResult { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CommonTransportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommonTransportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the confirmTransport operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmTransportResponse
    {
        /// <summary>
        /// The payload for the confirmTransport operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommonTransportResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConfirmTransportResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfirmTransportResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// The name of the contact person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }

        /// <summary>
        /// The phone number of the contact person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Phone { get; set; }

        /// <summary>
        /// The email address of the contact person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Email { get; set; }

        /// <summary>
        /// The fax number of the contact person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Fax { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Contact FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contact>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The request schema for the createInboundShipmentPlan operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInboundShipmentPlanRequest
    {
        /// <summary>
        /// The address from which the inbound shipment will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipFromAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipFromAddress { get; set; } = new Address();

        /// <summary>
        /// The seller's preference for label preparation for an inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LabelPrepPreference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelPrepPreference LabelPrepPreference { get; set; }

        /// <summary>
        /// The two-character country code for the country where the inbound shipment is to be sent.
        /// <br/>
        /// <br/>Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
        /// <br/>
        /// <br/> Values:
        /// <br/>
        /// <br/> ShipToCountryCode values for North America:
        /// <br/> * CA – Canada
        /// <br/> * MX - Mexico
        /// <br/> * US - United States
        /// <br/>
        /// <br/>ShipToCountryCode values for MCI sellers in Europe:
        /// <br/> * DE – Germany
        /// <br/> * ES – Spain
        /// <br/> * FR – France
        /// <br/> * GB – United Kingdom
        /// <br/> * IT – Italy
        /// <br/>
        /// <br/>Default: The country code for the seller's home marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipToCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipToCountryCode { get; set; }

        /// <summary>
        /// The two-character country code, followed by a dash and then up to three characters that represent the subdivision of the country where the inbound shipment is to be sent. For example, "IN-MH". In full ISO 3166-2 format.
        /// <br/>
        /// <br/>Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipToCountrySubdivisionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipToCountrySubdivisionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundShipmentPlanRequestItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InboundShipmentPlanRequestItemList InboundShipmentPlanRequestItems { get; set; } = new InboundShipmentPlanRequestItemList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateInboundShipmentPlanRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateInboundShipmentPlanRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInboundShipmentPlanResult
    {
        [Newtonsoft.Json.JsonProperty("InboundShipmentPlans", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InboundShipmentPlanList InboundShipmentPlans { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateInboundShipmentPlanResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateInboundShipmentPlanResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the createInboundShipmentPlan operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInboundShipmentPlanResponse
    {
        /// <summary>
        /// The payload for the createInboundShipmentPlan operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateInboundShipmentPlanResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateInboundShipmentPlanResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateInboundShipmentPlanResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The request schema for an inbound shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentRequest
    {
        [Newtonsoft.Json.JsonProperty("InboundShipmentHeader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InboundShipmentHeader InboundShipmentHeader { get; set; } = new InboundShipmentHeader();

        [Newtonsoft.Json.JsonProperty("InboundShipmentItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InboundShipmentItemList InboundShipmentItems { get; set; } = new InboundShipmentItemList();

        /// <summary>
        /// A marketplace identifier. Specifies the marketplace where the product would be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentResult
    {
        /// <summary>
        /// The shipment identifier submitted in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for this operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentResponse
    {
        /// <summary>
        /// The payload for this operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InboundShipmentResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 1,

    }

    /// <summary>
    /// The dimension values and unit of measurement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {
        /// <summary>
        /// The length dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.Always)]
        public double Length { get; set; }

        /// <summary>
        /// The width dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }

        /// <summary>
        /// The height dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }

        /// <summary>
        /// The unit of measurement for the dimensions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfMeasurement Unit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Dimensions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dimensions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The reason that the ASIN is invalid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DoesNotExist")]
        DoesNotExist = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidASIN")]
        InvalidASIN = 1,

    }

    /// <summary>
    /// The response schema for the estimateTransport operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstimateTransportResponse
    {
        /// <summary>
        /// The payload for the estimateTransport operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommonTransportResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EstimateTransportResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EstimateTransportResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getBillOfLading operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBillOfLadingResponse
    {
        /// <summary>
        /// The payload for the getBillOfLading operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillOfLadingDownloadURL Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetBillOfLadingResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetBillOfLadingResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInboundGuidanceResult
    {
        [Newtonsoft.Json.JsonProperty("SKUInboundGuidanceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SKUInboundGuidanceList SKUInboundGuidanceList { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidSKUList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvalidSKUList InvalidSKUList { get; set; }

        [Newtonsoft.Json.JsonProperty("ASINInboundGuidanceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASINInboundGuidanceList ASINInboundGuidanceList { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidASINList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvalidASINList InvalidASINList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInboundGuidanceResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInboundGuidanceResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getInboundGuidance operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInboundGuidanceResponse
    {
        /// <summary>
        /// The payload for the getInboundGuidance operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInboundGuidanceResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInboundGuidanceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInboundGuidanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelDownloadURL
    {
        /// <summary>
        /// URL to download the label for the package. Note: The URL will only be valid for 15 seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DownloadURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadURL { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LabelDownloadURL FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelDownloadURL>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillOfLadingDownloadURL
    {
        /// <summary>
        /// URL to download the bill of lading for the package. Note: The URL will only be valid for 15 seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DownloadURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadURL { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BillOfLadingDownloadURL FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BillOfLadingDownloadURL>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getLabels operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLabelsResponse
    {
        /// <summary>
        /// The payload for the getLabels operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelDownloadURL Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLabelsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLabelsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPreorderInfoResult
    {
        /// <summary>
        /// Indicates whether the shipment contains items that have been enabled for pre-order. For more information about enabling items for pre-order, see the Seller Central Help.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentContainsPreorderableItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipmentContainsPreorderableItems { get; set; }

        /// <summary>
        /// Indicates whether this shipment has been confirmed for pre-order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentConfirmedForPreorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipmentConfirmedForPreorder { get; set; }

        /// <summary>
        /// Date that the shipment would need to arrive at an Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items if this shipment is later confirmed for pre-order. In YYYY-MM-DD format. See also the confirmPreorder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NeedByDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? NeedByDate { get; set; }

        /// <summary>
        /// Date in YYYY-MM-DD format that determines which pre-order items in the shipment are eligible for pre-order. If this shipment is confirmed for pre-order with a subsequent call to the confirmPreorder operation, the pre-order Buy Box will appear for any pre-order items in the shipment with a release date on or after this date. Call the getShipmentItems operation to get the release dates for the pre-order items in this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConfirmedFulfillableDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ConfirmedFulfillableDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPreorderInfoResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPreorderInfoResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getPreorderInfo operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPreorderInfoResponse
    {
        /// <summary>
        /// The payload for the getPreorderInfo operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPreorderInfoResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPreorderInfoResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPreorderInfoResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPrepInstructionsResult
    {
        [Newtonsoft.Json.JsonProperty("SKUPrepInstructionsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SKUPrepInstructionsList SKUPrepInstructionsList { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidSKUList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvalidSKUList InvalidSKUList { get; set; }

        [Newtonsoft.Json.JsonProperty("ASINPrepInstructionsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ASINPrepInstructionsList ASINPrepInstructionsList { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidASINList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvalidASINList InvalidASINList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPrepInstructionsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPrepInstructionsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getPrepInstructions operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPrepInstructionsResponse
    {
        /// <summary>
        /// The payload for the getPrepInstructions operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPrepInstructionsResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPrepInstructionsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPrepInstructionsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTransportDetailsResult
    {
        [Newtonsoft.Json.JsonProperty("TransportContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportContent TransportContent { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTransportDetailsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTransportDetailsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getTransportDetails operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTransportDetailsResponse
    {
        /// <summary>
        /// The payload for the getTransportDetails operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetTransportDetailsResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTransportDetailsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTransportDetailsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A reason for the current inbound guidance for an item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GuidanceReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SlowMovingASIN")]
        SlowMovingASIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NoApplicableGuidance")]
        NoApplicableGuidance = 1,

    }

    /// <summary>
    /// A list of inbound guidance reason information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuidanceReasonList : System.Collections.ObjectModel.Collection<GuidanceReason>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GuidanceReasonList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GuidanceReasonList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specific inbound guidance for an item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InboundGuidance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InboundNotRecommended")]
        InboundNotRecommended = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundOK")]
        InboundOK = 1,

    }

    /// <summary>
    /// Inbound shipment information used to create and update inbound shipments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentHeader
    {
        /// <summary>
        /// The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentName { get; set; }

        /// <summary>
        /// The return address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipFromAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipFromAddress { get; set; } = new Address();

        /// <summary>
        /// The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationFulfillmentCenterId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>true - All boxes in the shipment must be case packed.
        /// <br/>
        /// <br/>false - All boxes in the shipment must be individually packed.
        /// <br/>
        /// <br/>Note: If AreCasesRequired = true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AreCasesRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AreCasesRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentStatus ShipmentStatus { get; set; }

        /// <summary>
        /// The preference for label preparation for an inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LabelPrepPreference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelPrepPreference LabelPrepPreference { get; set; }

        [Newtonsoft.Json.JsonProperty("IntendedBoxContentsSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntendedBoxContentsSource? IntendedBoxContentsSource { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentHeader FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentHeader>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about the seller's inbound shipments. Returned by the listInboundShipments operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentInfo
    {
        /// <summary>
        /// The shipment identifier submitted in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The name for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentName { get; set; }

        /// <summary>
        /// The return address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipFromAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipFromAddress { get; set; } = new Address();

        /// <summary>
        /// An Amazon fulfillment center identifier created by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationFulfillmentCenterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationFulfillmentCenterId { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentStatus? ShipmentStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("LabelPrepType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelPrepType? LabelPrepType { get; set; }

        /// <summary>
        /// Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired = true for an inbound shipment, all items in the inbound shipment must be case packed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AreCasesRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool AreCasesRequired { get; set; }

        /// <summary>
        /// Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConfirmedNeedByDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ConfirmedNeedByDate { get; set; }

        [Newtonsoft.Json.JsonProperty("BoxContentsSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BoxContentsSource? BoxContentsSource { get; set; }

        /// <summary>
        /// An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only returned when BoxContentsSource is NONE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EstimatedBoxContentsFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentItem
    {
        /// <summary>
        /// A shipment identifier originally returned by the createInboundShipmentPlan operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Amazon's fulfillment network SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentNetworkSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        /// The item quantity that you are shipping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityShipped", Required = Newtonsoft.Json.Required.Always)]
        public int QuantityShipped { get; set; }

        /// <summary>
        /// The item quantity that has been received at an Amazon fulfillment center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityReceived { get; set; }

        /// <summary>
        /// The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of boxes in the inbound shipment equals QuantityShipped. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipment or the updateInboundShipment operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityInCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityInCase { get; set; }

        /// <summary>
        /// The date that a pre-order item will be available for sale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ReleaseDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepDetailsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrepDetailsList PrepDetailsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of inbound shipment item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentItemList : System.Collections.ObjectModel.Collection<InboundShipmentItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of inbound shipment information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentList : System.Collections.ObjectModel.Collection<InboundShipmentInfo>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Inbound shipment information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentPlan
    {
        /// <summary>
        /// A shipment identifier originally returned by the createInboundShipmentPlan operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// An Amazon fulfillment center identifier created by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationFulfillmentCenterId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// The address of the Amazon fulfillment center to which to ship the items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipToAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipToAddress { get; set; } = new Address();

        [Newtonsoft.Json.JsonProperty("LabelPrepType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelPrepType LabelPrepType { get; set; }

        /// <summary>
        /// SKU and quantity information for the items in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InboundShipmentPlanItemList Items { get; set; } = new InboundShipmentPlanItemList();

        [Newtonsoft.Json.JsonProperty("EstimatedBoxContentsFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentPlan FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentPlan>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentPlanItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Amazon's fulfillment network SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentNetworkSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        /// The item quantity that you are shipping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepDetailsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrepDetailsList PrepDetailsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentPlanItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentPlanItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of inbound shipment plan item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentPlanItemList : System.Collections.ObjectModel.Collection<InboundShipmentPlanItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentPlanItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentPlanItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of inbound shipment plan information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentPlanList : System.Collections.ObjectModel.Collection<InboundShipmentPlan>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentPlanList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentPlanList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentPlanRequestItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ASIN { get; set; }

        [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Condition Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityInCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityInCase { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepDetailsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrepDetailsList PrepDetailsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentPlanRequestItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentPlanRequestItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundShipmentPlanRequestItemList : System.Collections.ObjectModel.Collection<InboundShipmentPlanRequestItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InboundShipmentPlanRequestItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InboundShipmentPlanRequestItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// How the seller intends to provide box contents information for a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntendedBoxContentsSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEED")]
        FEED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"2D_BARCODE")]
        _2D_BARCODE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidASIN
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        /// <summary>
        /// The reason that the ASIN is invalid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorReason? ErrorReason { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidASIN FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidASIN>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of invalid ASIN values and the reasons they are invalid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidASINList : System.Collections.ObjectModel.Collection<InvalidASIN>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidASINList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidASINList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidSKU
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The reason why the seller SKU is invalid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorReason? ErrorReason { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidSKU FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSKU>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of invalid SKU values and the reason they are invalid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidSKUList : System.Collections.ObjectModel.Collection<InvalidSKU>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidSKUList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidSKUList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The preference for label preparation for an inbound shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelPrepPreference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER_LABEL")]
        SELLER_LABEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AMAZON_LABEL_ONLY")]
        AMAZON_LABEL_ONLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AMAZON_LABEL_PREFERRED")]
        AMAZON_LABEL_PREFERRED = 2,

    }

    /// <summary>
    /// The type of label preparation that is required for the inbound shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelPrepType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_LABEL")]
        NO_LABEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER_LABEL")]
        SELLER_LABEL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AMAZON_LABEL")]
        AMAZON_LABEL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShipmentItemsResult
    {
        /// <summary>
        /// A list of item information for an inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InboundShipmentItemList ItemData { get; set; }

        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShipmentItemsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShipmentItemsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getShipmentItems operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShipmentItemsResponse
    {
        /// <summary>
        /// The payload for the getShipmentItems operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetShipmentItemsResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShipmentItemsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShipmentItemsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShipmentsResult
    {
        /// <summary>
        /// Information about your inbound shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InboundShipmentList ShipmentData { get; set; }

        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShipmentsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShipmentsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getShipments operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShipmentsResponse
    {
        /// <summary>
        /// The payload for the getShipments operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetShipmentsResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShipmentsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShipmentsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information that you provide to Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by a carrier that has not partnered with Amazon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredLtlDataInput
    {
        /// <summary>
        /// The carrier that you are using for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredLtlDataInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredLtlDataInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment shipped by a carrier that has not partnered with Amazon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredLtlDataOutput
    {
        /// <summary>
        /// The carrier that you are using for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredLtlDataOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredLtlDataOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information that you provide to Amazon about a Small Parcel shipment shipped by a carrier that has not partnered with Amazon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredSmallParcelDataInput
    {
        /// <summary>
        /// The carrier that you are using for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NonPartneredSmallParcelPackageInputList PackageList { get; set; } = new NonPartneredSmallParcelPackageInputList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredSmallParcelDataInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredSmallParcelDataInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information returned by Amazon about a Small Parcel shipment by a carrier that has not partnered with Amazon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredSmallParcelDataOutput
    {
        [Newtonsoft.Json.JsonProperty("PackageList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NonPartneredSmallParcelPackageOutputList PackageList { get; set; } = new NonPartneredSmallParcelPackageOutputList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredSmallParcelDataOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredSmallParcelDataOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The tracking number of the package, provided by the carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredSmallParcelPackageInput
    {
        [Newtonsoft.Json.JsonProperty("TrackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredSmallParcelPackageInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredSmallParcelPackageInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of package tracking information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredSmallParcelPackageInputList : System.Collections.ObjectModel.Collection<NonPartneredSmallParcelPackageInput>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredSmallParcelPackageInputList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredSmallParcelPackageInputList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Carrier, tracking number, and status information for the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredSmallParcelPackageOutput
    {
        /// <summary>
        /// The carrier that you are using for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        [Newtonsoft.Json.JsonProperty("TrackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageStatus PackageStatus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredSmallParcelPackageOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredSmallParcelPackageOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of packages, including carrier, tracking number, and status information for each package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonPartneredSmallParcelPackageOutputList : System.Collections.ObjectModel.Collection<NonPartneredSmallParcelPackageOutput>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonPartneredSmallParcelPackageOutputList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonPartneredSmallParcelPackageOutputList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipment status of the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_IN")]
        CHECKED_IN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVING")]
        RECEIVING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 6,

    }

    /// <summary>
    /// Pallet information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pallet
    {
        /// <summary>
        /// The dimensions of the pallet. Length and width must be 40 inches by 48 inches. Height must be less than or equal to 60 inches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Dimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = new Dimensions();

        /// <summary>
        /// The weight of the pallet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Indicates whether pallets will be stacked when carrier arrives for pick-up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsStacked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsStacked { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Pallet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pallet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of pallet information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PalletList : System.Collections.ObjectModel.Collection<Pallet>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PalletList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PalletList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The estimated shipping cost for a shipment using an Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredEstimate
    {
        /// <summary>
        /// The amount that the Amazon-partnered carrier will charge to ship the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount Amount { get; set; } = new Amount();

        /// <summary>
        /// The date in ISO 8601 date time format by which this estimate must be confirmed. After this date the estimate is no longer valid and cannot be confirmed.
        /// <br/>
        /// <br/>Returned only if the TransportStatus value of the inbound shipment is ESTIMATED.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConfirmDeadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ConfirmDeadline { get; set; }

        /// <summary>
        /// The date in ISO 8601 date time format after which a confirmed transportation request can no longer be voided. This date is 24 hours after a Small Parcel shipment transportation request is confirmed or one hour after a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request is confirmed. After the void deadline passes the seller's account will be charged for the shipping cost.
        /// <br/>
        /// <br/>Returned only if the TransportStatus value of the inbound shipment is CONFIRMED.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VoidDeadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? VoidDeadline { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredEstimate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredEstimate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredLtlDataInput
    {
        /// <summary>
        /// Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// The number of boxes in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BoxCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BoxCount { get; set; }

        [Newtonsoft.Json.JsonProperty("SellerFreightClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellerFreightClass? SellerFreightClass { get; set; }

        /// <summary>
        /// The date that the shipment will be ready to be picked up by the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FreightReadyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? FreightReadyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PalletList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PalletList PalletList { get; set; }

        /// <summary>
        /// The total weight of the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalWeight { get; set; }

        /// <summary>
        /// The declaration of the total value of the inventory in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerDeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount SellerDeclaredValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredLtlDataInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredLtlDataInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredLtlDataOutput
    {
        /// <summary>
        /// Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Contact Contact { get; set; } = new Contact();

        /// <summary>
        /// The number of boxes in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BoxCount", Required = Newtonsoft.Json.Required.Always)]
        public long BoxCount { get; set; }

        [Newtonsoft.Json.JsonProperty("SellerFreightClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellerFreightClass? SellerFreightClass { get; set; }

        /// <summary>
        /// The date that the shipment will be ready to be picked up by the carrier. Must be in YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FreightReadyDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime FreightReadyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PalletList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PalletList PalletList { get; set; } = new PalletList();

        /// <summary>
        /// The total weight of the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalWeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight TotalWeight { get; set; } = new Weight();

        /// <summary>
        /// Your declaration of the total value of the inventory in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerDeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount SellerDeclaredValue { get; set; }

        /// <summary>
        /// Estimate by Amazon of the total value of the inventory in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonCalculatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AmazonCalculatedValue { get; set; }

        /// <summary>
        /// The estimated date that the shipment will be picked up by the carrier, in YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreviewPickupDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime PreviewPickupDate { get; set; }

        /// <summary>
        /// The estimated date that the shipment will be delivered to an Amazon fulfillment center, in YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreviewDeliveryDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime PreviewDeliveryDate { get; set; }

        /// <summary>
        /// The freight class of the shipment as estimated by Amazon if you did not include a freight class when you called the putTransportDetails operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreviewFreightClass", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellerFreightClass PreviewFreightClass { get; set; }

        /// <summary>
        /// A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonReferenceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonReferenceId { get; set; }

        /// <summary>
        /// Indicates whether the bill of lading for the shipment is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsBillOfLadingAvailable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsBillOfLadingAvailable { get; set; }

        /// <summary>
        /// The estimated shipping cost using an Amazon-partnered carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PartneredEstimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredEstimate PartneredEstimate { get; set; }

        /// <summary>
        /// The carrier for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredLtlDataOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredLtlDataOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information that is required by an Amazon-partnered carrier to ship a Small Parcel inbound shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredSmallParcelDataInput
    {
        [Newtonsoft.Json.JsonProperty("PackageList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredSmallParcelPackageInputList PackageList { get; set; }

        /// <summary>
        /// The Amazon-partnered carrier to use for the inbound shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredSmallParcelDataInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredSmallParcelDataInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information returned by Amazon about a Small Parcel shipment by an Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredSmallParcelDataOutput
    {
        [Newtonsoft.Json.JsonProperty("PackageList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartneredSmallParcelPackageOutputList PackageList { get; set; } = new PartneredSmallParcelPackageOutputList();

        [Newtonsoft.Json.JsonProperty("PartneredEstimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredEstimate PartneredEstimate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredSmallParcelDataOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredSmallParcelDataOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Dimension and weight information for the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredSmallParcelPackageInput
    {
        [Newtonsoft.Json.JsonProperty("Dimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = new Dimensions();

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredSmallParcelPackageInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredSmallParcelPackageInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of dimensions and weight information for packages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredSmallParcelPackageInputList : System.Collections.ObjectModel.Collection<PartneredSmallParcelPackageInput>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredSmallParcelPackageInputList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredSmallParcelPackageInputList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Dimension, weight, and shipping information for the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredSmallParcelPackageOutput
    {
        [Newtonsoft.Json.JsonProperty("Dimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = new Dimensions();

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// The carrier specified with a previous call to putTransportDetails.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        [Newtonsoft.Json.JsonProperty("TrackingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageStatus PackageStatus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredSmallParcelPackageOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredSmallParcelPackageOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of packages, including shipping information from the Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartneredSmallParcelPackageOutputList : System.Collections.ObjectModel.Collection<PartneredSmallParcelPackageOutput>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartneredSmallParcelPackageOutputList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartneredSmallParcelPackageOutputList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Preparation instructions and who is responsible for the preparation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepDetails
    {
        [Newtonsoft.Json.JsonProperty("PrepInstruction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepInstruction PrepInstruction { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepOwner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepOwner PrepOwner { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PrepDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrepDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of preparation instructions and who is responsible for that preparation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepDetailsList : System.Collections.ObjectModel.Collection<PrepDetails>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PrepDetailsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrepDetailsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item preparation instructions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrepGuidance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ConsultHelpDocuments")]
        ConsultHelpDocuments = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NoAdditionalPrepRequired")]
        NoAdditionalPrepRequired = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SeePrepInstructionsList")]
        SeePrepInstructionsList = 2,

    }

    /// <summary>
    /// Preparation instructions for shipping an item to Amazon's fulfillment network. For more information about preparing items for shipment to Amazon's fulfillment network, see the Seller Central Help for your marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrepInstruction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Polybagging")]
        Polybagging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BubbleWrapping")]
        BubbleWrapping = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Taping")]
        Taping = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BlackShrinkWrapping")]
        BlackShrinkWrapping = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Labeling")]
        Labeling = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HangGarment")]
        HangGarment = 5,

    }

    /// <summary>
    /// A list of preparation instructions to help with item sourcing decisions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepInstructionList : System.Collections.ObjectModel.Collection<PrepInstruction>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PrepInstructionList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrepInstructionList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates who will prepare the item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrepOwner
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AMAZON")]
        AMAZON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 1,

    }

    /// <summary>
    /// The request schema for a putTransportDetails operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransportDetailsRequest
    {
        /// <summary>
        /// Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsPartnered", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPartnered { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentType ShipmentType { get; set; }

        /// <summary>
        /// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransportDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportDetailInput TransportDetails { get; set; } = new TransportDetailInput();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PutTransportDetailsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PutTransportDetailsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Workflow status for a shipment with an Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransportDetailsResponse
    {
        /// <summary>
        /// The payload for the putTransportDetails operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommonTransportResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PutTransportDetailsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PutTransportDetailsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SKUInboundGuidance
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ASIN { get; set; }

        /// <summary>
        /// Specific inbound guidance for an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InboundGuidance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InboundGuidance InboundGuidance { get; set; }

        /// <summary>
        /// A list of reasons for the current inbound guidance for this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GuidanceReasonList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuidanceReasonList GuidanceReasonList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SKUInboundGuidance FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SKUInboundGuidance>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of SKU inbound guidance information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SKUInboundGuidanceList : System.Collections.ObjectModel.Collection<SKUInboundGuidance>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SKUInboundGuidanceList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SKUInboundGuidanceList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Labeling requirements and item preparation instructions to help you prepare items for shipment to Amazon's fulfillment network.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SKUPrepInstructions
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        [Newtonsoft.Json.JsonProperty("BarcodeInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BarcodeInstruction? BarcodeInstruction { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepGuidance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepGuidance? PrepGuidance { get; set; }

        [Newtonsoft.Json.JsonProperty("PrepInstructionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrepInstructionList PrepInstructionList { get; set; }

        [Newtonsoft.Json.JsonProperty("AmazonPrepFeesDetailsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmazonPrepFeesDetailsList AmazonPrepFeesDetailsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SKUPrepInstructions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SKUPrepInstructions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of SKU labeling requirements and item preparation instructions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SKUPrepInstructionsList : System.Collections.ObjectModel.Collection<SKUPrepInstructions>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SKUPrepInstructionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SKUPrepInstructionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The freight class of the shipment. For information about determining the freight class, contact the carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SellerFreightClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"50")]
        _50 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"55")]
        _55 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"60")]
        _60 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"65")]
        _65 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"70")]
        _70 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"77.5")]
        _77_5 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"85")]
        _85 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"92.5")]
        _92_5 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"110")]
        _110 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"125")]
        _125 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"150")]
        _150 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"175")]
        _175 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"250")]
        _250 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"300")]
        _300 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"400")]
        _400 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"500")]
        _500 = 17,

    }

    /// <summary>
    /// Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WORKING")]
        WORKING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVING")]
        RECEIVING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_IN")]
        CHECKED_IN = 9,

    }

    /// <summary>
    /// Specifies the carrier shipment type in a putTransportDetails request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SP")]
        SP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LTL")]
        LTL = 1,

    }

    /// <summary>
    /// Inbound shipment information, including carrier details, shipment status, and the workflow status for a request for shipment with an Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportContent
    {
        [Newtonsoft.Json.JsonProperty("TransportHeader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportHeader TransportHeader { get; set; } = new TransportHeader();

        [Newtonsoft.Json.JsonProperty("TransportDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportDetailOutput TransportDetails { get; set; } = new TransportDetailOutput();

        [Newtonsoft.Json.JsonProperty("TransportResult", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportResult TransportResult { get; set; } = new TransportResult();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransportContent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportContent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportDetailInput
    {
        [Newtonsoft.Json.JsonProperty("PartneredSmallParcelData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredSmallParcelDataInput PartneredSmallParcelData { get; set; }

        [Newtonsoft.Json.JsonProperty("NonPartneredSmallParcelData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonPartneredSmallParcelDataInput NonPartneredSmallParcelData { get; set; }

        [Newtonsoft.Json.JsonProperty("PartneredLtlData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredLtlDataInput PartneredLtlData { get; set; }

        [Newtonsoft.Json.JsonProperty("NonPartneredLtlData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonPartneredLtlDataInput NonPartneredLtlData { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransportDetailInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportDetailInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Inbound shipment information, including carrier details and shipment status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportDetailOutput
    {
        [Newtonsoft.Json.JsonProperty("PartneredSmallParcelData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredSmallParcelDataOutput PartneredSmallParcelData { get; set; }

        [Newtonsoft.Json.JsonProperty("NonPartneredSmallParcelData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonPartneredSmallParcelDataOutput NonPartneredSmallParcelData { get; set; }

        [Newtonsoft.Json.JsonProperty("PartneredLtlData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartneredLtlDataOutput PartneredLtlData { get; set; }

        [Newtonsoft.Json.JsonProperty("NonPartneredLtlData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonPartneredLtlDataOutput NonPartneredLtlData { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransportDetailOutput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportDetailOutput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipping identifier, information about whether the shipment is by an Amazon-partnered carrier, and information about whether the shipment is Small Parcel or Less Than Truckload/Full Truckload (LTL/FTL).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportHeader
    {
        /// <summary>
        /// The Amazon seller identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// A shipment identifier originally returned by the createInboundShipmentPlan operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Indicates whether a putTransportDetails request is for a partnered carrier.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* true – Request is for an Amazon-partnered carrier.
        /// <br/>
        /// <br/>* false – Request is for a non-Amazon-partnered carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsPartnered", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPartnered { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentType ShipmentType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransportHeader FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportHeader>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The workflow status for a shipment with an Amazon-partnered carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportResult
    {
        [Newtonsoft.Json.JsonProperty("TransportStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportStatus TransportStatus { get; set; }

        /// <summary>
        /// An error code that identifies the type of error that occured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDescription { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransportResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates the status of the Amazon-partnered carrier shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransportStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WORKING")]
        WORKING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATING")]
        ESTIMATING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED")]
        ESTIMATED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR_ON_ESTIMATING")]
        ERROR_ON_ESTIMATING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMING")]
        CONFIRMING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR_ON_CONFIRMING")]
        ERROR_ON_CONFIRMING = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VOIDING")]
        VOIDING = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VOIDED")]
        VOIDED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR_IN_VOIDING")]
        ERROR_IN_VOIDING = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 10,

    }

    /// <summary>
    /// Indicates the unit of measurement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnitOfMeasurement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"inches")]
        Inches = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"centimeters")]
        Centimeters = 1,

    }

    /// <summary>
    /// Indicates the unit of weight.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnitOfWeight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pounds")]
        Pounds = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"kilograms")]
        Kilograms = 1,

    }

    /// <summary>
    /// The response schema for the voidTransport operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoidTransportResponse
    {
        /// <summary>
        /// The payload for the voidTransport operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommonTransportResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VoidTransportResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VoidTransportResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The weight of the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        /// <summary>
        /// The weight value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfWeight Unit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Weight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Letter_2")]
        PackageLabel_Letter_2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Letter_4")]
        PackageLabel_Letter_4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Letter_6")]
        PackageLabel_Letter_6 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Letter_6_CarrierLeft")]
        PackageLabel_Letter_6_CarrierLeft = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_A4_2")]
        PackageLabel_A4_2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_A4_4")]
        PackageLabel_A4_4 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Plain_Paper")]
        PackageLabel_Plain_Paper = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Plain_Paper_CarrierBottom")]
        PackageLabel_Plain_Paper_CarrierBottom = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Thermal")]
        PackageLabel_Thermal = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Thermal_Unified")]
        PackageLabel_Thermal_Unified = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Thermal_NonPCP")]
        PackageLabel_Thermal_NonPCP = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageLabel_Thermal_No_Carrier_Rotation")]
        PackageLabel_Thermal_No_Carrier_Rotation = 11,

    }

    /// <summary>
    /// The type of labels requested. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BARCODE_2D")]
        BARCODE_2D = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIQUE")]
        UNIQUE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

    }

    /// <summary>
    /// Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QueryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT")]
        SHIPMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_RANGE")]
        DATE_RANGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEXT_TOKEN")]
        NEXT_TOKEN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WORKING")]
        WORKING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVING")]
        RECEIVING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_IN")]
        CHECKED_IN = 9,

    }

    /// <summary>
    /// Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QueryType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_RANGE")]
        DATE_RANGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEXT_TOKEN")]
        NEXT_TOKEN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFulfillmentInboundApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerFulfillmentInboundApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFulfillmentInboundApiException<TResult> : AmazonSellingPartnerFulfillmentInboundApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerFulfillmentInboundApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603