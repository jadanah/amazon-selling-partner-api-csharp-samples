//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.CatalogItems.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerCatalogItemsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with `keywords`.</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when `identifiers` are provided.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: `summaries`.</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when `identifiersType` is `SKU`.</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with `identifiers`.</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.</param>
        /// <param name="pageSize">Number of results to be returned per page.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results.</param>
        /// <param name="keywordsLocale">The language of the keywords provided for `keywords`-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with `identifiers`.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerCatalogItemsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemSearchResults> SearchCatalogItemsAsync(System.Collections.Generic.IEnumerable<string> marketplaceIds, System.Collections.Generic.IEnumerable<string> identifiers = null, IdentifiersType? identifiersType = null, System.Collections.Generic.IEnumerable<Anonymous> includedData = null, string locale = null, string sellerId = null, System.Collections.Generic.IEnumerable<string> keywords = null, System.Collections.Generic.IEnumerable<string> brandNames = null, System.Collections.Generic.IEnumerable<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: `summaries`.</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerCatalogItemsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Item> GetCatalogItemAsync(string asin, System.Collections.Generic.IEnumerable<string> marketplaceIds, System.Collections.Generic.IEnumerable<Anonymous2> includedData = null, string locale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerCatalogItemsClient : IAmazonSellingPartnerCatalogItemsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerCatalogItemsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with `keywords`.</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when `identifiers` are provided.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: `summaries`.</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when `identifiersType` is `SKU`.</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with `identifiers`.</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.</param>
        /// <param name="pageSize">Number of results to be returned per page.</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results.</param>
        /// <param name="keywordsLocale">The language of the keywords provided for `keywords`-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with `identifiers`.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerCatalogItemsApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemSearchResults> SearchCatalogItemsAsync(System.Collections.Generic.IEnumerable<string> marketplaceIds, System.Collections.Generic.IEnumerable<string> identifiers = null, IdentifiersType? identifiersType = null, System.Collections.Generic.IEnumerable<Anonymous> includedData = null, string locale = null, string sellerId = null, System.Collections.Generic.IEnumerable<string> keywords = null, System.Collections.Generic.IEnumerable<string> brandNames = null, System.Collections.Generic.IEnumerable<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceIds == null)
                throw new System.ArgumentNullException("marketplaceIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalog/2022-04-01/items?");
            foreach (var item_ in marketplaceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (identifiers != null)
            {
                foreach (var item_ in identifiers) { urlBuilder_.Append(System.Uri.EscapeDataString("identifiers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (identifiersType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identifiersType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identifiersType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includedData != null)
            {
                foreach (var item_ in includedData) { urlBuilder_.Append(System.Uri.EscapeDataString("includedData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (locale != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sellerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sellerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sellerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (keywords != null)
            {
                foreach (var item_ in keywords) { urlBuilder_.Append(System.Uri.EscapeDataString("keywords") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (brandNames != null)
            {
                foreach (var item_ in brandNames) { urlBuilder_.Append(System.Uri.EscapeDataString("brandNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (classificationIds != null)
            {
                foreach (var item_ in classificationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("classificationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (keywordsLocale != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("keywordsLocale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keywordsLocale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemSearchResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The request size exceeded the maximum accepted size.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerCatalogItemsApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: `summaries`.</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerCatalogItemsApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Item> GetCatalogItemAsync(string asin, System.Collections.Generic.IEnumerable<string> marketplaceIds, System.Collections.Generic.IEnumerable<Anonymous2> includedData = null, string locale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (asin == null)
                throw new System.ArgumentNullException("asin");

            if (marketplaceIds == null)
                throw new System.ArgumentNullException("marketplaceIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalog/2022-04-01/items/{asin}?");
            urlBuilder_.Replace("{asin}", System.Uri.EscapeDataString(ConvertToString(asin, System.Globalization.CultureInfo.InvariantCulture)));
            foreach (var item_ in marketplaceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (includedData != null)
            {
                foreach (var item_ in includedData) { urlBuilder_.Append(System.Uri.EscapeDataString("includedData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (locale != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Item>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The request size exceeded the maximum accepted size.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerCatalogItemsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerCatalogItemsApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerCatalogItemsApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerCatalogItemsApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerCatalogItemsApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Error>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item in the Amazon catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Item
    {
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemAttributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemDimensions Dimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("identifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemIdentifiers Identifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemImages Images { get; set; }

        [Newtonsoft.Json.JsonProperty("productTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemProductTypes ProductTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemRelationships Relationships { get; set; }

        [Newtonsoft.Json.JsonProperty("salesRanks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemSalesRanks SalesRanks { get; set; }

        [Newtonsoft.Json.JsonProperty("summaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemSummaries Summaries { get; set; }

        [Newtonsoft.Json.JsonProperty("vendorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemVendorDetails VendorDetails { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Item FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Item>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A JSON object that contains structured item attribute data keyed by attribute name. Catalog item attributes conform to the related product type definitions available in the Selling Partner API for Product Type Definitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemAttributes
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemAttributes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemAttributes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Classification (browse node) associated with an Amazon catalog item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemBrowseClassification
    {
        /// <summary>
        /// Display name for the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Identifier of the classification (browse node identifier).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClassificationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemBrowseClassification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemBrowseClassification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Individual dimension value of an Amazon catalog item or item package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimension
    {
        /// <summary>
        /// Measurement unit of the dimension value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        /// <summary>
        /// Numeric dimension value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Dimension FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dimension>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Dimensions of an Amazon catalog item or item in its packaging.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {
        /// <summary>
        /// Height of an item or item package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Height { get; set; }

        /// <summary>
        /// Length of an item or item package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Length { get; set; }

        /// <summary>
        /// Weight of an item or item package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Weight { get; set; }

        /// <summary>
        /// Width of an item or item package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Width { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Dimensions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dimensions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Array of dimensions associated with the item in the Amazon catalog by Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemDimensions : System.Collections.ObjectModel.Collection<ItemDimensionsByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemDimensions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemDimensions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Dimensions associated with the item in the Amazon catalog for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemDimensionsByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Dimensions of an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Item { get; set; }

        /// <summary>
        /// Dimensions of an Amazon catalog item in its packaging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("package", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Package { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemDimensionsByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemDimensionsByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemIdentifiers : System.Collections.ObjectModel.Collection<ItemIdentifiersByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemIdentifiers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemIdentifiers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemIdentifiersByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ItemIdentifier> Identifiers { get; set; } = new System.Collections.ObjectModel.Collection<ItemIdentifier>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemIdentifiersByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemIdentifiersByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemIdentifier
    {
        /// <summary>
        /// Type of identifier, such as UPC, EAN, or ISBN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifierType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentifierType { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Identifier { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemIdentifier FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemIdentifier>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Images for an item in the Amazon catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemImages : System.Collections.ObjectModel.Collection<ItemImagesByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemImages FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemImages>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Images for an item in the Amazon catalog for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemImagesByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Images for an item in the Amazon catalog for the indicated Amazon marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ItemImage> Images { get; set; } = new System.Collections.ObjectModel.Collection<ItemImage>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemImagesByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemImagesByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Image for an item in the Amazon catalog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemImage
    {
        /// <summary>
        /// Variant of the image, such as `MAIN` or `PT01`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemImageVariant Variant { get; set; }

        /// <summary>
        /// Link, or URL, for the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Link { get; set; }

        /// <summary>
        /// Height of the image in pixels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        /// <summary>
        /// Width of the image in pixels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemImage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemImage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Product types associated with the Amazon catalog item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemProductTypes : System.Collections.ObjectModel.Collection<ItemProductTypeByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemProductTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemProductTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Product type associated with the Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemProductTypeByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Name of the product type associated with the Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemProductTypeByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemProductTypeByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Sales ranks of an Amazon catalog item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSalesRanks : System.Collections.ObjectModel.Collection<ItemSalesRanksByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemSalesRanks FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemSalesRanks>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Sales ranks of an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSalesRanksByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Sales ranks of an Amazon catalog item for an Amazon marketplace by classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationRanks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemClassificationSalesRank> ClassificationRanks { get; set; }

        /// <summary>
        /// Sales ranks of an Amazon catalog item for an Amazon marketplace by website display group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayGroupRanks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemDisplayGroupSalesRank> DisplayGroupRanks { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemSalesRanksByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemSalesRanksByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Sales rank of an Amazon catalog item by classification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemClassificationSalesRank
    {
        /// <summary>
        /// Identifier of the classification associated with the sales rank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClassificationId { get; set; }

        /// <summary>
        /// Title, or name, of the sales rank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// Corresponding Amazon retail website link, or URL, for the sales rank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// Sales rank value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Always)]
        public int Rank { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemClassificationSalesRank FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemClassificationSalesRank>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Sales rank of an Amazon catalog item by website display group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemDisplayGroupSalesRank
    {
        /// <summary>
        /// Name of the website display group associated with the sales rank
        /// </summary>
        [Newtonsoft.Json.JsonProperty("websiteDisplayGroup", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WebsiteDisplayGroup { get; set; }

        /// <summary>
        /// Title, or name, of the sales rank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// Corresponding Amazon retail website link, or URL, for the sales rank.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// Sales rank value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Always)]
        public int Rank { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemDisplayGroupSalesRank FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemDisplayGroupSalesRank>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Summary details of an Amazon catalog item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSummaries : System.Collections.ObjectModel.Collection<ItemSummaryByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemSummaries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemSummaries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Summary details of an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSummaryByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Name of the brand associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// Classification (browse node) associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("browseClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemBrowseClassification BrowseClassification { get; set; }

        /// <summary>
        /// Name of the color associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Classification type associated with the Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemSummaryByMarketplaceItemClassification? ItemClassification { get; set; }

        /// <summary>
        /// Name, or title, associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemName { get; set; }

        /// <summary>
        /// Name of the manufacturer associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Model number associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Quantity of an Amazon catalog item in one package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        /// Part number associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Name of the size associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }

        /// <summary>
        /// Name of the style associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Style { get; set; }

        /// <summary>
        /// Name of the website display group associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("websiteDisplayGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebsiteDisplayGroup { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemSummaryByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemSummaryByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemVariationTheme
    {
        /// <summary>
        /// Names of the Amazon catalog item attributes associated with the variation theme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attributes { get; set; }

        /// <summary>
        /// Variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemVariationTheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemVariationTheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Relationships by marketplace for an Amazon catalog item (for example, variations).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemRelationships : System.Collections.ObjectModel.Collection<ItemRelationshipsByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemRelationships FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemRelationships>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Relationship details for the Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemRelationshipsByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Relationships for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ItemRelationship> Relationships { get; set; } = new System.Collections.ObjectModel.Collection<ItemRelationship>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemRelationshipsByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemRelationshipsByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Relationship details for an Amazon catalog item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemRelationship
    {
        /// <summary>
        /// Identifiers (ASINs) of the related items that are children of this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childAsins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ChildAsins { get; set; }

        /// <summary>
        /// Identifiers (ASINs) of the related items that are parents of this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentAsins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ParentAsins { get; set; }

        /// <summary>
        /// For "VARIATION" relationships, variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variationTheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemVariationTheme VariationTheme { get; set; }

        /// <summary>
        /// Type of relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemRelationshipType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemRelationship FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemRelationship>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Product category or subcategory associated with an Amazon catalog item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemVendorDetailsCategory
    {
        /// <summary>
        /// Display name of the product category or subcategory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Value (code) of the product category or subcategory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemVendorDetailsCategory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemVendorDetailsCategory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemVendorDetails : System.Collections.ObjectModel.Collection<ItemVendorDetailsByMarketplace>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemVendorDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemVendorDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemVendorDetailsByMarketplace
    {
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Brand code associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandCode { get; set; }

        /// <summary>
        /// Manufacturer code associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manufacturerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerCode { get; set; }

        /// <summary>
        /// Parent vendor code of the manufacturer code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manufacturerCodeParent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerCodeParent { get; set; }

        /// <summary>
        /// Product category associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemVendorDetailsCategory ProductCategory { get; set; }

        /// <summary>
        /// Product group associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductGroup { get; set; }

        /// <summary>
        /// Product subcategory associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productSubcategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemVendorDetailsCategory ProductSubcategory { get; set; }

        /// <summary>
        /// Replenishment category associated with an Amazon catalog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replenishmentCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemVendorDetailsByMarketplaceReplenishmentCategory? ReplenishmentCategory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemVendorDetailsByMarketplace FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemVendorDetailsByMarketplace>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Items in the Amazon catalog and search related metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSearchResults
    {
        /// <summary>
        /// For `identifiers`-based searches, the total number of Amazon catalog items found. For `keywords`-based searches, the estimated total number of Amazon catalog items matched by the search query (only results up to the page count limit will be returned per request regardless of the number found).
        /// <br/>
        /// <br/>Note: The maximum number of items (ASINs) that can be returned and paged through is 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfResults", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// If available, the `nextToken` and/or `previousToken` values required to return paginated results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Pagination Pagination { get; set; } = new Pagination();

        /// <summary>
        /// Search refinements for `keywords`-based searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refinements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Refinements Refinements { get; set; } = new Refinements();

        /// <summary>
        /// A list of items from the Amazon catalog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Item> Items { get; set; } = new System.Collections.ObjectModel.Collection<Item>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemSearchResults FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemSearchResults>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// When a request produces a response that exceeds the `pageSize`, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the `nextToken` value or the `previousToken` value as the `pageToken` parameter in the next request. When you receive the last page, there will be no `nextToken` key in the pagination object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pagination
    {
        /// <summary>
        /// A token that can be used to fetch the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        /// <summary>
        /// A token that can be used to fetch the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previousToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Pagination FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pagination>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Search refinements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Refinements
    {
        /// <summary>
        /// Brand search refinements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brands", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BrandRefinement> Brands { get; set; } = new System.Collections.ObjectModel.Collection<BrandRefinement>();

        /// <summary>
        /// Classification search refinements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ClassificationRefinement> Classifications { get; set; } = new System.Collections.ObjectModel.Collection<ClassificationRefinement>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Refinements FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Refinements>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Description of a brand that can be used to get more fine-grained search results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrandRefinement
    {
        /// <summary>
        /// The estimated number of results that would still be returned if refinement key applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfResults", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// Brand name. For display and can be used as a search refinement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BrandName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BrandRefinement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandRefinement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Description of a classification that can be used to get more fine-grained search results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassificationRefinement
    {
        /// <summary>
        /// The estimated number of results that would still be returned if refinement key applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfResults", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// Display name for the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Identifier for the classification that can be used for search refinement purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClassificationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClassificationRefinement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassificationRefinement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Type of product identifiers to search the Amazon catalog for. **Note:** Required when `identifiers` are provided.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentifiersType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASIN")]
        ASIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EAN")]
        EAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GTIN")]
        GTIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ISBN")]
        ISBN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"JAN")]
        JAN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MINSAN")]
        MINSAN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SKU")]
        SKU = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UPC")]
        UPC = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"attributes")]
        Attributes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dimensions")]
        Dimensions = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"identifiers")]
        Identifiers = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"images")]
        Images = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"productTypes")]
        ProductTypes = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"relationships")]
        Relationships = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"salesRanks")]
        SalesRanks = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"summaries")]
        Summaries = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"vendorDetails")]
        VendorDetails = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"attributes")]
        Attributes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dimensions")]
        Dimensions = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"identifiers")]
        Identifiers = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"images")]
        Images = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"productTypes")]
        ProductTypes = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"relationships")]
        Relationships = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"salesRanks")]
        SalesRanks = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"summaries")]
        Summaries = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"vendorDetails")]
        VendorDetails = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemImageVariant
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN")]
        MAIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PT01")]
        PT01 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PT02")]
        PT02 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PT03")]
        PT03 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PT04")]
        PT04 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PT05")]
        PT05 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PT06")]
        PT06 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PT07")]
        PT07 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PT08")]
        PT08 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SWCH")]
        SWCH = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemSummaryByMarketplaceItemClassification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_PRODUCT")]
        BASE_PRODUCT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_BUNDLE")]
        PRODUCT_BUNDLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIATION_PARENT")]
        VARIATION_PARENT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemRelationshipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VARIATION")]
        VARIATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE_HIERARCHY")]
        PACKAGE_HIERARCHY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemVendorDetailsByMarketplaceReplenishmentCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOCATED")]
        ALLOCATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC_REPLENISHMENT")]
        BASIC_REPLENISHMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_SEASON")]
        IN_SEASON = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMITED_REPLENISHMENT")]
        LIMITED_REPLENISHMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUFACTURER_OUT_OF_STOCK")]
        MANUFACTURER_OUT_OF_STOCK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_PRODUCT")]
        NEW_PRODUCT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_REPLENISHABLE")]
        NON_REPLENISHABLE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_STOCKUPABLE")]
        NON_STOCKUPABLE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OBSOLETE")]
        OBSOLETE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PLANNED_REPLENISHMENT")]
        PLANNED_REPLENISHMENT = 9,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerCatalogItemsApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerCatalogItemsApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerCatalogItemsApiException<TResult> : AmazonSellingPartnerCatalogItemsApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerCatalogItemsApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603