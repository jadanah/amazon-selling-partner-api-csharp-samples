//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.FbaInboundEligility.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerFbaInboundEligilityClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="asin">The ASIN of the item for which you want an eligibility preview.</param>
        /// <param name="program">The program that you want to check eligibility against.</param>
        /// <param name="marketplaceIds">The identifier for the marketplace in which you want to determine eligibility. Required only when program=INBOUND.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFbaInboundEligilityApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetItemEligibilityPreviewResponse> GetItemEligibilityPreviewAsync(string asin, Program program, System.Collections.Generic.IEnumerable<string> marketplaceIds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFbaInboundEligilityClient : IAmazonSellingPartnerFbaInboundEligilityClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerFbaInboundEligilityClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="asin">The ASIN of the item for which you want an eligibility preview.</param>
        /// <param name="program">The program that you want to check eligibility against.</param>
        /// <param name="marketplaceIds">The identifier for the marketplace in which you want to determine eligibility. Required only when program=INBOUND.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFbaInboundEligilityApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetItemEligibilityPreviewResponse> GetItemEligibilityPreviewAsync(string asin, Program program, System.Collections.Generic.IEnumerable<string> marketplaceIds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (asin == null)
                throw new System.ArgumentNullException("asin");

            if (program == null)
                throw new System.ArgumentNullException("program");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/inbound/v1/eligibility/itemPreview?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("program") + "=").Append(System.Uri.EscapeDataString(ConvertToString(program, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (marketplaceIds != null)
            {
                foreach (var item_ in marketplaceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("Encountered an unexpected condition which prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetItemEligibilityPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFbaInboundEligilityApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException<GetItemEligibilityPreviewResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFbaInboundEligilityApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFbaInboundEligilityApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFbaInboundEligilityApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The response schema for the getItemEligibilityPreview operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetItemEligibilityPreviewResponse
    {
        /// <summary>
        /// The payload for the getItemEligibilityPreview operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemEligibilityPreview Payload { get; set; }

        /// <summary>
        /// An unexpected condition occurred during the GetItemEligibilityPreview operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetItemEligibilityPreviewResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetItemEligibilityPreviewResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response object which contains the ASIN, marketplaceId if required, eligibility program, the eligibility status (boolean), and a list of ineligibility reason codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemEligibilityPreview
    {
        /// <summary>
        /// The ASIN for which eligibility was determined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        /// <summary>
        /// The marketplace for which eligibility was determined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The program for which eligibility was determined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("program", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemEligibilityPreviewProgram Program { get; set; }

        /// <summary>
        /// Indicates if the item is eligible for the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEligibleForProgram", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEligibleForProgram { get; set; }

        /// <summary>
        /// Potential Ineligibility Reason Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ineligibilityReasonList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<IneligibilityReasonList> IneligibilityReasonList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemEligibilityPreview FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemEligibilityPreview>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition in a human-readable form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Additional information that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The program that you want to check eligibility against.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Program
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBOUND")]
        INBOUND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMINGLING")]
        COMMINGLING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemEligibilityPreviewProgram
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBOUND")]
        INBOUND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMINGLING")]
        COMMINGLING = 1,

    }

    /// <summary>
    /// Potential Ineligibility Reason Codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IneligibilityReasonList
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0004")]
        FBA_INB_0004 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0006")]
        FBA_INB_0006 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0007")]
        FBA_INB_0007 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0008")]
        FBA_INB_0008 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0009")]
        FBA_INB_0009 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0010")]
        FBA_INB_0010 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0011")]
        FBA_INB_0011 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0012")]
        FBA_INB_0012 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0013")]
        FBA_INB_0013 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0014")]
        FBA_INB_0014 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0015")]
        FBA_INB_0015 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0016")]
        FBA_INB_0016 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0017")]
        FBA_INB_0017 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0018")]
        FBA_INB_0018 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0019")]
        FBA_INB_0019 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0034")]
        FBA_INB_0034 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0035")]
        FBA_INB_0035 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0036")]
        FBA_INB_0036 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0037")]
        FBA_INB_0037 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0038")]
        FBA_INB_0038 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0050")]
        FBA_INB_0050 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0051")]
        FBA_INB_0051 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0053")]
        FBA_INB_0053 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0055")]
        FBA_INB_0055 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0056")]
        FBA_INB_0056 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0059")]
        FBA_INB_0059 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0065")]
        FBA_INB_0065 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0066")]
        FBA_INB_0066 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0067")]
        FBA_INB_0067 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0068")]
        FBA_INB_0068 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0095")]
        FBA_INB_0095 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0097")]
        FBA_INB_0097 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0098")]
        FBA_INB_0098 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0099")]
        FBA_INB_0099 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0100")]
        FBA_INB_0100 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0103")]
        FBA_INB_0103 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0104")]
        FBA_INB_0104 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"FBA_INB_0197")]
        FBA_INB_0197 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN_INB_ERROR_CODE")]
        UNKNOWN_INB_ERROR_CODE = 38,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFbaInboundEligilityApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerFbaInboundEligilityApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFbaInboundEligilityApiException<TResult> : AmazonSellingPartnerFbaInboundEligilityApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerFbaInboundEligilityApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603