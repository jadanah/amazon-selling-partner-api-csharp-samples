//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.ProductPricing.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerProductPricingClient
    {
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        GetPricingResponse GetPricing(string marketplaceId, ItemType itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, ItemCondition? itemCondition = null, OfferType2? offerType = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPricingResponse> GetPricingAsync(string marketplaceId, ItemType itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, ItemCondition? itemCondition = null, OfferType2? offerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        GetPricingResponse GetCompetitivePricing(string marketplaceId, ItemType2 itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, CustomerType? customerType = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPricingResponse> GetCompetitivePricingAsync(string marketplaceId, ItemType2 itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, CustomerType? customerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        GetOffersResponse GetListingOffers(string marketplaceId, ItemCondition2 itemCondition, string sellerSKU, CustomerType2? customerType = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOffersResponse> GetListingOffersAsync(string marketplaceId, ItemCondition2 itemCondition, string sellerSKU, CustomerType2? customerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        GetOffersResponse GetItemOffers(string marketplaceId, ItemCondition3 itemCondition, string asin, CustomerType3? customerType = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOffersResponse> GetItemOffersAsync(string marketplaceId, ItemCondition3 itemCondition, string asin, CustomerType3? customerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerProductPricingClient : IAmazonSellingPartnerProductPricingClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerProductPricingClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual GetPricingResponse GetPricing(string marketplaceId, ItemType itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, ItemCondition? itemCondition = null, OfferType2? offerType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetPricingAsync(marketplaceId, itemType, asins, skus, itemCondition, offerType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPricingResponse> GetPricingAsync(string marketplaceId, ItemType itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, ItemCondition? itemCondition = null, OfferType2? offerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (itemType == null)
                throw new System.ArgumentNullException("itemType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("products/pricing/v0/price?");
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ItemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asins != null)
            {
                foreach (var item_ in asins) { urlBuilder_.Append(System.Uri.EscapeDataString("Asins") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (skus != null)
            {
                foreach (var item_ in skus) { urlBuilder_.Append(System.Uri.EscapeDataString("Skus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (itemCondition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ItemCondition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offerType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OfferType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerProductPricingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual GetPricingResponse GetCompetitivePricing(string marketplaceId, ItemType2 itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, CustomerType? customerType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetCompetitivePricingAsync(marketplaceId, itemType, asins, skus, customerType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace.</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPricingResponse> GetCompetitivePricingAsync(string marketplaceId, ItemType2 itemType, System.Collections.Generic.IEnumerable<string> asins = null, System.Collections.Generic.IEnumerable<string> skus = null, CustomerType? customerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (itemType == null)
                throw new System.ArgumentNullException("itemType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("products/pricing/v0/competitivePrice?");
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ItemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asins != null)
            {
                foreach (var item_ in asins) { urlBuilder_.Append(System.Uri.EscapeDataString("Asins") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (skus != null)
            {
                foreach (var item_ in skus) { urlBuilder_.Append(System.Uri.EscapeDataString("Skus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPricingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetPricingResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerProductPricingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual GetOffersResponse GetListingOffers(string marketplaceId, ItemCondition2 itemCondition, string sellerSKU, CustomerType2? customerType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetListingOffersAsync(marketplaceId, itemCondition, sellerSKU, customerType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetOffersResponse> GetListingOffersAsync(string marketplaceId, ItemCondition2 itemCondition, string sellerSKU, CustomerType2? customerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sellerSKU == null)
                throw new System.ArgumentNullException("sellerSKU");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (itemCondition == null)
                throw new System.ArgumentNullException("itemCondition");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("products/pricing/v0/listings/{SellerSKU}/offers?");
            urlBuilder_.Replace("{SellerSKU}", System.Uri.EscapeDataString(ConvertToString(sellerSKU, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ItemCondition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerProductPricingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual GetOffersResponse GetItemOffers(string marketplaceId, ItemCondition3 itemCondition, string asin, CustomerType3? customerType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetItemOffersAsync(marketplaceId, itemCondition, asin, customerType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerProductPricingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetOffersResponse> GetItemOffersAsync(string marketplaceId, ItemCondition3 itemCondition, string asin, CustomerType3? customerType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (asin == null)
                throw new System.ArgumentNullException("asin");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (itemCondition == null)
                throw new System.ArgumentNullException("itemCondition");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("products/pricing/v0/items/{Asin}/offers?");
            urlBuilder_.Replace("{Asin}", System.Uri.EscapeDataString(ConvertToString(asin, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("MarketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ItemCondition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemCondition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductPricingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductPricingApiException<GetOffersResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerProductPricingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerProductPricingApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerProductPricingApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The response schema for the getPricing and getCompetitivePricing operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPricingResponse
    {
        /// <summary>
        /// The payload for the getPricing and getCompetitivePricing operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public PriceList Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPricingResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPricingResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getListingOffers and getItemOffers operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOffersResponse
    {
        /// <summary>
        /// The payload for the getListingOffers and getItemOffers operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetOffersResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetOffersResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetOffersResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceList : System.Collections.ObjectModel.Collection<Price>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PriceList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOffersResult
    {
        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceID { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        /// <summary>
        /// The stock keeping unit (SKU) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SKU { get; set; }

        /// <summary>
        /// The condition of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemCondition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionType ItemCondition { get; set; }

        /// <summary>
        /// The status of the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        /// <summary>
        /// Metadata that identifies the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemIdentifier Identifier { get; set; } = new ItemIdentifier();

        /// <summary>
        /// Pricing information about the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Summary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Summary Summary { get; set; } = new Summary();

        /// <summary>
        /// A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is less.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Offers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public OfferDetailList Offers { get; set; } = new OfferDetailList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetOffersResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetOffersResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Price
    {
        /// <summary>
        /// The status of the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Price FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Price>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        [Newtonsoft.Json.JsonProperty("Identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IdentifierType Identifiers { get; set; } = new IdentifierType();

        [Newtonsoft.Json.JsonProperty("AttributeSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeSetList AttributeSets { get; set; }

        [Newtonsoft.Json.JsonProperty("Relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipList Relationships { get; set; }

        [Newtonsoft.Json.JsonProperty("CompetitivePricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompetitivePricingType CompetitivePricing { get; set; }

        [Newtonsoft.Json.JsonProperty("SalesRankings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesRankList SalesRankings { get; set; }

        [Newtonsoft.Json.JsonProperty("Offers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffersList Offers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Product FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Product>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies the identifiers used to uniquely identify an item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentifierType
    {
        /// <summary>
        /// Indicates the item is identified by MarketPlaceId and ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceASIN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ASINIdentifier MarketplaceASIN { get; set; } = new ASINIdentifier();

        /// <summary>
        /// Indicates the item is identified by MarketPlaceId, SellerId, and SellerSKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SKUIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellerSKUIdentifier SKUIdentifier { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdentifierType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentifierType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ASINIdentifier
    {
        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ASIN { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ASINIdentifier FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ASINIdentifier>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerSKUIdentifier
    {
        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The seller identifier submitted for the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerSKUIdentifier FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerSKUIdentifier>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of product attributes if they are applicable to the product that is returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributeSetList : System.Collections.ObjectModel.Collection<object>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttributeSetList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttributeSetList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list that contains product variation information, if applicable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipList : System.Collections.ObjectModel.Collection<object>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelationshipList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationshipList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Competitive pricing information for the item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompetitivePricingType
    {
        [Newtonsoft.Json.JsonProperty("CompetitivePrices", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CompetitivePriceList CompetitivePrices { get; set; } = new CompetitivePriceList();

        [Newtonsoft.Json.JsonProperty("NumberOfOfferListings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NumberOfOfferListingsList NumberOfOfferListings { get; set; } = new NumberOfOfferListingsList();

        /// <summary>
        /// The trade-in value of the item in the trade-in program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TradeInValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType TradeInValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CompetitivePricingType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitivePricingType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of competitive pricing information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompetitivePriceList : System.Collections.ObjectModel.Collection<CompetitivePriceType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CompetitivePriceList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitivePriceList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompetitivePriceType
    {
        /// <summary>
        /// The pricing model for each price that is returned.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* 1 - New Buy Box Price.
        /// <br/>* 2 - Used Buy Box Price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompetitivePriceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CompetitivePriceId { get; set; }

        /// <summary>
        /// Pricing information for a given CompetitivePriceId value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceType Price { get; set; } = new PriceType();

        /// <summary>
        /// Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subcondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subcondition { get; set; }

        /// <summary>
        /// Indicates the type of customer that the offer is valid for.&lt;br&gt;&lt;br&gt;When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferCustomerType? OfferType { get; set; }

        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityTier { get; set; }

        /// <summary>
        /// Indicates the type of quantity discount this price applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityDiscountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuantityDiscountType? QuantityDiscountType { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerId { get; set; }

        /// <summary>
        ///  Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("belongsToRequester", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BelongsToRequester { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CompetitivePriceType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitivePriceType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The number of active offer listings for the item that was submitted. The listing count is returned by condition, one for each listing condition value that is returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumberOfOfferListingsList : System.Collections.ObjectModel.Collection<OfferListingCountType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumberOfOfferListingsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumberOfOfferListingsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The number of offer listings with the specified condition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingCountType
    {
        /// <summary>
        /// The number of offer listings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }

        /// <summary>
        /// The condition of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Condition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OfferListingCountType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfferListingCountType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyType
    {
        /// <summary>
        /// The currency code in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The monetary value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MoneyType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MoneyType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of sales rank information for the item, by category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesRankList : System.Collections.ObjectModel.Collection<SalesRankType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalesRankList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesRankList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesRankType
    {
        /// <summary>
        ///  Identifies the item category from which the sales rank is taken.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductCategoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductCategoryId { get; set; }

        /// <summary>
        /// The sales rank of the item within the item category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rank", Required = Newtonsoft.Json.Required.Always)]
        public int Rank { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SalesRankType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SalesRankType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceType
    {
        /// <summary>
        /// The value calculated by adding ListingPrice + Shipping - Points. Note that if the landed price is not returned, the listing price represents the product with the lowest landed price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LandedPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType LandedPrice { get; set; }

        /// <summary>
        /// The listing price of the item including any promotions that apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ListingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType ListingPrice { get; set; } = new MoneyType();

        /// <summary>
        /// The shipping cost of the product. Note that the shipping cost is not always available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Shipping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        /// The number of Amazon Points offered with the purchase of an item, and their monetary value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Points Points { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PriceType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of offers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OffersList : System.Collections.ObjectModel.Collection<OfferType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OffersList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OffersList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferType
    {
        /// <summary>
        /// Indicates the type of customer that the offer is valid for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferCustomerType? OfferType1 { get; set; }

        /// <summary>
        /// Contains pricing information that includes promotions and contains the shipping cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BuyingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceType BuyingPrice { get; set; } = new PriceType();

        /// <summary>
        /// The current price excluding any promotions that apply to the product. Excludes the shipping cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RegularPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType RegularPrice { get; set; } = new MoneyType();

        /// <summary>
        /// The current listing price for Business buyers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType BusinessPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("quantityDiscountPrices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuantityDiscountPriceType> QuantityDiscountPrices { get; set; }

        /// <summary>
        /// The fulfillment channel for the offer listing. Possible values:
        /// <br/>
        /// <br/>* Amazon - Fulfilled by Amazon.
        /// <br/>* Merchant - Fulfilled by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FulfillmentChannel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemCondition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItemCondition { get; set; }

        /// <summary>
        /// The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemSubCondition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItemSubCondition { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSKU { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OfferType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfferType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferCustomerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"B2C")]
        B2C = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B2B")]
        B2B = 1,

    }

    /// <summary>
    /// Contains pricing information that includes special pricing when buying in bulk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuantityDiscountPriceType
    {
        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityTier", Required = Newtonsoft.Json.Required.Always)]
        public int QuantityTier { get; set; }

        /// <summary>
        /// Indicates the type of quantity discount this price applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityDiscountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuantityDiscountType QuantityDiscountType { get; set; }

        /// <summary>
        /// The price at this quantity tier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType ListingPrice { get; set; } = new MoneyType();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static QuantityDiscountPriceType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<QuantityDiscountPriceType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QuantityDiscountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"QUANTITY_DISCOUNT")]
        QUANTITY_DISCOUNT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Points
    {
        /// <summary>
        /// The number of points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PointsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PointsNumber { get; set; }

        /// <summary>
        /// The monetary value of the points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PointsMonetaryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType PointsMonetaryValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Points FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Points>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates the condition of the item. Possible values: New, Used, Collectible, Refurbished, Club.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConditionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Collectible")]
        Collectible = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Refurbished")]
        Refurbished = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 4,

    }

    /// <summary>
    /// Information that identifies an item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemIdentifier
    {
        /// <summary>
        /// A marketplace identifier. Specifies the marketplace from which prices are returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The condition of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemCondition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionType ItemCondition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemIdentifier FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemIdentifier>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Summary
    {
        /// <summary>
        /// The number of unique offers contained in NumberOfOffers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalOfferCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalOfferCount { get; set; }

        /// <summary>
        /// A list that contains the total number of offers for the item for the given conditions and fulfillment channels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfOffers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumberOfOffers NumberOfOffers { get; set; }

        /// <summary>
        /// A list of the lowest prices for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LowestPrices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LowestPrices LowestPrices { get; set; }

        /// <summary>
        /// A list of item prices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BuyBoxPrices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuyBoxPrices BuyBoxPrices { get; set; }

        /// <summary>
        /// The list price of the item as suggested by the manufacturer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ListPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType ListPrice { get; set; }

        /// <summary>
        /// This price is based on competitive prices from other retailers (excluding other Amazon sellers). The offer may be ineligible for the Buy Box if the seller's price + shipping (minus Amazon Points) is greater than this competitive price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompetitivePriceThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType CompetitivePriceThreshold { get; set; }

        /// <summary>
        /// The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based on a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from customers for your products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SuggestedLowerPricePlusShipping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyType SuggestedLowerPricePlusShipping { get; set; }

        /// <summary>
        /// A list that contains the sales rank of the item in the given product categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SalesRankings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesRankList SalesRankings { get; set; }

        /// <summary>
        /// A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BuyBoxEligibleOffers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuyBoxEligibleOffers BuyBoxEligibleOffers { get; set; }

        /// <summary>
        /// When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OffersAvailableTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? OffersAvailableTime { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Summary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Summary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyBoxEligibleOffers : System.Collections.ObjectModel.Collection<OfferCountType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BuyBoxEligibleOffers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuyBoxEligibleOffers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyBoxPrices : System.Collections.ObjectModel.Collection<BuyBoxPriceType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BuyBoxPrices FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuyBoxPrices>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LowestPrices : System.Collections.ObjectModel.Collection<LowestPriceType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowestPrices FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowestPrices>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumberOfOffers : System.Collections.ObjectModel.Collection<OfferCountType>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NumberOfOffers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumberOfOffers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The total number of offers for the specified condition and fulfillment channel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferCountType
    {
        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates whether the item is fulfilled by Amazon or by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentChannelType? FulfillmentChannel { get; set; }

        /// <summary>
        /// The number of offers in a fulfillment channel that meet a specific condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OfferCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OfferCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OfferCountType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfferCountType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentChannelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Amazon")]
        Amazon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Merchant")]
        Merchant = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LowestPriceType
    {
        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates whether the item is fulfilled by Amazon or by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentChannel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// Indicates the type of customer that the offer is valid for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferCustomerType? OfferType { get; set; }

        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityTier { get; set; }

        /// <summary>
        /// Indicates the type of quantity discount this price applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityDiscountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuantityDiscountType? QuantityDiscountType { get; set; }

        /// <summary>
        /// The value calculated by adding ListingPrice + Shipping - Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LandedPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType LandedPrice { get; set; } = new MoneyType();

        /// <summary>
        /// The price of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ListingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType ListingPrice { get; set; } = new MoneyType();

        /// <summary>
        /// The shipping cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Shipping", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType Shipping { get; set; } = new MoneyType();

        /// <summary>
        /// The number of Amazon Points offered with the purchase of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Points Points { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LowestPriceType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LowestPriceType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyBoxPriceType
    {
        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates the type of customer that the offer is valid for.&lt;br&gt;&lt;br&gt;When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferCustomerType? OfferType { get; set; }

        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityTier { get; set; }

        /// <summary>
        /// Indicates the type of quantity discount this price applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityDiscountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuantityDiscountType? QuantityDiscountType { get; set; }

        /// <summary>
        /// The value calculated by adding ListingPrice + Shipping - Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LandedPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType LandedPrice { get; set; } = new MoneyType();

        /// <summary>
        /// The price of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ListingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType ListingPrice { get; set; } = new MoneyType();

        /// <summary>
        /// The shipping cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Shipping", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType Shipping { get; set; } = new MoneyType();

        /// <summary>
        /// The number of Amazon Points offered with the purchase of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Points Points { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BuyBoxPriceType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuyBoxPriceType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferDetailList : System.Collections.ObjectModel.Collection<OfferDetail>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OfferDetailList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfferDetailList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferDetail
    {
        /// <summary>
        /// When true, this is the seller's offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MyOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MyOffer { get; set; }

        /// <summary>
        /// Indicates the type of customer that the offer is valid for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferCustomerType? OfferType { get; set; }

        /// <summary>
        /// The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubCondition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubCondition { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerId { get; set; }

        /// <summary>
        /// Information about the condition of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConditionNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionNotes { get; set; }

        /// <summary>
        /// Information about the seller's feedback, including the percentage of positive feedback, and the total number of ratings received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerFeedbackRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellerFeedbackType SellerFeedbackRating { get; set; }

        /// <summary>
        /// The maximum time within which the item will likely be shipped once an order has been placed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DetailedShippingTimeType ShippingTime { get; set; } = new DetailedShippingTimeType();

        /// <summary>
        /// The price of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ListingPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType ListingPrice { get; set; } = new MoneyType();

        [Newtonsoft.Json.JsonProperty("quantityDiscountPrices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuantityDiscountPriceType> QuantityDiscountPrices { get; set; }

        /// <summary>
        /// The number of Amazon Points offered with the purchase of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Points Points { get; set; }

        /// <summary>
        /// The shipping cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Shipping", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MoneyType Shipping { get; set; } = new MoneyType();

        /// <summary>
        /// The state and country from where the item is shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipsFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipsFromType ShipsFrom { get; set; }

        /// <summary>
        /// When true, the offer is fulfilled by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsFulfilledByAmazon", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFulfilledByAmazon { get; set; }

        /// <summary>
        /// Amazon Prime information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PrimeInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimeInformationType PrimeInformation { get; set; }

        /// <summary>
        /// When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsBuyBoxWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBuyBoxWinner { get; set; }

        /// <summary>
        /// When true, the seller of the item is eligible to win the Buy Box.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsFeaturedMerchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFeaturedMerchant { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OfferDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfferDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Amazon Prime information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimeInformationType
    {
        /// <summary>
        /// Indicates whether the offer is an Amazon Prime offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsPrime", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPrime { get; set; }

        /// <summary>
        /// Indicates whether the offer is an Amazon Prime offer throughout the entire marketplace where it is listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsNationalPrime", Required = Newtonsoft.Json.Required.Always)]
        public bool IsNationalPrime { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PrimeInformationType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrimeInformationType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about the seller's feedback, including the percentage of positive feedback, and the total number of ratings received.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerFeedbackType
    {
        /// <summary>
        /// The percentage of positive feedback for the seller in the past 365 days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerPositiveFeedbackRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SellerPositiveFeedbackRating { get; set; }

        /// <summary>
        /// The number of ratings received about the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeedbackCount", Required = Newtonsoft.Json.Required.Always)]
        public long FeedbackCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerFeedbackType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerFeedbackType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The time range in which an item will likely be shipped once an order has been placed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DetailedShippingTimeType
    {
        /// <summary>
        /// The minimum time, in hours, that the item will likely be shipped after the order has been placed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MinimumHours { get; set; }

        /// <summary>
        /// The maximum time, in hours, that the item will likely be shipped after the order has been placed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaximumHours { get; set; }

        /// <summary>
        /// The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvailableDate { get; set; }

        /// <summary>
        /// Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availabilityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DetailedShippingTimeTypeAvailabilityType? AvailabilityType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DetailedShippingTimeType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DetailedShippingTimeType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The state and country from where the item is shipped.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipsFromType
    {
        /// <summary>
        /// The state from where the item is shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// The country from where the item is shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipsFromType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipsFromType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition in a human-readable form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional information that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asin")]
        Asin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sku")]
        Sku = 1,

    }

    /// <summary>
    /// Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemCondition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Collectible")]
        Collectible = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Refurbished")]
        Refurbished = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 4,

    }

    /// <summary>
    /// Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"B2C")]
        B2C = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B2B")]
        B2B = 1,

    }

    /// <summary>
    /// Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asin")]
        Asin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sku")]
        Sku = 1,

    }

    /// <summary>
    /// Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 1,

    }

    /// <summary>
    /// Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemCondition2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Collectible")]
        Collectible = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Refurbished")]
        Refurbished = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 4,

    }

    /// <summary>
    /// Indicates whether to request Consumer or Business offers. Default is Consumer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 1,

    }

    /// <summary>
    /// Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemCondition3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Collectible")]
        Collectible = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Refurbished")]
        Refurbished = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 4,

    }

    /// <summary>
    /// Indicates whether to request Consumer or Business offers. Default is Consumer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerType3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DetailedShippingTimeTypeAvailabilityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOW")]
        NOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_WITHOUT_DATE")]
        FUTURE_WITHOUT_DATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_WITH_DATE")]
        FUTURE_WITH_DATE = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerProductPricingApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerProductPricingApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerProductPricingApiException<TResult> : AmazonSellingPartnerProductPricingApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerProductPricingApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603