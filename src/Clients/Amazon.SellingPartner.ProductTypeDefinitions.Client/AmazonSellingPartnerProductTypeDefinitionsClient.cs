//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.ProductTypeDefinitions.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerProductTypeDefinitionsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="keywords">A comma-delimited list of keywords to search product types by.</param>
        /// <returns>Successfully retrieved a list of Amazon product types that have definitions available.</returns>
        /// <exception cref="AmazonSellingPartnerProductTypeDefinitionsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductTypeList> SearchDefinitionsProductTypesAsync(System.Collections.Generic.IEnumerable<string> marketplaceIds, System.Collections.Generic.IEnumerable<string> keywords = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="productType">The Amazon product type name.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.
        /// <br/>Note: This parameter is limited to one marketplaceId at this time.</param>
        /// <param name="sellerId">A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.</param>
        /// <param name="productTypeVersion">The version of the Amazon product type to retrieve. Defaults to "LATEST",. Prerelease versions of product type definitions may be retrieved with "RELEASE_CANDIDATE". If no prerelease version is currently available, the "LATEST" live version will be provided.</param>
        /// <param name="requirements">The name of the requirements set to retrieve requirements for.</param>
        /// <param name="requirementsEnforced">Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).</param>
        /// <param name="locale">Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.</param>
        /// <returns>Successfully retrieved an Amazon product type definition.</returns>
        /// <exception cref="AmazonSellingPartnerProductTypeDefinitionsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductTypeDefinition> GetDefinitionsProductTypeAsync(string productType, System.Collections.Generic.IEnumerable<string> marketplaceIds, string sellerId = null, string productTypeVersion = null, Requirements? requirements = null, RequirementsEnforced? requirementsEnforced = null, Locale? locale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerProductTypeDefinitionsClient : IAmazonSellingPartnerProductTypeDefinitionsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerProductTypeDefinitionsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="keywords">A comma-delimited list of keywords to search product types by.</param>
        /// <returns>Successfully retrieved a list of Amazon product types that have definitions available.</returns>
        /// <exception cref="AmazonSellingPartnerProductTypeDefinitionsApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductTypeList> SearchDefinitionsProductTypesAsync(System.Collections.Generic.IEnumerable<string> marketplaceIds, System.Collections.Generic.IEnumerable<string> keywords = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceIds == null)
                throw new System.ArgumentNullException("marketplaceIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("definitions/2020-09-01/productTypes?");
            foreach (var item_ in marketplaceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (keywords != null)
            {
                foreach (var item_ in keywords) { urlBuilder_.Append(System.Uri.EscapeDataString("keywords") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductTypeList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The request size exceeded the maximum accepted size.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="productType">The Amazon product type name.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.
        /// <br/>Note: This parameter is limited to one marketplaceId at this time.</param>
        /// <param name="sellerId">A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.</param>
        /// <param name="productTypeVersion">The version of the Amazon product type to retrieve. Defaults to "LATEST",. Prerelease versions of product type definitions may be retrieved with "RELEASE_CANDIDATE". If no prerelease version is currently available, the "LATEST" live version will be provided.</param>
        /// <param name="requirements">The name of the requirements set to retrieve requirements for.</param>
        /// <param name="requirementsEnforced">Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).</param>
        /// <param name="locale">Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.</param>
        /// <returns>Successfully retrieved an Amazon product type definition.</returns>
        /// <exception cref="AmazonSellingPartnerProductTypeDefinitionsApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductTypeDefinition> GetDefinitionsProductTypeAsync(string productType, System.Collections.Generic.IEnumerable<string> marketplaceIds, string sellerId = null, string productTypeVersion = null, Requirements? requirements = null, RequirementsEnforced? requirementsEnforced = null, Locale? locale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productType == null)
                throw new System.ArgumentNullException("productType");

            if (marketplaceIds == null)
                throw new System.ArgumentNullException("marketplaceIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("definitions/2020-09-01/productTypes/{productType}?");
            urlBuilder_.Replace("{productType}", System.Uri.EscapeDataString(ConvertToString(productType, System.Globalization.CultureInfo.InvariantCulture)));
            foreach (var item_ in marketplaceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sellerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sellerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sellerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productTypeVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productTypeVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productTypeVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requirements != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requirements") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requirements, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requirementsEnforced != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("requirementsEnforced") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requirementsEnforced, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locale != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductTypeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The request size exceeded the maximum accepted size.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerProductTypeDefinitionsApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerProductTypeDefinitionsApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerProductTypeDefinitionsApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerProductTypeDefinitionsApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Error>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaLink
    {
        /// <summary>
        /// Link to retrieve the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Link Link { get; set; } = new Link();

        /// <summary>
        /// Checksum hash of the schema (Base64 MD5). Can be used to verify schema contents, identify changes between schema versions, and for caching.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checksum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Checksum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchemaLink FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaLink>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductTypeDefinition
    {
        /// <summary>
        /// Link to meta-schema describing the vocabulary used by the product type schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaLink MetaSchema { get; set; }

        /// <summary>
        /// Link to schema describing the attributes and requirements for the product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SchemaLink Schema { get; set; } = new SchemaLink();

        /// <summary>
        /// Name of the requirements set represented in this product type definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requirements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductTypeDefinitionRequirements Requirements { get; set; }

        /// <summary>
        /// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requirementsEnforced", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductTypeDefinitionRequirementsEnforced RequirementsEnforced { get; set; }

        /// <summary>
        /// Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyGroups", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, PropertyGroup> PropertyGroups { get; set; } = new System.Collections.Generic.Dictionary<string, PropertyGroup>();

        /// <summary>
        /// Locale of the display elements contained in the product type definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Amazon marketplace identifiers for which the product type definition is applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarketplaceIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The name of the Amazon product type that this product type definition applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductType { get; set; }

        /// <summary>
        /// The version details for the Amazon product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productTypeVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductTypeVersion ProductTypeVersion { get; set; } = new ProductTypeVersion();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProductTypeDefinition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTypeDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A property group represents a logical grouping of schema properties that can be used for display or informational purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PropertyGroup
    {
        /// <summary>
        /// The display label of the property group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the property group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The names of the schema properties for the property group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PropertyNames { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PropertyGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The version details for an Amazon product type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductTypeVersion
    {
        /// <summary>
        /// Version identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        /// <summary>
        /// When true, the version indicated by the version identifier is the latest available for the Amazon product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latest", Required = Newtonsoft.Json.Required.Always)]
        public bool Latest { get; set; }

        /// <summary>
        /// When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseCandidate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReleaseCandidate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProductTypeVersion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTypeVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An Amazon product type with a definition available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductType
    {
        /// <summary>
        /// The name of the Amazon product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The Amazon marketplace identifiers for which the product type definition is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarketplaceIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProductType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of Amazon product types with definitions available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductTypeList
    {
        [Newtonsoft.Json.JsonProperty("productTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductType> ProductTypes { get; set; } = new System.Collections.ObjectModel.Collection<ProductType>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProductTypeList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTypeList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The name of the requirements set to retrieve requirements for.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Requirements
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LISTING")]
        LISTING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LISTING_PRODUCT_ONLY")]
        LISTING_PRODUCT_ONLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LISTING_OFFER_ONLY")]
        LISTING_OFFER_ONLY = 2,

    }

    /// <summary>
    /// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequirementsEnforced
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENFORCED")]
        ENFORCED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ENFORCED")]
        NOT_ENFORCED = 1,

    }

    /// <summary>
    /// Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Locale
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ar_AE")]
        Ar_AE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"de_DE")]
        De_DE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"en_AE")]
        En_AE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"en_AU")]
        En_AU = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"en_CA")]
        En_CA = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"en_GB")]
        En_GB = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"en_IN")]
        En_IN = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"en_SG")]
        En_SG = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"en_US")]
        En_US = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"es_ES")]
        Es_ES = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"es_MX")]
        Es_MX = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"es_US")]
        Es_US = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"fr_CA")]
        Fr_CA = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"fr_FR")]
        Fr_FR = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"it_IT")]
        It_IT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ja")]
        Ja = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ja_JP")]
        Ja_JP = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"nl_NL")]
        Nl_NL = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"pl_PL")]
        Pl_PL = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"pt_BR")]
        Pt_BR = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"pt_PT")]
        Pt_PT = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"sv_SE")]
        Sv_SE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"tr_TR")]
        Tr_TR = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"zh_CN")]
        Zh_CN = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"zh_TW")]
        Zh_TW = 37,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Link
    {
        /// <summary>
        /// URI resource for the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Resource { get; set; }

        /// <summary>
        /// HTTP method for the link operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verb", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LinkVerb Verb { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Link FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Link>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductTypeDefinitionRequirements
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LISTING")]
        LISTING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LISTING_PRODUCT_ONLY")]
        LISTING_PRODUCT_ONLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LISTING_OFFER_ONLY")]
        LISTING_OFFER_ONLY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductTypeDefinitionRequirementsEnforced
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENFORCED")]
        ENFORCED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ENFORCED")]
        NOT_ENFORCED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LinkVerb
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerProductTypeDefinitionsApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerProductTypeDefinitionsApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerProductTypeDefinitionsApiException<TResult> : AmazonSellingPartnerProductTypeDefinitionsApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerProductTypeDefinitionsApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603