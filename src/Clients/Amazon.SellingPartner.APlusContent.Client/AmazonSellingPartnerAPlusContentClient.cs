//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.APlusContent.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerAPlusContentClient
    {
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        SearchContentDocumentsResponse SearchContentDocuments(string marketplaceId, string pageToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchContentDocumentsResponse> SearchContentDocumentsAsync(string marketplaceId, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        PostContentDocumentResponse CreateContentDocument(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostContentDocumentResponse> CreateContentDocumentAsync(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        GetContentDocumentResponse GetContentDocument(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> includedDataSet);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetContentDocumentResponse> GetContentDocumentAsync(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> includedDataSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        PostContentDocumentResponse UpdateContentDocument(string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostContentDocumentResponse> UpdateContentDocumentAsync(string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        ListContentDocumentAsinRelationsResponse ListContentDocumentAsinRelations(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous2> includedDataSet = null, System.Collections.Generic.IEnumerable<string> asinSet = null, string pageToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListContentDocumentAsinRelationsResponse> ListContentDocumentAsinRelationsAsync(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous2> includedDataSet = null, System.Collections.Generic.IEnumerable<string> asinSet = null, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        AplusResponse PostContentDocumentAsinRelations(string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AplusResponse> PostContentDocumentAsinRelationsAsync(string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        ValidateContentDocumentAsinRelationsResponse ValidateContentDocumentAsinRelations(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Collections.Generic.IEnumerable<string> asinSet = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ValidateContentDocumentAsinRelationsResponse> ValidateContentDocumentAsinRelationsAsync(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Collections.Generic.IEnumerable<string> asinSet = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        SearchContentPublishRecordsResponse SearchContentPublishRecords(string marketplaceId, string asin, string pageToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchContentPublishRecordsResponse> SearchContentPublishRecordsAsync(string marketplaceId, string asin, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        AplusResponse PostContentDocumentApprovalSubmission(string contentReferenceKey, string marketplaceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AplusResponse> PostContentDocumentApprovalSubmissionAsync(string contentReferenceKey, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        AplusResponse PostContentDocumentSuspendSubmission(string contentReferenceKey, string marketplaceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AplusResponse> PostContentDocumentSuspendSubmissionAsync(string contentReferenceKey, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerAPlusContentClient : IAmazonSellingPartnerAPlusContentClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerAPlusContentClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual SearchContentDocumentsResponse SearchContentDocuments(string marketplaceId, string pageToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await SearchContentDocumentsAsync(marketplaceId, pageToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchContentDocumentsResponse> SearchContentDocumentsAsync(string marketplaceId, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments?");
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchContentDocumentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual PostContentDocumentResponse CreateContentDocument(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateContentDocumentAsync(marketplaceId, postContentDocumentRequest, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PostContentDocumentResponse> CreateContentDocumentAsync(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (postContentDocumentRequest == null)
                throw new System.ArgumentNullException("postContentDocumentRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments?");
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(postContentDocumentRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostContentDocumentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual GetContentDocumentResponse GetContentDocument(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> includedDataSet)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetContentDocumentAsync(contentReferenceKey, marketplaceId, includedDataSet, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetContentDocumentResponse> GetContentDocumentAsync(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous> includedDataSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentReferenceKey == null)
                throw new System.ArgumentNullException("contentReferenceKey");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (includedDataSet == null)
                throw new System.ArgumentNullException("includedDataSet");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments/{contentReferenceKey}?");
            urlBuilder_.Replace("{contentReferenceKey}", System.Uri.EscapeDataString(ConvertToString(contentReferenceKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in includedDataSet) { urlBuilder_.Append(System.Uri.EscapeDataString("includedDataSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetContentDocumentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual PostContentDocumentResponse UpdateContentDocument(string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest)
        {
            return System.Threading.Tasks.Task.Run(async () => await UpdateContentDocumentAsync(contentReferenceKey, marketplaceId, postContentDocumentRequest, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PostContentDocumentResponse> UpdateContentDocumentAsync(string contentReferenceKey, string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentReferenceKey == null)
                throw new System.ArgumentNullException("contentReferenceKey");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (postContentDocumentRequest == null)
                throw new System.ArgumentNullException("postContentDocumentRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments/{contentReferenceKey}?");
            urlBuilder_.Replace("{contentReferenceKey}", System.Uri.EscapeDataString(ConvertToString(contentReferenceKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(postContentDocumentRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostContentDocumentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual ListContentDocumentAsinRelationsResponse ListContentDocumentAsinRelations(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous2> includedDataSet = null, System.Collections.Generic.IEnumerable<string> asinSet = null, string pageToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListContentDocumentAsinRelationsAsync(contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="includedDataSet">The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListContentDocumentAsinRelationsResponse> ListContentDocumentAsinRelationsAsync(string contentReferenceKey, string marketplaceId, System.Collections.Generic.IEnumerable<Anonymous2> includedDataSet = null, System.Collections.Generic.IEnumerable<string> asinSet = null, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentReferenceKey == null)
                throw new System.ArgumentNullException("contentReferenceKey");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins?");
            urlBuilder_.Replace("{contentReferenceKey}", System.Uri.EscapeDataString(ConvertToString(contentReferenceKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includedDataSet != null)
            {
                foreach (var item_ in includedDataSet) { urlBuilder_.Append(System.Uri.EscapeDataString("includedDataSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (asinSet != null)
            {
                foreach (var item_ in asinSet) { urlBuilder_.Append(System.Uri.EscapeDataString("asinSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListContentDocumentAsinRelationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual AplusResponse PostContentDocumentAsinRelations(string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest)
        {
            return System.Threading.Tasks.Task.Run(async () => await PostContentDocumentAsinRelationsAsync(contentReferenceKey, marketplaceId, postContentDocumentAsinRelationsRequest, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentAsinRelationsRequest">The content document ASIN relations request details.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AplusResponse> PostContentDocumentAsinRelationsAsync(string contentReferenceKey, string marketplaceId, PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentReferenceKey == null)
                throw new System.ArgumentNullException("contentReferenceKey");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (postContentDocumentAsinRelationsRequest == null)
                throw new System.ArgumentNullException("postContentDocumentAsinRelationsRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins?");
            urlBuilder_.Replace("{contentReferenceKey}", System.Uri.EscapeDataString(ConvertToString(contentReferenceKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(postContentDocumentAsinRelationsRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AplusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual ValidateContentDocumentAsinRelationsResponse ValidateContentDocumentAsinRelations(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Collections.Generic.IEnumerable<string> asinSet = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ValidateContentDocumentAsinRelationsAsync(marketplaceId, postContentDocumentRequest, asinSet, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="postContentDocumentRequest">The content document request details.</param>
        /// <param name="asinSet">The set of ASINs.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ValidateContentDocumentAsinRelationsResponse> ValidateContentDocumentAsinRelationsAsync(string marketplaceId, PostContentDocumentRequest postContentDocumentRequest, System.Collections.Generic.IEnumerable<string> asinSet = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (postContentDocumentRequest == null)
                throw new System.ArgumentNullException("postContentDocumentRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentAsinValidations?");
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asinSet != null)
            {
                foreach (var item_ in asinSet) { urlBuilder_.Append(System.Uri.EscapeDataString("asinSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(postContentDocumentRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidateContentDocumentAsinRelationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual SearchContentPublishRecordsResponse SearchContentPublishRecords(string marketplaceId, string asin, string pageToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await SearchContentPublishRecordsAsync(marketplaceId, asin, pageToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN).</param>
        /// <param name="pageToken">A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchContentPublishRecordsResponse> SearchContentPublishRecordsAsync(string marketplaceId, string asin, string pageToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            if (asin == null)
                throw new System.ArgumentNullException("asin");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentPublishRecords?");
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchContentPublishRecordsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual AplusResponse PostContentDocumentApprovalSubmission(string contentReferenceKey, string marketplaceId)
        {
            return System.Threading.Tasks.Task.Run(async () => await PostContentDocumentApprovalSubmissionAsync(contentReferenceKey, marketplaceId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AplusResponse> PostContentDocumentApprovalSubmissionAsync(string contentReferenceKey, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentReferenceKey == null)
                throw new System.ArgumentNullException("contentReferenceKey");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions?");
            urlBuilder_.Replace("{contentReferenceKey}", System.Uri.EscapeDataString(ConvertToString(contentReferenceKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AplusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual AplusResponse PostContentDocumentSuspendSubmission(string contentReferenceKey, string marketplaceId)
        {
            return System.Threading.Tasks.Task.Run(async () => await PostContentDocumentSuspendSubmissionAsync(contentReferenceKey, marketplaceId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="contentReferenceKey">The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.</param>
        /// <param name="marketplaceId">The identifier for the marketplace where the A+ Content is published.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerAPlusContentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AplusResponse> PostContentDocumentSuspendSubmissionAsync(string contentReferenceKey, string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentReferenceKey == null)
                throw new System.ArgumentNullException("contentReferenceKey");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions?");
            urlBuilder_.Replace("{contentReferenceKey}", System.Uri.EscapeDataString(ConvertToString(contentReferenceKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AplusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The specified resource no longer exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerAPlusContentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerAPlusContentApiException<ErrorList>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerAPlusContentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerAPlusContentApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerAPlusContentApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The base response data for all A+ Content operations when a request is successful or partially successful. Individual operations may extend this with additional data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AplusResponse
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageSet Warnings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AplusResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AplusResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The base response data for paginated A+ Content operations. Individual operations may extend this with additional data. If nextPageToken is not returned, there are no more pages to return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AplusPaginatedResponse : AplusResponse
    {
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string NextPageToken { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AplusPaginatedResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AplusPaginatedResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The error response for when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList
    {
        /// <summary>
        /// A list of error responses returned when a request is unsuccessful.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Error>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A set of messages to the user, such as warnings or comments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSet : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MessageSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The code that identifies the type of error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code { get; set; }

        /// <summary>
        /// A human readable description of the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        /// <summary>
        /// Additional information, if available, to clarify the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of A+ Content metadata records.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentMetadataRecordList : System.Collections.ObjectModel.Collection<ContentMetadataRecord>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataRecordList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataRecordList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The metadata for an A+ Content document, with additional information for content management.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentMetadataRecord
    {
        [Newtonsoft.Json.JsonProperty("contentReferenceKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ContentReferenceKey { get; set; }

        [Newtonsoft.Json.JsonProperty("contentMetadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentMetadata ContentMetadata { get; set; } = new ContentMetadata();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadataRecord FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataRecord>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The metadata of an A+ Content document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentMetadata
    {
        /// <summary>
        /// The A+ Content document name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string MarketplaceId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("badgeSet", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentBadgeSet BadgeSet { get; set; } = new ContentBadgeSet();

        /// <summary>
        /// The approximate age of the A+ Content document and metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime UpdateTime { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content document type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EBC")]
        EBC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EMC")]
        EMC = 1,

    }

    /// <summary>
    /// The submission status of the content document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBMITTED")]
        SUBMITTED = 3,

    }

    /// <summary>
    /// The set of content badges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentBadgeSet : System.Collections.ObjectModel.Collection<ContentBadge>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentBadgeSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentBadgeSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A flag that provides additional information about an A+ Content document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentBadge
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BULK")]
        BULK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERATED")]
        GENERATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCHPAD")]
        LAUNCHPAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM")]
        PREMIUM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 4,

    }

    /// <summary>
    /// The set of ASIN badges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsinBadgeSet : System.Collections.ObjectModel.Collection<AsinBadge>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AsinBadgeSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsinBadgeSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A flag that provides additional information about an ASIN. This is contextual and may change depending on the request that generated it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AsinBadge
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BRAND_NOT_ELIGIBLE")]
        BRAND_NOT_ELIGIBLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CATALOG_NOT_FOUND")]
        CATALOG_NOT_FOUND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_NOT_PUBLISHED")]
        CONTENT_NOT_PUBLISHED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_PUBLISHED")]
        CONTENT_PUBLISHED = 3,

    }

    /// <summary>
    /// The set of ASINs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsinSet : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AsinSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsinSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The set of ASIN metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsinMetadataSet : System.Collections.ObjectModel.Collection<AsinMetadata>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AsinMetadataSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsinMetadataSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content ASIN with additional metadata for content management. If you don't include the `includedDataSet` parameter in a call to the listContentDocumentAsinRelations operation, the related ASINs are returned without metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsinMetadata
    {
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 10)]
        public string Asin { get; set; }

        [Newtonsoft.Json.JsonProperty("badgeSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AsinBadgeSet BadgeSet { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 10)]
        public string Parent { get; set; }

        /// <summary>
        /// The title for the ASIN in the Amazon catalog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// The default image for the ASIN in the Amazon catalog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ImageUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("contentReferenceKeySet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentReferenceKeySet ContentReferenceKeySet { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AsinMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsinMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of A+ Content publishing records.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublishRecordList : System.Collections.ObjectModel.Collection<PublishRecord>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PublishRecordList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublishRecordList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The full context for an A+ Content publishing event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublishRecord
    {
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string MarketplaceId { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 5)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 10)]
        public string Asin { get; set; }

        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("contentSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ContentSubType { get; set; }

        [Newtonsoft.Json.JsonProperty("contentReferenceKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ContentReferenceKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PublishRecord FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublishRecord>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A set of content reference keys.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentReferenceKeySet : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentReferenceKeySet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentReferenceKeySet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageCropSpecification
    {
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ImageDimensions Size { get; set; } = new ImageDimensions();

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageOffsets Offset { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageCropSpecification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageCropSpecification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The dimensions extending from the top left corner of the cropped image, or the top left corner of the original image if there is no cropping. Only `pixels` is allowed as the units value for ImageDimensions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageDimensions
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IntegerWithUnits Width { get; set; } = new IntegerWithUnits();

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IntegerWithUnits Height { get; set; } = new IntegerWithUnits();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageDimensions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageDimensions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The top left corner of the cropped image, specified in the original image's coordinate space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageOffsets
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IntegerWithUnits X { get; set; } = new IntegerWithUnits();

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IntegerWithUnits Y { get; set; } = new IntegerWithUnits();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageOffsets FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageOffsets>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegerWithUnits
    {
        /// <summary>
        /// The dimension value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; set; }

        /// <summary>
        /// The unit of measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Units { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IntegerWithUnits FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IntegerWithUnits>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A content document with additional information for content management.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRecord
    {
        [Newtonsoft.Json.JsonProperty("contentReferenceKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ContentReferenceKey { get; set; }

        [Newtonsoft.Json.JsonProperty("contentMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentMetadata ContentMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentDocument ContentDocument { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentRecord FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRecord>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content document. This is the enhanced content that is published to product detail pages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentDocument
    {
        /// <summary>
        /// The A+ Content document name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("contentSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ContentSubType { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 5)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("contentModuleList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public ContentModuleList ContentModuleList { get; set; } = new ContentModuleList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentDocument FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDocument>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of A+ Content modules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentModuleList : System.Collections.ObjectModel.Collection<ContentModule>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentModuleList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentModuleList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentModule
    {
        [Newtonsoft.Json.JsonProperty("contentModuleType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentModuleType ContentModuleType { get; set; }

        [Newtonsoft.Json.JsonProperty("standardCompanyLogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardCompanyLogoModule StandardCompanyLogo { get; set; }

        [Newtonsoft.Json.JsonProperty("standardComparisonTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardComparisonTableModule StandardComparisonTable { get; set; }

        [Newtonsoft.Json.JsonProperty("standardFourImageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardFourImageTextModule StandardFourImageText { get; set; }

        [Newtonsoft.Json.JsonProperty("standardFourImageTextQuadrant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardFourImageTextQuadrantModule StandardFourImageTextQuadrant { get; set; }

        [Newtonsoft.Json.JsonProperty("standardHeaderImageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardHeaderImageTextModule StandardHeaderImageText { get; set; }

        [Newtonsoft.Json.JsonProperty("standardImageSidebar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageSidebarModule StandardImageSidebar { get; set; }

        [Newtonsoft.Json.JsonProperty("standardImageTextOverlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextOverlayModule StandardImageTextOverlay { get; set; }

        [Newtonsoft.Json.JsonProperty("standardMultipleImageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardMultipleImageTextModule StandardMultipleImageText { get; set; }

        [Newtonsoft.Json.JsonProperty("standardProductDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardProductDescriptionModule StandardProductDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("standardSingleImageHighlights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardSingleImageHighlightsModule StandardSingleImageHighlights { get; set; }

        [Newtonsoft.Json.JsonProperty("standardSingleImageSpecsDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardSingleImageSpecsDetailModule StandardSingleImageSpecsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("standardSingleSideImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardSingleSideImageModule StandardSingleSideImage { get; set; }

        [Newtonsoft.Json.JsonProperty("standardTechSpecs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTechSpecsModule StandardTechSpecs { get; set; }

        [Newtonsoft.Json.JsonProperty("standardText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextModule StandardText { get; set; }

        [Newtonsoft.Json.JsonProperty("standardThreeImageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardThreeImageTextModule StandardThreeImageText { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The type of A+ Content module.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentModuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_COMPANY_LOGO")]
        STANDARD_COMPANY_LOGO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_COMPARISON_TABLE")]
        STANDARD_COMPARISON_TABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_FOUR_IMAGE_TEXT")]
        STANDARD_FOUR_IMAGE_TEXT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_FOUR_IMAGE_TEXT_QUADRANT")]
        STANDARD_FOUR_IMAGE_TEXT_QUADRANT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_HEADER_IMAGE_TEXT")]
        STANDARD_HEADER_IMAGE_TEXT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_IMAGE_SIDEBAR")]
        STANDARD_IMAGE_SIDEBAR = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_IMAGE_TEXT_OVERLAY")]
        STANDARD_IMAGE_TEXT_OVERLAY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_MULTIPLE_IMAGE_TEXT")]
        STANDARD_MULTIPLE_IMAGE_TEXT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_PRODUCT_DESCRIPTION")]
        STANDARD_PRODUCT_DESCRIPTION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_SINGLE_IMAGE_HIGHLIGHTS")]
        STANDARD_SINGLE_IMAGE_HIGHLIGHTS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_SINGLE_IMAGE_SPECS_DETAIL")]
        STANDARD_SINGLE_IMAGE_SPECS_DETAIL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_SINGLE_SIDE_IMAGE")]
        STANDARD_SINGLE_SIDE_IMAGE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_TECH_SPECS")]
        STANDARD_TECH_SPECS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_TEXT")]
        STANDARD_TEXT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_THREE_IMAGE_TEXT")]
        STANDARD_THREE_IMAGE_TEXT = 14,

    }

    /// <summary>
    /// The standard company logo image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardCompanyLogoModule
    {
        [Newtonsoft.Json.JsonProperty("companyLogo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ImageComponent CompanyLogo { get; set; } = new ImageComponent();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardCompanyLogoModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardCompanyLogoModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The standard product comparison table.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardComparisonTableModule
    {
        [Newtonsoft.Json.JsonProperty("productColumns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<StandardComparisonProductBlock> ProductColumns { get; set; }

        [Newtonsoft.Json.JsonProperty("metricRowLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PlainTextItem> MetricRowLabels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardComparisonTableModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardComparisonTableModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Four standard images with text, presented across a single row.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardFourImageTextModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("block1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block1 { get; set; }

        [Newtonsoft.Json.JsonProperty("block2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block2 { get; set; }

        [Newtonsoft.Json.JsonProperty("block3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block3 { get; set; }

        [Newtonsoft.Json.JsonProperty("block4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block4 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardFourImageTextModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardFourImageTextModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Four standard images with text, presented on a grid of four quadrants.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardFourImageTextQuadrantModule
    {
        [Newtonsoft.Json.JsonProperty("block1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StandardImageTextBlock Block1 { get; set; } = new StandardImageTextBlock();

        [Newtonsoft.Json.JsonProperty("block2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StandardImageTextBlock Block2 { get; set; } = new StandardImageTextBlock();

        [Newtonsoft.Json.JsonProperty("block3", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StandardImageTextBlock Block3 { get; set; } = new StandardImageTextBlock();

        [Newtonsoft.Json.JsonProperty("block4", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StandardImageTextBlock Block4 { get; set; } = new StandardImageTextBlock();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardFourImageTextQuadrantModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardFourImageTextQuadrantModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Standard headline text, an image, and body text.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardHeaderImageTextModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardHeaderImageTextModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardHeaderImageTextModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardImageSidebarModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("imageCaptionBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageCaptionBlock ImageCaptionBlock { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionTextBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock DescriptionTextBlock { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionListBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextListBlock DescriptionListBlock { get; set; }

        [Newtonsoft.Json.JsonProperty("sidebarImageTextBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock SidebarImageTextBlock { get; set; }

        [Newtonsoft.Json.JsonProperty("sidebarListBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextListBlock SidebarListBlock { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardImageSidebarModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardImageSidebarModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A standard background image with a floating text box.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardImageTextOverlayModule
    {
        [Newtonsoft.Json.JsonProperty("overlayColorType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorType OverlayColorType { get; set; }

        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardImageTextOverlayModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardImageTextOverlayModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Standard images with text, presented one at a time. The user clicks on thumbnails to view each block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardMultipleImageTextModule
    {
        [Newtonsoft.Json.JsonProperty("blocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StandardImageTextCaptionBlock> Blocks { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardMultipleImageTextModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardMultipleImageTextModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Standard product description text.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardProductDescriptionModule
    {
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ParagraphComponent Body { get; set; } = new ParagraphComponent();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardProductDescriptionModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardProductDescriptionModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A standard image with several paragraphs and a bulleted list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardSingleImageHighlightsModule
    {
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageComponent Image { get; set; }

        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("textBlock1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock TextBlock1 { get; set; }

        [Newtonsoft.Json.JsonProperty("textBlock2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock TextBlock2 { get; set; }

        [Newtonsoft.Json.JsonProperty("textBlock3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock TextBlock3 { get; set; }

        [Newtonsoft.Json.JsonProperty("bulletedListBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardHeaderTextListBlock BulletedListBlock { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardSingleImageHighlightsModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardSingleImageHighlightsModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A standard image with paragraphs and a bulleted list, and extra space for technical details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardSingleImageSpecsDetailModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageComponent Image { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionHeadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent DescriptionHeadline { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionBlock1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock DescriptionBlock1 { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionBlock2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock DescriptionBlock2 { get; set; }

        [Newtonsoft.Json.JsonProperty("specificationHeadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent SpecificationHeadline { get; set; }

        [Newtonsoft.Json.JsonProperty("specificationListBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardHeaderTextListBlock SpecificationListBlock { get; set; }

        [Newtonsoft.Json.JsonProperty("specificationTextBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextBlock SpecificationTextBlock { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardSingleImageSpecsDetailModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardSingleImageSpecsDetailModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A standard headline and body text with an image on the side.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardSingleSideImageModule
    {
        [Newtonsoft.Json.JsonProperty("imagePositionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PositionType ImagePositionType { get; set; }

        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardSingleSideImageModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardSingleSideImageModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The standard table of technical feature names and definitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardTechSpecsModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// The specification list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specificationList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public System.Collections.Generic.ICollection<StandardTextPairBlock> SpecificationList { get; set; } = new System.Collections.ObjectModel.Collection<StandardTextPairBlock>();

        /// <summary>
        /// The number of tables to present. Features are evenly divided between the tables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tableCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 2)]
        public int? TableCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardTechSpecsModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardTechSpecsModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A standard headline and body text.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardTextModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ParagraphComponent Body { get; set; } = new ParagraphComponent();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardTextModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardTextModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Three standard images with text, presented across a single row.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardThreeImageTextModule
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("block1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block1 { get; set; }

        [Newtonsoft.Json.JsonProperty("block2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block2 { get; set; }

        [Newtonsoft.Json.JsonProperty("block3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block3 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardThreeImageTextModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardThreeImageTextModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard comparison product block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardComparisonProductBlock
    {
        /// <summary>
        /// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 6)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageComponent Image { get; set; }

        /// <summary>
        /// The comparison product title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 1)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 10)]
        public string Asin { get; set; }

        /// <summary>
        /// Determines whether this block of content is visually highlighted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highlight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Highlight { get; set; }

        /// <summary>
        /// Comparison metrics for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PlainTextItem> Metrics { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardComparisonProductBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardComparisonProductBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ standard fixed-length list of text, with a related headline.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardHeaderTextListBlock
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardTextListBlock Block { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardHeaderTextListBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardHeaderTextListBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard fixed length list of text, usually presented as bullet points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardTextListBlock
    {
        [Newtonsoft.Json.JsonProperty("textList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(8)]
        public System.Collections.Generic.ICollection<TextItem> TextList { get; set; } = new System.Collections.ObjectModel.Collection<TextItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardTextListBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardTextListBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard image and text block, with a related caption. The caption may not display on all devices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardImageTextCaptionBlock
    {
        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandardImageTextBlock Block { get; set; }

        [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Caption { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardImageTextCaptionBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardImageTextCaptionBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard image and caption block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardImageCaptionBlock
    {
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageComponent Image { get; set; }

        [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Caption { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardImageCaptionBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardImageCaptionBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard image and text box block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardImageTextBlock
    {
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageComponent Image { get; set; }

        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphComponent Body { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardImageTextBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardImageTextBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard text box block, comprised of a paragraph with a headline.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardTextBlock
    {
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Headline { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphComponent Body { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardTextBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardTextBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The A+ Content standard label and description block, comprised of a pair of text components.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardTextPairBlock
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextComponent Description { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandardTextPairBlock FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandardTextPairBlock>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Rich positional text, usually presented as a collection of bullet points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TextItem
    {
        /// <summary>
        /// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TextComponent Text { get; set; } = new TextComponent();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TextItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Plain positional text, used in collections of brief labels and descriptors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlainTextItem
    {
        /// <summary>
        /// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int Position { get; set; }

        /// <summary>
        /// The actual plain text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlainTextItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlainTextItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A reference to an image, hosted in the A+ Content media library.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageComponent
    {
        /// <summary>
        /// This identifier is provided by the Selling Partner API for Uploads.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadDestinationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UploadDestinationId { get; set; }

        [Newtonsoft.Json.JsonProperty("imageCropSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ImageCropSpecification ImageCropSpecification { get; set; } = new ImageCropSpecification();

        /// <summary>
        /// The alternative text for the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altText", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string AltText { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of rich text content, usually presented in a text box.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParagraphComponent
    {
        [Newtonsoft.Json.JsonProperty("textList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<TextComponent> TextList { get; set; } = new System.Collections.ObjectModel.Collection<TextComponent>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ParagraphComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParagraphComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Rich text content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TextComponent
    {
        /// <summary>
        /// The actual plain text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength = 1)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("decoratorSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DecoratorSet DecoratorSet { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TextComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The relative color scheme of content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DARK")]
        DARK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LIGHT")]
        LIGHT = 1,

    }

    /// <summary>
    /// The relative positioning of content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PositionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT")]
        LEFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT")]
        RIGHT = 1,

    }

    /// <summary>
    /// A set of content decorators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DecoratorSet : System.Collections.ObjectModel.Collection<Decorator>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DecoratorSet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DecoratorSet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A decorator applied to a content string value in order to create rich text.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Decorator
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DecoratorType? Type { get; set; }

        /// <summary>
        /// The starting character of this decorator within the content string. Use zero for the first character.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 10000)]
        public int? Offset { get; set; }

        /// <summary>
        /// The number of content characters to alter with this decorator. Decorators such as line breaks can have zero length and fit between characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 10000)]
        public int? Length { get; set; }

        /// <summary>
        /// The relative intensity or variation of this decorator. Decorators such as bullet-points, for example, can have multiple indentation depths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? Depth { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Decorator FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Decorator>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The type of rich text decorator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DecoratorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIST_ITEM")]
        LIST_ITEM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST_ORDERED")]
        LIST_ORDERED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST_UNORDERED")]
        LIST_UNORDERED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STYLE_BOLD")]
        STYLE_BOLD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STYLE_ITALIC")]
        STYLE_ITALIC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"STYLE_LINEBREAK")]
        STYLE_LINEBREAK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STYLE_PARAGRAPH")]
        STYLE_PARAGRAPH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STYLE_UNDERLINE")]
        STYLE_UNDERLINE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchContentDocumentsResponse : AplusPaginatedResponse
    {
        /// <summary>
        /// The content metadata records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentMetadataRecords", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentMetadataRecordList ContentMetadataRecords { get; set; } = new ContentMetadataRecordList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchContentDocumentsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContentDocumentsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContentDocumentResponse : AplusResponse
    {
        [Newtonsoft.Json.JsonProperty("contentRecord", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentRecord ContentRecord { get; set; } = new ContentRecord();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetContentDocumentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetContentDocumentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostContentDocumentRequest
    {
        [Newtonsoft.Json.JsonProperty("contentDocument", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContentDocument ContentDocument { get; set; } = new ContentDocument();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PostContentDocumentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostContentDocumentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostContentDocumentResponse : AplusResponse
    {
        [Newtonsoft.Json.JsonProperty("contentReferenceKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ContentReferenceKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PostContentDocumentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostContentDocumentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListContentDocumentAsinRelationsResponse : AplusPaginatedResponse
    {
        [Newtonsoft.Json.JsonProperty("asinMetadataSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AsinMetadataSet AsinMetadataSet { get; set; } = new AsinMetadataSet();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListContentDocumentAsinRelationsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListContentDocumentAsinRelationsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostContentDocumentAsinRelationsRequest
    {
        [Newtonsoft.Json.JsonProperty("asinSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AsinSet AsinSet { get; set; } = new AsinSet();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PostContentDocumentAsinRelationsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostContentDocumentAsinRelationsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateContentDocumentAsinRelationsResponse : AplusResponse
    {
        /// <summary>
        /// A list of error responses returned when a request is unsuccessful.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Error>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ValidateContentDocumentAsinRelationsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidateContentDocumentAsinRelationsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchContentPublishRecordsResponse : AplusPaginatedResponse
    {
        [Newtonsoft.Json.JsonProperty("publishRecordList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PublishRecordList PublishRecordList { get; set; } = new PublishRecordList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchContentPublishRecordsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContentPublishRecordsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENTS")]
        CONTENTS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"METADATA")]
        METADATA = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"METADATA")]
        METADATA = 0,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerAPlusContentApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerAPlusContentApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerAPlusContentApiException<TResult> : AmazonSellingPartnerAPlusContentApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerAPlusContentApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603