//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.ShipmentInvoicing.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerShipmentInvoicingClient
    {
        /// <param name="shipmentId">The identifier for the shipment. Get this value from the FBAOutboundShipmentStatus notification. For information about subscribing to notifications, see the [Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide).</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        GetShipmentDetailsResponse GetShipmentDetails(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The identifier for the shipment. Get this value from the FBAOutboundShipmentStatus notification. For information about subscribing to notifications, see the [Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide).</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetShipmentDetailsResponse> GetShipmentDetailsAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">The identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        SubmitInvoiceResponse SubmitInvoice(string shipmentId, SubmitInvoiceRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmitInvoiceResponse> SubmitInvoiceAsync(string shipmentId, SubmitInvoiceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">The shipment identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        GetInvoiceStatusResponse GetInvoiceStatus(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The shipment identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInvoiceStatusResponse> GetInvoiceStatusAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerShipmentInvoicingClient : IAmazonSellingPartnerShipmentInvoicingClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerShipmentInvoicingClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="shipmentId">The identifier for the shipment. Get this value from the FBAOutboundShipmentStatus notification. For information about subscribing to notifications, see the [Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide).</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        public virtual GetShipmentDetailsResponse GetShipmentDetails(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetShipmentDetailsAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The identifier for the shipment. Get this value from the FBAOutboundShipmentStatus notification. For information about subscribing to notifications, see the [Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide).</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetShipmentDetailsResponse> GetShipmentDetailsAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/brazil/v0/shipments/{shipmentId}");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetShipmentDetailsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerShipmentInvoicingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">The identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        public virtual SubmitInvoiceResponse SubmitInvoice(string shipmentId, SubmitInvoiceRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await SubmitInvoiceAsync(shipmentId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubmitInvoiceResponse> SubmitInvoiceAsync(string shipmentId, SubmitInvoiceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/brazil/v0/shipments/{shipmentId}/invoice");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitInvoiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<SubmitInvoiceResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerShipmentInvoicingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">The shipment identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        public virtual GetInvoiceStatusResponse GetInvoiceStatus(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetInvoiceStatusAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The shipment identifier for the shipment.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerShipmentInvoicingApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetInvoiceStatusResponse> GetInvoiceStatusAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/brazil/v0/shipments/{shipmentId}/invoice/status");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInvoiceStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerShipmentInvoicingApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerShipmentInvoicingApiException<GetInvoiceStatusResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerShipmentInvoicingApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerShipmentInvoicingApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerShipmentInvoicingApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The response schema for the getShipmentDetails operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShipmentDetailsResponse
    {
        /// <summary>
        /// The payload for the getShipmentDetails operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDetail Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShipmentDetailsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShipmentDetailsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The information required by a selling partner to issue a shipment invoice.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDetail
    {
        /// <summary>
        /// The Amazon-defined identifier for the warehouse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WarehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonShipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// The date and time when the order was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PurchaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PurchaseDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ShippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address ShippingAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentMethodDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentMethodDetailItemList PaymentMethodDetails { get; set; }

        /// <summary>
        /// The identifier for the marketplace where the order was placed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The seller identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerId { get; set; }

        /// <summary>
        /// The name of the buyer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BuyerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerName { get; set; }

        /// <summary>
        /// The county of the buyer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BuyerCounty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerCounty { get; set; }

        [Newtonsoft.Json.JsonProperty("BuyerTaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuyerTaxInfo BuyerTaxInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("MarketplaceTaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketplaceTaxInfo MarketplaceTaxInfo { get; set; }

        /// <summary>
        /// The seller’s friendly name registered in the marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("ShipmentItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentItems ShipmentItems { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentDetail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentDetail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipping address details of the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The street address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional street address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional street address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// The county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("County", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County { get; set; }

        /// <summary>
        /// The district.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("District", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string District { get; set; }

        /// <summary>
        /// The state or region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StateOrRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrRegion { get; set; }

        /// <summary>
        /// The postal code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The country code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressTypeEnum? AddressType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Address FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipping address type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Commercial")]
        Commercial = 1,

    }

    /// <summary>
    /// The list of payment method details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethodDetailItemList : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PaymentMethodDetailItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentMethodDetailItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Tax information about the buyer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyerTaxInfo
    {
        /// <summary>
        /// The legal name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompanyLegalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyLegalName { get; set; }

        /// <summary>
        /// The country or region imposing the tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxingRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxingRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("TaxClassifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxClassificationList TaxClassifications { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BuyerTaxInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuyerTaxInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Tax information about the marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceTaxInfo
    {
        /// <summary>
        /// The legal name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompanyLegalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyLegalName { get; set; }

        /// <summary>
        /// The country or region imposing the tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxingRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxingRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("TaxClassifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxClassificationList TaxClassifications { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MarketplaceTaxInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketplaceTaxInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of tax classifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxClassificationList : System.Collections.ObjectModel.Collection<TaxClassification>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxClassificationList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxClassificationList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The tax classification for the entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxClassification
    {
        /// <summary>
        /// The type of tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The entity's tax identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaxClassification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxClassification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of shipment items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentItems : System.Collections.ObjectModel.Collection<ShipmentItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentItems FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentItems>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipment item information required by a seller to issue a shipment invoice.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentItem
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ASIN { get; set; }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerSKU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon-defined identifier for the order item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// The name of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The number of items ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuantityOrdered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QuantityOrdered { get; set; }

        /// <summary>
        /// The selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ItemPrice { get; set; }

        /// <summary>
        /// The shipping price of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ShippingPrice { get; set; }

        /// <summary>
        /// The gift wrap price of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GiftWrapPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money GiftWrapPrice { get; set; }

        /// <summary>
        /// The discount on the shipping price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ShippingDiscount { get; set; }

        /// <summary>
        /// The total of all promotional discounts in the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PromotionDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PromotionDiscount { get; set; }

        /// <summary>
        /// The list of serial numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SerialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerialNumbersList SerialNumbers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The currency type and amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Money
    {
        /// <summary>
        /// Three-digit currency code in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The currency amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Money FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Money>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of serial numbers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SerialNumbersList : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SerialNumbersList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SerialNumbersList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The request schema for the submitInvoice operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitInvoiceRequest
    {
        [Newtonsoft.Json.JsonProperty("InvoiceContent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] InvoiceContent { get; set; }

        /// <summary>
        /// An Amazon marketplace identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// MD5 sum for validating the invoice data. For more information about calculating this value, see [Working with Content-MD5 Checksums](https://docs.developer.amazonservices.com/en_US/dev_guide/DG_MD5.html).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContentMD5Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContentMD5Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubmitInvoiceRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubmitInvoiceRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the submitInvoice operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitInvoiceResponse
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubmitInvoiceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubmitInvoiceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipment invoice status information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentInvoiceStatusInfo
    {
        /// <summary>
        /// The Amazon-defined shipment identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonShipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonShipmentId { get; set; }

        [Newtonsoft.Json.JsonProperty("InvoiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentInvoiceStatus? InvoiceStatus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentInvoiceStatusInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentInvoiceStatusInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipment invoice status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Errored")]
        Errored = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
        NotFound = 3,

    }

    /// <summary>
    /// The shipment invoice status response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentInvoiceStatusResponse
    {
        [Newtonsoft.Json.JsonProperty("Shipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentInvoiceStatusInfo Shipments { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentInvoiceStatusResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentInvoiceStatusResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getInvoiceStatus operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInvoiceStatusResponse
    {
        /// <summary>
        /// The payload for the getInvoiceStatus operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentInvoiceStatusResponse Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInvoiceStatusResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInvoiceStatusResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerShipmentInvoicingApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerShipmentInvoicingApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerShipmentInvoicingApiException<TResult> : AmazonSellingPartnerShipmentInvoicingApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerShipmentInvoicingApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603