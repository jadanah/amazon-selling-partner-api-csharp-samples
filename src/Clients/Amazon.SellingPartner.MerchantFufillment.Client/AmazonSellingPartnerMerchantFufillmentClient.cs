//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.MerchantFufillment.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerMerchantFufillmentClient
    {
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        GetEligibleShipmentServicesResponse GetEligibleShipmentServicesOld(GetEligibleShipmentServicesRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesOldAsync(GetEligibleShipmentServicesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        GetEligibleShipmentServicesResponse GetEligibleShipmentServices(GetEligibleShipmentServicesRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesAsync(GetEligibleShipmentServicesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        GetShipmentResponse GetShipment(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetShipmentResponse> GetShipmentAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        CancelShipmentResponse CancelShipment(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        CancelShipmentResponse CancelShipmentOld(string shipmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentOldAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        CreateShipmentResponse CreateShipment(CreateShipmentRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateShipmentResponse> CreateShipmentAsync(CreateShipmentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        GetAdditionalSellerInputsResponse GetAdditionalSellerInputsOld(GetAdditionalSellerInputsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsOldAsync(GetAdditionalSellerInputsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        GetAdditionalSellerInputsResponse GetAdditionalSellerInputs(GetAdditionalSellerInputsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsAsync(GetAdditionalSellerInputsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerMerchantFufillmentClient : IAmazonSellingPartnerMerchantFufillmentClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerMerchantFufillmentClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual GetEligibleShipmentServicesResponse GetEligibleShipmentServicesOld(GetEligibleShipmentServicesRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetEligibleShipmentServicesOldAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesOldAsync(GetEligibleShipmentServicesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/eligibleServices");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual GetEligibleShipmentServicesResponse GetEligibleShipmentServices(GetEligibleShipmentServicesRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetEligibleShipmentServicesAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesAsync(GetEligibleShipmentServicesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/eligibleShippingServices");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetEligibleShipmentServicesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetEligibleShipmentServicesResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual GetShipmentResponse GetShipment(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetShipmentAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetShipmentResponse> GetShipmentAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/shipments/{shipmentId}");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetShipmentResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual CancelShipmentResponse CancelShipment(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CancelShipmentAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/shipments/{shipmentId}");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual CancelShipmentResponse CancelShipmentOld(string shipmentId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CancelShipmentOldAsync(shipmentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentOldAsync(string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentId == null)
                throw new System.ArgumentNullException("shipmentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/shipments/{shipmentId}/cancel");
            urlBuilder_.Replace("{shipmentId}", System.Uri.EscapeDataString(ConvertToString(shipmentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CancelShipmentResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual CreateShipmentResponse CreateShipment(CreateShipmentRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateShipmentAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateShipmentResponse> CreateShipmentAsync(CreateShipmentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/shipments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<CreateShipmentResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual GetAdditionalSellerInputsResponse GetAdditionalSellerInputsOld(GetAdditionalSellerInputsRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAdditionalSellerInputsOldAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsOldAsync(GetAdditionalSellerInputsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/sellerInputs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual GetAdditionalSellerInputsResponse GetAdditionalSellerInputs(GetAdditionalSellerInputsRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAdditionalSellerInputsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="AmazonSellingPartnerMerchantFufillmentApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsAsync(GetAdditionalSellerInputsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mfn/v0/additionalSellerInputs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAdditionalSellerInputsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerMerchantFufillmentApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerMerchantFufillmentApiException<GetAdditionalSellerInputsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerMerchantFufillmentApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerMerchantFufillmentApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerMerchantFufillmentApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition in a human-readable form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Whether to include a packing slip.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelFormatOptionRequest
    {
        /// <summary>
        /// When true, include a packing slip with the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncludePackingSlipWithLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludePackingSlipWithLabel { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LabelFormatOptionRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelFormatOptionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The label format details and whether to include a packing slip.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelFormatOption
    {
        /// <summary>
        /// When true, include a packing slip with the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncludePackingSlipWithLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludePackingSlipWithLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("LabelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelFormat? LabelFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LabelFormatOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelFormatOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates whether the carrier will pick up the package, and what fee is charged, if any.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableCarrierWillPickUpOption
    {
        [Newtonsoft.Json.JsonProperty("CarrierWillPickUpOption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierWillPickUpOption CarrierWillPickUpOption { get; set; }

        /// <summary>
        /// The fee charged.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Charge", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount Charge { get; set; } = new CurrencyAmount();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableCarrierWillPickUpOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableCarrierWillPickUpOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of available carrier pickup options.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableCarrierWillPickUpOptionsList : System.Collections.ObjectModel.Collection<AvailableCarrierWillPickUpOption>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableCarrierWillPickUpOptionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableCarrierWillPickUpOptionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The available delivery confirmation options, and the fee charged, if any.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableDeliveryExperienceOption
    {
        [Newtonsoft.Json.JsonProperty("DeliveryExperienceOption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryExperienceOption DeliveryExperienceOption { get; set; }

        [Newtonsoft.Json.JsonProperty("Charge", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount Charge { get; set; } = new CurrencyAmount();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableDeliveryExperienceOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableDeliveryExperienceOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of available delivery experience options.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableDeliveryExperienceOptionsList : System.Collections.ObjectModel.Collection<AvailableDeliveryExperienceOption>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableDeliveryExperienceOptionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableDeliveryExperienceOptionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The available shipping service options.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableShippingServiceOptions
    {
        [Newtonsoft.Json.JsonProperty("AvailableCarrierWillPickUpOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AvailableCarrierWillPickUpOptionsList AvailableCarrierWillPickUpOptions { get; set; } = new AvailableCarrierWillPickUpOptionsList();

        [Newtonsoft.Json.JsonProperty("AvailableDeliveryExperienceOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AvailableDeliveryExperienceOptionsList AvailableDeliveryExperienceOptions { get; set; } = new AvailableDeliveryExperienceOptionsList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableShippingServiceOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableShippingServiceOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The available label formats.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableFormatOptionsForLabel : System.Collections.ObjectModel.Collection<LabelFormatOption>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableFormatOptionsForLabel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableFormatOptionsForLabel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A validation constraint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Constraint
    {
        /// <summary>
        /// A regular expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValidationRegEx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidationRegEx { get; set; }

        /// <summary>
        /// A validation string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValidationString", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ValidationString { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Constraint FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Constraint>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of constraints.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Constraints : System.Collections.ObjectModel.Collection<Constraint>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Constraints FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Constraints>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Maps the additional seller input to the definition. The key to the map is the field name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalInputs
    {
        /// <summary>
        /// The field name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdditionalInputFieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalInputFieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("SellerInputDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellerInputDefinition SellerInputDefinition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalInputs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalInputs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies characteristics that apply to a seller input.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerInputDefinition
    {
        /// <summary>
        /// When true, the additional input field is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// The data type of the additional input field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("Constraints", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Constraints Constraints { get; set; } = new Constraints();

        /// <summary>
        /// The display text for the additional input field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InputDisplayText", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InputDisplayText { get; set; }

        /// <summary>
        /// Whether the seller input applies to the item or the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InputTarget", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InputTargetType? InputTarget { get; set; }

        [Newtonsoft.Json.JsonProperty("StoredValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdditionalSellerInput StoredValue { get; set; } = new AdditionalSellerInput();

        [Newtonsoft.Json.JsonProperty("RestrictedSetValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestrictedSetValues RestrictedSetValues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SellerInputDefinition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellerInputDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates whether the additional seller input is at the item or shipment level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InputTargetType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_LEVEL")]
        SHIPMENT_LEVEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM_LEVEL")]
        ITEM_LEVEL = 1,

    }

    /// <summary>
    /// A list of additional inputs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalInputsList : System.Collections.ObjectModel.Collection<AdditionalInputs>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalInputsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalInputsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Additional information required to purchase shipping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalSellerInput
    {
        /// <summary>
        /// The data type of the additional information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataType { get; set; }

        /// <summary>
        /// The value when the data type is string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueAsString { get; set; }

        /// <summary>
        /// The value when the data type is boolean.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueAsBoolean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValueAsBoolean { get; set; }

        /// <summary>
        /// The value when the data type is integer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueAsInteger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ValueAsInteger { get; set; }

        /// <summary>
        /// The value when the data type is a date-time formatted string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValueAsTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValueAsTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueAsAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address ValueAsAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueAsWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight ValueAsWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueAsDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Length ValueAsDimension { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueAsCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmount ValueAsCurrency { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalSellerInput FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalSellerInput>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An additional set of seller inputs required to purchase shipping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalSellerInputs
    {
        /// <summary>
        /// The name of the additional input field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdditionalInputFieldName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AdditionalInputFieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("AdditionalSellerInput", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdditionalSellerInput AdditionalSellerInput { get; set; } = new AdditionalSellerInput();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalSellerInputs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalSellerInputs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of additional seller input pairs required to purchase shipping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalSellerInputsList : System.Collections.ObjectModel.Collection<AdditionalSellerInputs>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalSellerInputsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalSellerInputsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The postal address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressLine1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(180)]
        public string AddressLine1 { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string AddressLine2 { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string AddressLine3 { get; set; }

        [Newtonsoft.Json.JsonProperty("DistrictOrCounty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictOrCounty { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("StateOrProvinceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string StateOrProvinceCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PostalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Phone { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Address FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelShipmentResponse
    {
        /// <summary>
        /// The payload for the cancelShipment operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shipment Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the cancelShipment operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CancelShipmentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelShipmentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateShipmentRequest
    {
        /// <summary>
        /// Shipment information required for creating a shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentRequestDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipmentRequestDetails ShipmentRequestDetails { get; set; } = new ShipmentRequestDetails();

        [Newtonsoft.Json.JsonProperty("ShippingServiceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceId { get; set; }

        /// <summary>
        /// Identifies a shipping service order made by a carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceOfferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingServiceOfferId { get; set; }

        /// <summary>
        /// Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information about hazardous materials.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HazmatType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazmatType? HazmatType { get; set; }

        [Newtonsoft.Json.JsonProperty("LabelFormatOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelFormatOptionRequest LabelFormatOption { get; set; }

        /// <summary>
        /// A list of additional seller inputs required to ship this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentLevelSellerInputsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalSellerInputsList ShipmentLevelSellerInputsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateShipmentRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShipmentRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateShipmentResponse
    {
        /// <summary>
        /// Shipment information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shipment Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the createShipment operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateShipmentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShipmentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemLevelFields
    {
        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Asin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asin { get; set; }

        [Newtonsoft.Json.JsonProperty("AdditionalInputs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdditionalInputsList AdditionalInputs { get; set; } = new AdditionalInputsList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemLevelFields FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemLevelFields>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of item level fields.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemLevelFieldsList : System.Collections.ObjectModel.Collection<ItemLevelFields>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemLevelFieldsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemLevelFieldsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Request schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAdditionalSellerInputsRequest
    {
        [Newtonsoft.Json.JsonProperty("ShippingServiceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceId { get; set; }

        /// <summary>
        /// The address from which to ship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipFromAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipFromAddress { get; set; } = new Address();

        /// <summary>
        /// An Amazon defined order identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAdditionalSellerInputsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAdditionalSellerInputsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the getAdditionalSellerInputs operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAdditionalSellerInputsResult
    {
        [Newtonsoft.Json.JsonProperty("ShipmentLevelFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalInputsList ShipmentLevelFields { get; set; }

        [Newtonsoft.Json.JsonProperty("ItemLevelFieldsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemLevelFieldsList ItemLevelFieldsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAdditionalSellerInputsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAdditionalSellerInputsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAdditionalSellerInputsResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetAdditionalSellerInputsResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAdditionalSellerInputsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAdditionalSellerInputsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Currency type and amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyAmount
    {
        /// <summary>
        /// Three-digit currency code in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The currency amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CurrencyAmount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyAmount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The delivery confirmation level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeliveryExperienceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmationWithAdultSignature")]
        DeliveryConfirmationWithAdultSignature = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmationWithSignature")]
        DeliveryConfirmationWithSignature = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmationWithoutSignature")]
        DeliveryConfirmationWithoutSignature = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NoTracking")]
        NoTracking = 3,

    }

    /// <summary>
    /// The document data and checksum.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileContents
    {
        /// <summary>
        /// Data for printing labels, in the form of a Base64-encoded, GZip-compressed string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contents { get; set; }

        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileType FileType { get; set; }

        /// <summary>
        /// An MD5 hash to validate the PDF document data, in the form of a Base64-encoded string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Checksum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Checksum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FileContents FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileContents>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The file type for a label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/pdf")]
        Application_pdf = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/zpl")]
        Application_zpl = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"image/png")]
        Image_png = 2,

    }

    /// <summary>
    /// Request schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEligibleShipmentServicesRequest
    {
        /// <summary>
        /// Shipment information required for requesting shipping service offers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipmentRequestDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipmentRequestDetails ShipmentRequestDetails { get; set; } = new ShipmentRequestDetails();

        [Newtonsoft.Json.JsonProperty("ShippingOfferingFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingOfferingFilter ShippingOfferingFilter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetEligibleShipmentServicesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetEligibleShipmentServicesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEligibleShipmentServicesResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetEligibleShipmentServicesResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during this operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetEligibleShipmentServicesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetEligibleShipmentServicesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the getEligibleShipmentServices operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEligibleShipmentServicesResult
    {
        /// <summary>
        /// A list of shipping services offers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShippingServiceList ShippingServiceList { get; set; } = new ShippingServiceList();

        [Newtonsoft.Json.JsonProperty("RejectedShippingServiceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RejectedShippingServiceList RejectedShippingServiceList { get; set; }

        [Newtonsoft.Json.JsonProperty("TemporarilyUnavailableCarrierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemporarilyUnavailableCarrierList TemporarilyUnavailableCarrierList { get; set; }

        [Newtonsoft.Json.JsonProperty("TermsAndConditionsNotAcceptedCarrierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TermsAndConditionsNotAcceptedCarrierList TermsAndConditionsNotAcceptedCarrierList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetEligibleShipmentServicesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetEligibleShipmentServicesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetShipmentResponse
    {
        /// <summary>
        /// The payload for the getShipment operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shipment Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during this operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetShipmentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetShipmentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information on hazardous materials.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazmatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LQHazmat")]
        LQHazmat = 1,

    }

    /// <summary>
    /// An Amazon order item identifier and a quantity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Item
    {
        [Newtonsoft.Json.JsonProperty("OrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("ItemWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight ItemWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("ItemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("TransparencyCodeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransparencyCodeList TransparencyCodeList { get; set; }

        /// <summary>
        /// A list of additional seller inputs required to ship this item using the chosen shipping service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ItemLevelSellerInputsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalSellerInputsList ItemLevelSellerInputsList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Item FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Item>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of items to be included in a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemList : System.Collections.ObjectModel.Collection<Item>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Data for creating a shipping label and dimensions for printing the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label
    {
        [Newtonsoft.Json.JsonProperty("CustomTextForLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string CustomTextForLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("Dimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LabelDimensions Dimensions { get; set; } = new LabelDimensions();

        [Newtonsoft.Json.JsonProperty("FileContents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FileContents FileContents { get; set; } = new FileContents();

        [Newtonsoft.Json.JsonProperty("LabelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelFormat? LabelFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("StandardIdForLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StandardIdForLabel? StandardIdForLabel { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Label FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Label>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Custom text for shipping labels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelCustomization
    {
        [Newtonsoft.Json.JsonProperty("CustomTextForLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string CustomTextForLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("StandardIdForLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StandardIdForLabel? StandardIdForLabel { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LabelCustomization FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelCustomization>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Dimensions for printing a shipping label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelDimensions
    {
        /// <summary>
        /// The length dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.Always)]
        public double Length { get; set; }

        /// <summary>
        /// The width dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }

        /// <summary>
        /// The unit of measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfLength Unit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LabelDimensions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelDimensions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The label format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL203")]
        ZPL203 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL300")]
        ZPL300 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ShippingServiceDefault")]
        ShippingServiceDefault = 4,

    }

    /// <summary>
    /// List of label formats.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelFormatList : System.Collections.ObjectModel.Collection<LabelFormat>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LabelFormatList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelFormatList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The length.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Length
    {
        /// <summary>
        /// The value in units.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfLength? Unit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Length FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Length>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The dimensions of a package contained in a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageDimensions
    {
        /// <summary>
        /// The length dimension. If you don't specify PredefinedPackageDimensions, you must specify the Length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }

        /// <summary>
        /// The width dimension. If you don't specify PredefinedPackageDimensions, you must specify the Width.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }

        /// <summary>
        /// The height dimension. If you don't specify PredefinedPackageDimensions, you must specify the Height.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }

        /// <summary>
        /// The unit of measurement. If you don't specify PredefinedPackageDimensions, you must specify the Unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfLength? Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("PredefinedPackageDimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PredefinedPackageDimensions? PredefinedPackageDimensions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PackageDimensions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PackageDimensions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An enumeration of predefined parcel tokens. If you specify a PredefinedPackageDimensions token, you are not obligated to use a branded package from a carrier. For example, if you specify the FedEx_Box_10kg token, you do not have to use that particular package from FedEx. You are only obligated to use a box that matches the dimensions specified by the token.
    /// <br/>
    /// <br/>Note: Please note that carriers can have restrictions on the type of package allowed for certain ship methods. Check the carrier website for all details. Example: Flat rate pricing is available when materials are sent by USPS in a USPS-produced Flat Rate Envelope or Box.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PredefinedPackageDimensions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_10kg")]
        FedEx_Box_10kg = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_25kg")]
        FedEx_Box_25kg = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Extra_Large_1")]
        FedEx_Box_Extra_Large_1 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Extra_Large_2")]
        FedEx_Box_Extra_Large_2 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Large_1")]
        FedEx_Box_Large_1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Large_2")]
        FedEx_Box_Large_2 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Medium_1")]
        FedEx_Box_Medium_1 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Medium_2")]
        FedEx_Box_Medium_2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Small_1")]
        FedEx_Box_Small_1 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Box_Small_2")]
        FedEx_Box_Small_2 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Envelope")]
        FedEx_Envelope = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Padded_Pak")]
        FedEx_Padded_Pak = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Pak_1")]
        FedEx_Pak_1 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Pak_2")]
        FedEx_Pak_2 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_Tube")]
        FedEx_Tube = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FedEx_XL_Pak")]
        FedEx_XL_Pak = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Box_10kg")]
        UPS_Box_10kg = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Box_25kg")]
        UPS_Box_25kg = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Box")]
        UPS_Express_Box = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Box_Large")]
        UPS_Express_Box_Large = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Box_Medium")]
        UPS_Express_Box_Medium = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Box_Small")]
        UPS_Express_Box_Small = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Envelope")]
        UPS_Express_Envelope = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Hard_Pak")]
        UPS_Express_Hard_Pak = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Legal_Envelope")]
        UPS_Express_Legal_Envelope = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Pak")]
        UPS_Express_Pak = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Express_Tube")]
        UPS_Express_Tube = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Laboratory_Pak")]
        UPS_Laboratory_Pak = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Pad_Pak")]
        UPS_Pad_Pak = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"UPS_Pallet")]
        UPS_Pallet = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_Card")]
        USPS_Card = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_Flat")]
        USPS_Flat = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_FlatRateCardboardEnvelope")]
        USPS_FlatRateCardboardEnvelope = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_FlatRateEnvelope")]
        USPS_FlatRateEnvelope = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_FlatRateGiftCardEnvelope")]
        USPS_FlatRateGiftCardEnvelope = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_FlatRateLegalEnvelope")]
        USPS_FlatRateLegalEnvelope = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_FlatRatePaddedEnvelope")]
        USPS_FlatRatePaddedEnvelope = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_FlatRateWindowEnvelope")]
        USPS_FlatRateWindowEnvelope = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_LargeFlatRateBoardGameBox")]
        USPS_LargeFlatRateBoardGameBox = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_LargeFlatRateBox")]
        USPS_LargeFlatRateBox = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_Letter")]
        USPS_Letter = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_MediumFlatRateBox1")]
        USPS_MediumFlatRateBox1 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_MediumFlatRateBox2")]
        USPS_MediumFlatRateBox2 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_RegionalRateBoxA1")]
        USPS_RegionalRateBoxA1 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_RegionalRateBoxA2")]
        USPS_RegionalRateBoxA2 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_RegionalRateBoxB1")]
        USPS_RegionalRateBoxB1 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_RegionalRateBoxB2")]
        USPS_RegionalRateBoxB2 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_RegionalRateBoxC")]
        USPS_RegionalRateBoxC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_SmallFlatRateBox")]
        USPS_SmallFlatRateBox = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_SmallFlatRateEnvelope")]
        USPS_SmallFlatRateEnvelope = 49,

    }

    /// <summary>
    /// The set of fixed values in an additional seller input.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestrictedSetValues : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RestrictedSetValues FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestrictedSetValues>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a shipment, including the shipment status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Shipment
    {
        [Newtonsoft.Json.JsonProperty("ShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentId { get; set; }

        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonOrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("SellerOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string SellerOrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("ItemList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemList ItemList { get; set; } = new ItemList();

        /// <summary>
        /// The address of the sender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipFromAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipFromAddress { get; set; } = new Address();

        /// <summary>
        /// The destination address for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipToAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipToAddress { get; set; } = new Address();

        [Newtonsoft.Json.JsonProperty("PackageDimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PackageDimensions PackageDimensions { get; set; } = new PackageDimensions();

        /// <summary>
        /// The package weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// If DeclaredValue was specified in a previous call to the createShipment operation, then Insurance indicates the amount that the carrier will use to insure the shipment. If DeclaredValue was not specified with a previous call to the createShipment operation, then the shipment will be insured for the carrier's minimum insurance amount, or the combined sale prices that the items are listed for in the shipment, whichever is less.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Insurance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount Insurance { get; set; } = new CurrencyAmount();

        [Newtonsoft.Json.JsonProperty("ShippingService", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShippingService ShippingService { get; set; } = new ShippingService();

        /// <summary>
        /// Data for creating a shipping label and dimensions for printing the label. If the shipment is canceled, an empty Label is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Label Label { get; set; } = new Label();

        /// <summary>
        /// The shipment status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("TrackingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingId { get; set; }

        /// <summary>
        /// The date and time the shipment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime CreatedDate { get; set; }

        /// <summary>
        /// The date and time of the last update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastUpdatedDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Shipment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Shipment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Shipment information required for requesting shipping service offers or for creating a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRequestDetails
    {
        /// <summary>
        /// An Amazon-defined order identifier in 3-7-7 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmazonOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A seller-defined order identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SellerOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string SellerOrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("ItemList", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemList ItemList { get; set; } = new ItemList();

        /// <summary>
        /// The address of the sender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipFromAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ShipFromAddress { get; set; } = new Address();

        /// <summary>
        /// The package dimensions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PackageDimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PackageDimensions PackageDimensions { get; set; } = new PackageDimensions();

        /// <summary>
        /// The package weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// The date by which the package must arrive to keep the promise to the customer, in ISO 8601 datetime format. If MustArriveByDate is specified, only shipping service offers that can be delivered by that date are returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MustArriveByDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MustArriveByDate { get; set; }

        /// <summary>
        /// When used in a request, this is the date and time that the seller wants to ship the package. When used in a response, this is the date and time that the package can be shipped by the indicated method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShipDate { get; set; }

        /// <summary>
        /// Extra services offered by the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShippingServiceOptions ShippingServiceOptions { get; set; } = new ShippingServiceOptions();

        /// <summary>
        /// Label customization options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LabelCustomization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelCustomization LabelCustomization { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShipmentRequestDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentRequestDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipment status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Purchased")]
        Purchased = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RefundPending")]
        RefundPending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RefundRejected")]
        RefundRejected = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RefundApplied")]
        RefundApplied = 3,

    }

    /// <summary>
    /// The delivery confirmation level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeliveryExperienceOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmationWithAdultSignature")]
        DeliveryConfirmationWithAdultSignature = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmationWithSignature")]
        DeliveryConfirmationWithSignature = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryConfirmationWithoutSignature")]
        DeliveryConfirmationWithoutSignature = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NoTracking")]
        NoTracking = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NoPreference")]
        NoPreference = 4,

    }

    /// <summary>
    /// Filter for use when requesting eligible shipping services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingOfferingFilter
    {
        /// <summary>
        /// When true, include a packing slip with the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncludePackingSlipWithLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludePackingSlipWithLabel { get; set; }

        /// <summary>
        /// When true, include complex shipping options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncludeComplexShippingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeComplexShippingOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("CarrierWillPickUp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierWillPickUpOption? CarrierWillPickUp { get; set; }

        [Newtonsoft.Json.JsonProperty("DeliveryExperience", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryExperienceOption? DeliveryExperience { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShippingOfferingFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingOfferingFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A shipping service offer made by a carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingService
    {
        /// <summary>
        /// A plain text representation of a carrier's shipping service. For example, "UPS Ground" or "FedEx Standard Overnight". 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceName { get; set; }

        /// <summary>
        /// The name of the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        [Newtonsoft.Json.JsonProperty("ShippingServiceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceId { get; set; }

        /// <summary>
        /// An Amazon-defined shipping service offer identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceOfferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceOfferId { get; set; }

        /// <summary>
        /// The date that the carrier will ship the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShipDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ShipDate { get; set; }

        /// <summary>
        /// The earliest date by which the shipment will be delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EarliestEstimatedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EarliestEstimatedDeliveryDate { get; set; }

        /// <summary>
        /// The latest date by which the shipment will be delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LatestEstimatedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LatestEstimatedDeliveryDate { get; set; }

        /// <summary>
        /// The amount that the carrier will charge for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyAmount Rate { get; set; } = new CurrencyAmount();

        /// <summary>
        /// Extra services offered by the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShippingServiceOptions ShippingServiceOptions { get; set; } = new ShippingServiceOptions();

        [Newtonsoft.Json.JsonProperty("AvailableShippingServiceOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailableShippingServiceOptions AvailableShippingServiceOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailableLabelFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelFormatList AvailableLabelFormats { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailableFormatOptionsForLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailableFormatOptionsForLabel AvailableFormatOptionsForLabel { get; set; }

        /// <summary>
        /// When true, additional seller inputs are required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequiresAdditionalSellerInputs", Required = Newtonsoft.Json.Required.Always)]
        public bool RequiresAdditionalSellerInputs { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShippingService FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingService>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of shipping services offers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingServiceList : System.Collections.ObjectModel.Collection<ShippingService>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShippingServiceList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingServiceList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Extra services provided by a carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingServiceOptions
    {
        /// <summary>
        /// The delivery confirmation level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DeliveryExperience", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryExperienceType DeliveryExperience { get; set; }

        /// <summary>
        /// The declared value of the shipment. The carrier uses this value to determine the amount to use to insure the shipment. If DeclaredValue is greater than the carrier's minimum insurance amount, the seller is charged for the additional insurance as determined by the carrier. For information about optional insurance coverage, see the Seller Central Help [UK](https://sellercentral.amazon.co.uk/gp/help/200204080) [US](https://sellercentral.amazon.com/gp/help/200204080).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmount DeclaredValue { get; set; }

        /// <summary>
        /// When true, the carrier will pick up the package.
        /// <br/>
        /// <br/>Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierWillPickUp", Required = Newtonsoft.Json.Required.Always)]
        public bool CarrierWillPickUp { get; set; }

        [Newtonsoft.Json.JsonProperty("CarrierWillPickUpOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierWillPickUpOption? CarrierWillPickUpOption { get; set; }

        /// <summary>
        /// The seller's preferred label format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LabelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelFormat? LabelFormat { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShippingServiceOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingServiceOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Carrier will pick up option.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CarrierWillPickUpOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CarrierWillPickUp")]
        CarrierWillPickUp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ShipperWillDropOff")]
        ShipperWillDropOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoPreference")]
        NoPreference = 2,

    }

    /// <summary>
    /// The type of standard identifier to print on the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandardIdForLabel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AmazonOrderId")]
        AmazonOrderId = 0,

    }

    /// <summary>
    /// Information about a rejected shipping service
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RejectedShippingService
    {
        /// <summary>
        /// The rejected shipping carrier name. e.g. USPS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        /// <summary>
        /// The rejected shipping service localized name. e.g. FedEx Standard Overnight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceName { get; set; }

        /// <summary>
        /// The rejected shipping service identifier. e.g. FEDEX_PTP_STANDARD_OVERNIGHT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShippingServiceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingServiceId { get; set; }

        /// <summary>
        /// A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RejectionReasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RejectionReasonCode { get; set; }

        /// <summary>
        /// A localized human readable description of the rejected reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RejectionReasonMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectionReasonMessage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RejectedShippingService FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RejectedShippingService>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of services that were for some reason unavailable for this request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RejectedShippingServiceList : System.Collections.ObjectModel.Collection<RejectedShippingService>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RejectedShippingServiceList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RejectedShippingServiceList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A carrier who is temporarily unavailable, most likely due to a service outage experienced by the carrier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemporarilyUnavailableCarrier
    {
        /// <summary>
        /// The name of the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemporarilyUnavailableCarrier FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemporarilyUnavailableCarrier>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of temporarily unavailable carriers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemporarilyUnavailableCarrierList : System.Collections.ObjectModel.Collection<TemporarilyUnavailableCarrier>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TemporarilyUnavailableCarrierList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemporarilyUnavailableCarrierList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A carrier whose terms and conditions have not been accepted by the seller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsAndConditionsNotAcceptedCarrier
    {
        /// <summary>
        /// The name of the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsAndConditionsNotAcceptedCarrier FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditionsNotAcceptedCarrier>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of carriers whose terms and conditions were not accepted by the seller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TermsAndConditionsNotAcceptedCarrierList : System.Collections.ObjectModel.Collection<TermsAndConditionsNotAcceptedCarrier>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TermsAndConditionsNotAcceptedCarrierList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditionsNotAcceptedCarrierList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of transparency codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransparencyCodeList : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransparencyCodeList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransparencyCodeList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The unit of length.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnitOfLength
    {

        [System.Runtime.Serialization.EnumMember(Value = @"inches")]
        Inches = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"centimeters")]
        Centimeters = 1,

    }

    /// <summary>
    /// The unit of weight.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnitOfWeight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"oz")]
        Oz = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"g")]
        G = 1,

    }

    /// <summary>
    /// The weight.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfWeight Unit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Weight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerMerchantFufillmentApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerMerchantFufillmentApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerMerchantFufillmentApiException<TResult> : AmazonSellingPartnerMerchantFufillmentApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerMerchantFufillmentApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603