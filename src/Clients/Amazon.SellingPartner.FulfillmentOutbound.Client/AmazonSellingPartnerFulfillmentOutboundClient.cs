//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Amazon.SellingPartner.FulfillmentOutbound.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAmazonSellingPartnerFulfillmentOutboundClient
    {
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        GetFulfillmentPreviewResponse GetFulfillmentPreview(GetFulfillmentPreviewRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFulfillmentPreviewResponse> GetFulfillmentPreviewAsync(GetFulfillmentPreviewRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="queryStartDate">A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        ListAllFulfillmentOrdersResponse ListAllFulfillmentOrders(System.DateTime? queryStartDate = null, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="queryStartDate">A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListAllFulfillmentOrdersResponse> ListAllFulfillmentOrdersAsync(System.DateTime? queryStartDate = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        CreateFulfillmentOrderResponse CreateFulfillmentOrder(CreateFulfillmentOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateFulfillmentOrderResponse> CreateFulfillmentOrderAsync(CreateFulfillmentOrderRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        GetPackageTrackingDetailsResponse GetPackageTrackingDetails(int packageNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPackageTrackingDetailsResponse> GetPackageTrackingDetailsAsync(int packageNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="sellerSku">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        ListReturnReasonCodesResponse ListReturnReasonCodes(string sellerSku, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerSku">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListReturnReasonCodesResponse> ListReturnReasonCodesAsync(string sellerSku, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer's request to return items.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        CreateFulfillmentReturnResponse CreateFulfillmentReturn(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer's request to return items.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateFulfillmentReturnResponse> CreateFulfillmentReturnAsync(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        GetFulfillmentOrderResponse GetFulfillmentOrder(string sellerFulfillmentOrderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFulfillmentOrderResponse> GetFulfillmentOrderAsync(string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        UpdateFulfillmentOrderResponse UpdateFulfillmentOrder(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateFulfillmentOrderResponse> UpdateFulfillmentOrderAsync(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        CancelFulfillmentOrderResponse CancelFulfillmentOrder(string sellerFulfillmentOrderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelFulfillmentOrderResponse> CancelFulfillmentOrderAsync(string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">The marketplace for which to return the list of features.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        GetFeaturesResponse GetFeatures(string marketplaceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The marketplace for which to return the list of features.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFeaturesResponse> GetFeaturesAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">The marketplace for which to return a list of the inventory that is eligible for the specified feature.</param>
        /// <param name="featureName">The name of the feature for which to return a list of eligible inventory.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        GetFeatureInventoryResponse GetFeatureInventory(string marketplaceId, string featureName, string nextToken = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The marketplace for which to return a list of the inventory that is eligible for the specified feature.</param>
        /// <param name="featureName">The name of the feature for which to return a list of eligible inventory.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFeatureInventoryResponse> GetFeatureInventoryAsync(string marketplaceId, string featureName, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="marketplaceId">The marketplace for which to return the count.</param>
        /// <param name="featureName">The name of the feature.</param>
        /// <param name="sellerSku">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        GetFeatureSkuResponse GetFeatureSKU(string marketplaceId, string featureName, string sellerSku);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The marketplace for which to return the count.</param>
        /// <param name="featureName">The name of the feature.</param>
        /// <param name="sellerSku">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFeatureSkuResponse> GetFeatureSKUAsync(string marketplaceId, string featureName, string sellerSku, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFulfillmentOutboundClient : IAmazonSellingPartnerFulfillmentOutboundClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AmazonSellingPartnerFulfillmentOutboundClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual GetFulfillmentPreviewResponse GetFulfillmentPreview(GetFulfillmentPreviewRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFulfillmentPreviewAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetFulfillmentPreviewResponse> GetFulfillmentPreviewAsync(GetFulfillmentPreviewRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders/preview");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentPreviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentPreviewResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="queryStartDate">A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual ListAllFulfillmentOrdersResponse ListAllFulfillmentOrders(System.DateTime? queryStartDate = null, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListAllFulfillmentOrdersAsync(queryStartDate, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="queryStartDate">A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListAllFulfillmentOrdersResponse> ListAllFulfillmentOrdersAsync(System.DateTime? queryStartDate = null, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders?");
            if (queryStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("queryStartDate") + "=").Append(System.Uri.EscapeDataString(queryStartDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListAllFulfillmentOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListAllFulfillmentOrdersResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual CreateFulfillmentOrderResponse CreateFulfillmentOrder(CreateFulfillmentOrderRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateFulfillmentOrderAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateFulfillmentOrderResponse> CreateFulfillmentOrderAsync(CreateFulfillmentOrderRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentOrderResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual GetPackageTrackingDetailsResponse GetPackageTrackingDetails(int packageNumber)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetPackageTrackingDetailsAsync(packageNumber, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPackageTrackingDetailsResponse> GetPackageTrackingDetailsAsync(int packageNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (packageNumber == null)
                throw new System.ArgumentNullException("packageNumber");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/tracking?");
            urlBuilder_.Append(System.Uri.EscapeDataString("packageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(packageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPackageTrackingDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetPackageTrackingDetailsResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sellerSku">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual ListReturnReasonCodesResponse ListReturnReasonCodes(string sellerSku, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ListReturnReasonCodesAsync(sellerSku, language, marketplaceId, sellerFulfillmentOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerSku">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListReturnReasonCodesResponse> ListReturnReasonCodesAsync(string sellerSku, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sellerSku == null)
                throw new System.ArgumentNullException("sellerSku");

            if (language == null)
                throw new System.ArgumentNullException("language");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/returnReasonCodes?");
            urlBuilder_.Append(System.Uri.EscapeDataString("sellerSku") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sellerSku, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (marketplaceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sellerFulfillmentOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sellerFulfillmentOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sellerFulfillmentOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListReturnReasonCodesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<ListReturnReasonCodesResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer's request to return items.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual CreateFulfillmentReturnResponse CreateFulfillmentReturn(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateFulfillmentReturnAsync(body, sellerFulfillmentOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer's request to return items.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateFulfillmentReturnResponse> CreateFulfillmentReturnAsync(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sellerFulfillmentOrderId == null)
                throw new System.ArgumentNullException("sellerFulfillmentOrderId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return");
            urlBuilder_.Replace("{sellerFulfillmentOrderId}", System.Uri.EscapeDataString(ConvertToString(sellerFulfillmentOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateFulfillmentReturnResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CreateFulfillmentReturnResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual GetFulfillmentOrderResponse GetFulfillmentOrder(string sellerFulfillmentOrderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFulfillmentOrderAsync(sellerFulfillmentOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetFulfillmentOrderResponse> GetFulfillmentOrderAsync(string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sellerFulfillmentOrderId == null)
                throw new System.ArgumentNullException("sellerFulfillmentOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}");
            urlBuilder_.Replace("{sellerFulfillmentOrderId}", System.Uri.EscapeDataString(ConvertToString(sellerFulfillmentOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFulfillmentOrderResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual UpdateFulfillmentOrderResponse UpdateFulfillmentOrder(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await UpdateFulfillmentOrderAsync(body, sellerFulfillmentOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateFulfillmentOrderResponse> UpdateFulfillmentOrderAsync(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sellerFulfillmentOrderId == null)
                throw new System.ArgumentNullException("sellerFulfillmentOrderId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}");
            urlBuilder_.Replace("{sellerFulfillmentOrderId}", System.Uri.EscapeDataString(ConvertToString(sellerFulfillmentOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<UpdateFulfillmentOrderResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual CancelFulfillmentOrderResponse CancelFulfillmentOrder(string sellerFulfillmentOrderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CancelFulfillmentOrderAsync(sellerFulfillmentOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CancelFulfillmentOrderResponse> CancelFulfillmentOrderAsync(string sellerFulfillmentOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sellerFulfillmentOrderId == null)
                throw new System.ArgumentNullException("sellerFulfillmentOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel");
            urlBuilder_.Replace("{sellerFulfillmentOrderId}", System.Uri.EscapeDataString(ConvertToString(sellerFulfillmentOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelFulfillmentOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<CancelFulfillmentOrderResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">The marketplace for which to return the list of features.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual GetFeaturesResponse GetFeatures(string marketplaceId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFeaturesAsync(marketplaceId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The marketplace for which to return the list of features.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetFeaturesResponse> GetFeaturesAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/features?");
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeaturesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeaturesResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">The marketplace for which to return a list of the inventory that is eligible for the specified feature.</param>
        /// <param name="featureName">The name of the feature for which to return a list of eligible inventory.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual GetFeatureInventoryResponse GetFeatureInventory(string marketplaceId, string featureName, string nextToken = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFeatureInventoryAsync(marketplaceId, featureName, nextToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The marketplace for which to return a list of the inventory that is eligible for the specified feature.</param>
        /// <param name="featureName">The name of the feature for which to return a list of eligible inventory.</param>
        /// <param name="nextToken">A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetFeatureInventoryResponse> GetFeatureInventoryAsync(string marketplaceId, string featureName, string nextToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (featureName == null)
                throw new System.ArgumentNullException("featureName");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/features/inventory/{featureName}?");
            urlBuilder_.Replace("{featureName}", System.Uri.EscapeDataString(ConvertToString(featureName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureInventoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureInventoryResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="marketplaceId">The marketplace for which to return the count.</param>
        /// <param name="featureName">The name of the feature.</param>
        /// <param name="sellerSku">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual GetFeatureSkuResponse GetFeatureSKU(string marketplaceId, string featureName, string sellerSku)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFeatureSKUAsync(marketplaceId, featureName, sellerSku, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="marketplaceId">The marketplace for which to return the count.</param>
        /// <param name="featureName">The name of the feature.</param>
        /// <param name="sellerSku">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.</param>
        /// <returns>Success.</returns>
        /// <exception cref="AmazonSellingPartnerFulfillmentOutboundApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetFeatureSkuResponse> GetFeatureSKUAsync(string marketplaceId, string featureName, string sellerSku, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (featureName == null)
                throw new System.ArgumentNullException("featureName");

            if (sellerSku == null)
                throw new System.ArgumentNullException("sellerSku");

            if (marketplaceId == null)
                throw new System.ArgumentNullException("marketplaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}?");
            urlBuilder_.Replace("{featureName}", System.Uri.EscapeDataString(ConvertToString(featureName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sellerSku}", System.Uri.EscapeDataString(ConvertToString(sellerSku, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("marketplaceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplaceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("The specified resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFeatureSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AmazonSellingPartnerFulfillmentOutboundApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException<GetFeatureSkuResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AmazonSellingPartnerFulfillmentOutboundApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFulfillmentOutboundApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AmazonSellingPartnerFulfillmentOutboundApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A physical address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The name of the person, business or institution at the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The city where the person, business, or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// The district or county where the person, business, or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("districtOrCounty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictOrCounty { get; set; }

        /// <summary>
        /// The state or region where the person, business or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrRegion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateOrRegion { get; set; }

        /// <summary>
        /// The postal code of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two digit country code. In ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The phone number of the person, business, or institution located at the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Address FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CODSettings
    {
        /// <summary>
        /// When true, this fulfillment order requires a COD (Cash On Delivery) payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCodRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCodRequired { get; set; }

        /// <summary>
        /// The amount of the COD charge to be collected from the recipient for a COD order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money CodCharge { get; set; }

        /// <summary>
        /// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codChargeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money CodChargeTax { get; set; }

        /// <summary>
        /// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ShippingCharge { get; set; }

        /// <summary>
        /// The amount of the tax on the shipping charge to be collected from the recipient for a COD order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingChargeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ShippingChargeTax { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CODSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CODSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for creating a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentOrderItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerSku { get; set; }

        /// <summary>
        /// A fulfillment order item identifier that the seller creates to track fulfillment order items. Used to disambiguate multiple fulfillment items that have the same SellerSKU. For example, the seller might assign different SellerFulfillmentOrderItemId values to two items in a fulfillment order that share the same SellerSKU but have different GiftMessage values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerFulfillmentOrderItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// A message to the gift recipient, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("giftMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DisplayableComment { get; set; }

        /// <summary>
        /// Amazon's fulfillment network SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentNetworkSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentNetworkSku { get; set; }

        /// <summary>
        /// The monetary value assigned by the seller to this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitDeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitDeclaredValue { get; set; }

        /// <summary>
        /// The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitPrice { get; set; }

        /// <summary>
        /// The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitTax { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentOrderItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentOrderItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of item information for creating a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentOrderItemList : System.Collections.ObjectModel.Collection<CreateFulfillmentOrderItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentOrderItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentOrderItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The FulfillmentPolicy value specified when you submitted the createFulfillmentOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentPolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FillOrKill")]
        FillOrKill = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FillAll")]
        FillAll = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FillAllAvailable")]
        FillAllAvailable = 2,

    }

    /// <summary>
    /// The current status of the fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Planning")]
        Planning = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CompletePartialled")]
        CompletePartialled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Unfulfillable")]
        Unfulfillable = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 8,

    }

    /// <summary>
    /// The request body schema for the createFulfillmentOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentOrderRequest
    {
        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates to track their fulfillment order. The SellerFulfillmentOrderId must be unique for each fulfillment order that a seller creates. If the seller's system already creates unique order identifiers, then these might be good values for them to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.
        /// <br/>
        /// <br/>The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime DisplayableOrderDate { get; set; }

        /// <summary>
        /// Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderComment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string DisplayableOrderComment { get; set; }

        /// <summary>
        /// The shipping method for the fulfillment order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingSpeedCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        /// The destination address for the fulfillment order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address DestinationAddress { get; set; } = new Address();

        [Newtonsoft.Json.JsonProperty("fulfillmentAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentAction? FulfillmentAction { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("codSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CODSettings CodSettings { get; set; }

        /// <summary>
        /// The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipFromCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipFromCountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// A list of items to include in the fulfillment order preview, including quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateFulfillmentOrderItemList Items { get; set; } = new CreateFulfillmentOrderItemList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The createFulfillmentReturn operation creates a fulfillment return for items that were fulfilled using the createFulfillmentOrder operation. For calls to createFulfillmentReturn, you must include ReturnReasonCode values returned by a previous call to the listReturnReasonCodes operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentReturnRequest
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateReturnItemList Items { get; set; } = new CreateReturnItemList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentReturnRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentReturnRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentReturnResult
    {
        [Newtonsoft.Json.JsonProperty("returnItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnItemList ReturnItems { get; set; }

        [Newtonsoft.Json.JsonProperty("invalidReturnItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvalidReturnItemList InvalidReturnItems { get; set; }

        [Newtonsoft.Json.JsonProperty("returnAuthorizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnAuthorizationList ReturnAuthorizations { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentReturnResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentReturnResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the createFulfillmentReturn operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentReturnResponse
    {
        /// <summary>
        /// The payload for the createFulfillmentReturn operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateFulfillmentReturnResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the createFulfillmentReturn operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentReturnResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentReturnResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item that Amazon accepted for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateReturnItem
    {
        /// <summary>
        /// An identifier assigned by the seller to the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerReturnItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        /// The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// The identifier for the shipment that is associated with the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// The return reason code assigned to the return item by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnReasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnReasonCode { get; set; }

        /// <summary>
        /// An optional comment about the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string ReturnComment { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateReturnItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateReturnItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of items to be returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateReturnItemList : System.Collections.ObjectModel.Collection<CreateReturnItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateReturnItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateReturnItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An amount of money, including units in the form of currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Money
    {
        /// <summary>
        /// Three digit currency code in ISO 4217 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Money FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Money>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The time range within which a Scheduled Delivery fulfillment order should be delivered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryWindow
    {
        /// <summary>
        /// The date and time of the start of the Scheduled Delivery window, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// The date and time of the end of the Scheduled Delivery window, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EndDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeliveryWindow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeliveryWindow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of delivery windows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryWindowList : System.Collections.ObjectModel.Collection<DeliveryWindow>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeliveryWindowList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeliveryWindowList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Fee type and cost.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee
    {
        /// <summary>
        /// The type of fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeName Name { get; set; }

        /// <summary>
        /// The amount of the fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Money Amount { get; set; } = new Money();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Fee FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fee>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fee type and cost pairs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeList : System.Collections.ObjectModel.Collection<Fee>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeeList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeeList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Specifies whether the fulfillment order should ship now or have an order hold put on it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ship")]
        Ship = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hold")]
        Hold = 1,

    }

    /// <summary>
    /// General information about a fulfillment order, including its status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentOrder
    {
        /// <summary>
        /// The fulfillment order identifier submitted with the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        /// The identifier for the marketplace the fulfillment order is placed against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing materials such as the packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime DisplayableOrderDate { get; set; }

        /// <summary>
        /// A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderComment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayableOrderComment { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingSpeedCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        /// The destination address submitted with the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address DestinationAddress { get; set; } = new Address();

        [Newtonsoft.Json.JsonProperty("fulfillmentAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentAction? FulfillmentAction { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("codSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CODSettings CodSettings { get; set; }

        /// <summary>
        /// The date and time that the fulfillment order was received by an Amazon fulfillment center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ReceivedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentOrderStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentOrderStatus FulfillmentOrderStatus { get; set; }

        /// <summary>
        /// The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdatedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StatusUpdatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeatureSettings> FeatureConstraints { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentOrder FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentOrder>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentOrderItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSku { get; set; }

        /// <summary>
        /// A fulfillment order item identifier submitted with a call to the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// A message to the gift recipient, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("giftMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayableComment { get; set; }

        /// <summary>
        /// Amazon's fulfillment network SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentNetworkSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentNetworkSku { get; set; }

        /// <summary>
        /// Indicates whether the item is sellable or unsellable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderItemDisposition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderItemDisposition { get; set; }

        /// <summary>
        /// The item quantity that was cancelled by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelledQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int CancelledQuantity { get; set; }

        /// <summary>
        /// The item quantity that is unfulfillable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unfulfillableQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int UnfulfillableQuantity { get; set; }

        /// <summary>
        /// The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, estimatedShipDate is not returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EstimatedShipDate { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, estimatedArrivalDate is not returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedArrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitPrice { get; set; }

        /// <summary>
        /// The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitTax { get; set; }

        /// <summary>
        /// The monetary value assigned by the seller to this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitDeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitDeclaredValue { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentOrderItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentOrderItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment order item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentOrderItemList : System.Collections.ObjectModel.Collection<FulfillmentOrderItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentOrderItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentOrderItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about a fulfillment order preview, including delivery and fee information based on shipping method.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentPreview
    {
        [Newtonsoft.Json.JsonProperty("shippingSpeedCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("scheduledDeliveryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduledDeliveryInfo ScheduledDeliveryInfo { get; set; }

        /// <summary>
        /// When true, this fulfillment order preview is fulfillable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFulfillable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFulfillable { get; set; }

        /// <summary>
        /// When true, this fulfillment order preview is for COD (Cash On Delivery).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCODCapable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCODCapable { get; set; }

        /// <summary>
        /// Estimated shipping weight for this fulfillment order preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedShippingWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight EstimatedShippingWeight { get; set; }

        /// <summary>
        /// The estimated fulfillment fees for this fulfillment order preview, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeList EstimatedFees { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentPreviewShipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FulfillmentPreviewShipmentList FulfillmentPreviewShipments { get; set; }

        [Newtonsoft.Json.JsonProperty("unfulfillablePreviewItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnfulfillablePreviewItemList UnfulfillablePreviewItems { get; set; }

        /// <summary>
        /// Error codes associated with the fulfillment order preview that indicate why the order is not fulfillable.
        /// <br/>
        /// <br/>Error code examples:
        /// <br/>
        /// <br/>DeliverySLAUnavailable
        /// <br/>InvalidDestinationAddress
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderUnfulfillableReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StringList OrderUnfulfillableReasons { get; set; }

        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeatureSettings> FeatureConstraints { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentPreview FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentPreview>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for a shipment in a fulfillment order preview.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentPreviewItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The item quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// A fulfillment order item identifier that the seller created with a call to the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// The estimated shipping weight of the item quantity for a single item, as identified by sellerSku, in a shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedShippingWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight EstimatedShippingWeight { get; set; }

        /// <summary>
        /// The method used to calculate the estimated shipping weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingWeightCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentPreviewItemShippingWeightCalculationMethod? ShippingWeightCalculationMethod { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentPreviewItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentPreviewItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment preview item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentPreviewItemList : System.Collections.ObjectModel.Collection<FulfillmentPreviewItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentPreviewItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentPreviewItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment preview information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentPreviewList : System.Collections.ObjectModel.Collection<FulfillmentPreview>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentPreviewList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentPreviewList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order preview.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentPreviewShipment
    {
        /// <summary>
        /// The earliest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earliestShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EarliestShipDate { get; set; }

        /// <summary>
        /// The latest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LatestShipDate { get; set; }

        /// <summary>
        /// The earliest date that the shipment is expected to arrive at its destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earliestArrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EarliestArrivalDate { get; set; }

        /// <summary>
        /// The latest date that the shipment is expected to arrive at its destination, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestArrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LatestArrivalDate { get; set; }

        /// <summary>
        /// Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShippingNotes { get; set; }

        /// <summary>
        /// Information about the items in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentPreviewItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FulfillmentPreviewItemList FulfillmentPreviewItems { get; set; } = new FulfillmentPreviewItemList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentPreviewShipment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentPreviewShipment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment preview shipment information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentPreviewShipmentList : System.Collections.ObjectModel.Collection<FulfillmentPreviewShipment>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentPreviewShipmentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentPreviewShipmentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Indicates if the return item has been processed by a fulfillment center.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentReturnItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Processed")]
        Processed = 1,

    }

    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentShipment
    {
        /// <summary>
        /// A shipment identifier assigned by Amazon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// An identifier for the fulfillment center that the shipment will be sent from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentCenterId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentShipmentStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentShipmentStatus FulfillmentShipmentStatus { get; set; }

        /// <summary>
        /// The meaning of the shippingDate value depends on the current status of the shipment. If the current value of FulfillmentShipmentStatus is:
        /// <br/>
        /// <br/>* Pending - shippingDate represents the estimated time that the shipment will leave the Amazon fulfillment center.
        /// <br/>
        /// <br/>* Shipped - shippingDate represents the date that the shipment left the Amazon fulfillment center.
        /// <br/>If a shipment includes more than one package, shippingDate applies to all of the packages in the shipment. If the value of FulfillmentShipmentStatus is CancelledByFulfiller or CancelledBySeller, shippingDate is not returned. The value must be in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShippingDate { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the shipment, in ISO 8601 date time format. Note that this value can change over time. If a shipment includes more than one package, estimatedArrivalDate applies to all of the packages in the shipment. If the shipment has been cancelled, estimatedArrivalDate is not returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedArrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren't available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShippingNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentShipmentItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FulfillmentShipmentItemList FulfillmentShipmentItem { get; set; } = new FulfillmentShipmentItemList();

        [Newtonsoft.Json.JsonProperty("fulfillmentShipmentPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FulfillmentShipmentPackageList FulfillmentShipmentPackage { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentShipment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentShipment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for a shipment in a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentShipmentItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The fulfillment order item identifier that the seller created and submitted with a call to the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// An identifier for the package that contains the item quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageNumber { get; set; }

        /// <summary>
        /// The serial number of the shipped item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentShipmentItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentShipmentItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment shipment item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentShipmentItemList : System.Collections.ObjectModel.Collection<FulfillmentShipmentItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentShipmentItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentShipmentItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment shipment information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentShipmentList : System.Collections.ObjectModel.Collection<FulfillmentShipment>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentShipmentList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentShipmentList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Package information for a shipment in a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentShipmentPackage
    {
        /// <summary>
        /// Identifies a package in a shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageNumber", Required = Newtonsoft.Json.Required.Always)]
        public int PackageNumber { get; set; }

        /// <summary>
        /// Identifies the carrier who will deliver the shipment to the recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The tracking number, if provided, can be used to obtain tracking and delivery information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the package, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedArrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EstimatedArrivalDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentShipmentPackage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentShipmentPackage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment shipment package information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentShipmentPackageList : System.Collections.ObjectModel.Collection<FulfillmentShipmentPackage>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FulfillmentShipmentPackageList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FulfillmentShipmentPackageList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentOrderResult
    {
        [Newtonsoft.Json.JsonProperty("fulfillmentOrder", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FulfillmentOrder FulfillmentOrder { get; set; } = new FulfillmentOrder();

        [Newtonsoft.Json.JsonProperty("fulfillmentOrderItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FulfillmentOrderItemList FulfillmentOrderItems { get; set; } = new FulfillmentOrderItemList();

        [Newtonsoft.Json.JsonProperty("fulfillmentShipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FulfillmentShipmentList FulfillmentShipments { get; set; }

        [Newtonsoft.Json.JsonProperty("returnItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnItemList ReturnItems { get; set; } = new ReturnItemList();

        [Newtonsoft.Json.JsonProperty("returnAuthorizations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnAuthorizationList ReturnAuthorizations { get; set; } = new ReturnAuthorizationList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentOrderResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentOrderResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getFulfillmentOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentOrderResponse
    {
        /// <summary>
        /// The payload for the getFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetFulfillmentOrderResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the getFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for a fulfillment order preview.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentPreviewItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerSku { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// The monetary value assigned by the seller to this item. This is a required field if this order is an export order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitDeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitDeclaredValue { get; set; }

        /// <summary>
        /// A fulfillment order item identifier that the seller creates to track items in the fulfillment preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerFulfillmentOrderItemId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentPreviewItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentPreviewItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment preview item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentPreviewItemList : System.Collections.ObjectModel.Collection<GetFulfillmentPreviewItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentPreviewItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentPreviewItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The request body schema for the getFulfillmentPreview operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentPreviewRequest
    {
        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The destination address for the fulfillment order preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        /// <summary>
        /// Identifying information and quantity information for the items in the fulfillment order preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GetFulfillmentPreviewItemList Items { get; set; } = new GetFulfillmentPreviewItemList();

        /// <summary>
        /// A list of shipping methods used for creating fulfillment order previews.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* Standard - Standard shipping method.
        /// <br/>* Expedited - Expedited shipping method.
        /// <br/>* Priority - Priority shipping method.
        /// <br/>* ScheduledDelivery - Scheduled Delivery shipping method.
        /// <br/>Note: Shipping method service level agreements vary by marketplace. Sellers should see the Seller Central website in their marketplace for shipping method service level agreements and fulfillment fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingSpeedCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingSpeedCategoryList ShippingSpeedCategories { get; set; }

        /// <summary>
        /// Specifies whether to return fulfillment order previews that are for COD (Cash On Delivery).
        /// <br/>
        /// <br/>Possible values:
        /// <br/>
        /// <br/>* true - Returns all fulfillment order previews (both for COD and not for COD).
        /// <br/>* false - Returns only fulfillment order previews that are not for COD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeCODFulfillmentPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeCODFulfillmentPreview { get; set; }

        /// <summary>
        /// Specifies whether to return the ScheduledDeliveryInfo response object, which contains the available delivery windows for a Scheduled Delivery. The ScheduledDeliveryInfo response object can only be returned for fulfillment order previews with ShippingSpeedCategories = ScheduledDelivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeDeliveryWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDeliveryWindows { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeatureSettings> FeatureConstraints { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentPreviewRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentPreviewRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of fulfillment order previews, including estimated shipping weights, estimated shipping fees, and estimated ship dates and arrival dates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentPreviewResult
    {
        [Newtonsoft.Json.JsonProperty("fulfillmentPreviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FulfillmentPreviewList FulfillmentPreviews { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentPreviewResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentPreviewResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getFulfillmentPreview operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFulfillmentPreviewResponse
    {
        /// <summary>
        /// The response payload for the getFulfillmentPreview operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetFulfillmentPreviewResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the getFulfillmentPreview operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFulfillmentPreviewResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFulfillmentPreviewResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A code for why the item is invalid for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvalidItemReasonCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidValues")]
        InvalidValues = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DuplicateRequest")]
        DuplicateRequest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoCompletedShipItems")]
        NoCompletedShipItems = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NoReturnableQuantity")]
        NoReturnableQuantity = 3,

    }

    /// <summary>
    /// The reason that the item is invalid for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidItemReason
    {
        [Newtonsoft.Json.JsonProperty("invalidItemReasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvalidItemReasonCode InvalidItemReasonCode { get; set; }

        /// <summary>
        /// A human readable description of the invalid item reason code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidItemReason FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidItemReason>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item that is invalid for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidReturnItem
    {
        /// <summary>
        /// An identifier assigned by the seller to the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerReturnItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        /// The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("invalidItemReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public InvalidItemReason InvalidItemReason { get; set; } = new InvalidItemReason();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidReturnItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidReturnItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of invalid return item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidReturnItemList : System.Collections.ObjectModel.Collection<InvalidReturnItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InvalidReturnItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidReturnItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListAllFulfillmentOrdersResult
    {
        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        /// <summary>
        /// An array of fulfillment order information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentOrders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FulfillmentOrder> FulfillmentOrders { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListAllFulfillmentOrdersResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListAllFulfillmentOrdersResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the listAllFulfillmentOrders operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListAllFulfillmentOrdersResponse
    {
        /// <summary>
        /// The payload for the listAllFulfillmentOrders operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListAllFulfillmentOrdersResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the listAllFulfillmentOrders operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListAllFulfillmentOrdersResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListAllFulfillmentOrdersResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListReturnReasonCodesResult
    {
        [Newtonsoft.Json.JsonProperty("reasonCodeDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReasonCodeDetailsList ReasonCodeDetails { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListReturnReasonCodesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListReturnReasonCodesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the listReturnReasonCodes operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListReturnReasonCodesResponse
    {
        /// <summary>
        /// The payload for the listReturnReasonCodes operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListReturnReasonCodesResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the listReturnReasonCodes operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListReturnReasonCodesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListReturnReasonCodesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationEmailList : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationEmailList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationEmailList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The current delivery status of the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNING")]
        RETURNING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNDELIVERABLE")]
        UNDELIVERABLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED")]
        DELAYED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FOR_PICKUP")]
        AVAILABLE_FOR_PICKUP = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_ACTION")]
        CUSTOMER_ACTION = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_FOR_DELIVERY")]
        OUT_FOR_DELIVERY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERY_ATTEMPTED")]
        DELIVERY_ATTEMPTED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP_SUCCESSFUL")]
        PICKUP_SUCCESSFUL = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP_CANCELLED")]
        PICKUP_CANCELLED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP_ATTEMPTED")]
        PICKUP_ATTEMPTED = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP_SCHEDULED")]
        PICKUP_SCHEDULED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_REQUEST_ACCEPTED")]
        RETURN_REQUEST_ACCEPTED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_ISSUED")]
        REFUND_ISSUED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_RECEIVED_IN_FC")]
        RETURN_RECEIVED_IN_FC = 17,

    }

    /// <summary>
    /// Additional location information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalLocationInfo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AS_INSTRUCTED")]
        AS_INSTRUCTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARPORT")]
        CARPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PICKUP")]
        CUSTOMER_PICKUP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DECK")]
        DECK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DOOR_PERSON")]
        DOOR_PERSON = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRONT_DESK")]
        FRONT_DESK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRONT_DOOR")]
        FRONT_DOOR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GARAGE")]
        GARAGE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARD")]
        GUARD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIL_ROOM")]
        MAIL_ROOM = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIL_SLOT")]
        MAIL_SLOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MAILBOX")]
        MAILBOX = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MC_BOY")]
        MC_BOY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MC_GIRL")]
        MC_GIRL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MC_MAN")]
        MC_MAN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MC_WOMAN")]
        MC_WOMAN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NEIGHBOR")]
        NEIGHBOR = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFICE")]
        OFFICE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTBUILDING")]
        OUTBUILDING = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PATIO")]
        PATIO = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PORCH")]
        PORCH = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"REAR_DOOR")]
        REAR_DOOR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEPTIONIST")]
        RECEPTIONIST = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVER")]
        RECEIVER = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SECURE_LOCATION")]
        SECURE_LOCATION = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SIDE_DOOR")]
        SIDE_DOOR = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageTrackingDetails
    {
        /// <summary>
        /// The package identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageNumber", Required = Newtonsoft.Json.Required.Always)]
        public int PackageNumber { get; set; }

        /// <summary>
        /// The tracking number for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Link on swiship.com that allows customers to track the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTrackingLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTrackingLink { get; set; }

        /// <summary>
        /// The name of the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The phone number of the carrier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierPhoneNumber { get; set; }

        /// <summary>
        /// The URL of the carrier’s website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierURL { get; set; }

        /// <summary>
        /// The shipping date for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShipDate { get; set; }

        /// <summary>
        /// The estimated arrival date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedArrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// The destination city for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipToAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingAddress ShipToAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("currentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CurrentStatus? CurrentStatus { get; set; }

        /// <summary>
        /// Description corresponding to the CurrentStatus value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentStatusDescription { get; set; }

        /// <summary>
        /// The name of the person who signed for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signedForBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedForBy { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalLocationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalLocationInfo? AdditionalLocationInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("trackingEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingEventList TrackingEvents { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PackageTrackingDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PackageTrackingDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getPackageTrackingDetails operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPackageTrackingDetailsResponse
    {
        /// <summary>
        /// The payload for the getPackageTrackingDetails operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageTrackingDetails Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the getPackageTrackingDetails operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPackageTrackingDetailsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPackageTrackingDetailsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A return reason code, a description, and an optional description translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReasonCodeDetails
    {
        /// <summary>
        /// A code that indicates a valid return reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnReasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnReasonCode { get; set; }

        /// <summary>
        /// A human readable description of the return reason code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// A translation of the description. The translation is in the language specified in the Language request parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslatedDescription { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReasonCodeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReasonCodeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of return reason code details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReasonCodeDetailsList : System.Collections.ObjectModel.Collection<ReasonCodeDetails>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReasonCodeDetailsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReasonCodeDetailsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Return authorization information for items accepted for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnAuthorization
    {
        /// <summary>
        /// An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnAuthorizationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnAuthorizationId { get; set; }

        /// <summary>
        /// An identifier for the Amazon fulfillment center that the return items should be sent to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentCenterId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        /// The address of the Amazon fulfillment center that the return items should be sent to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnToAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address ReturnToAddress { get; set; } = new Address();

        /// <summary>
        /// The return merchandise authorization (RMA) that Amazon needs to process the return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonRmaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonRmaId { get; set; }

        /// <summary>
        /// A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rmaPageURL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RmaPageURL { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReturnAuthorization FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnAuthorization>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of return authorization information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnAuthorizationList : System.Collections.ObjectModel.Collection<ReturnAuthorization>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReturnAuthorizationList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnAuthorizationList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An item that Amazon accepted for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnItem
    {
        /// <summary>
        /// An identifier assigned by the seller to the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerReturnItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        /// The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// The identifier for the shipment that is associated with the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonShipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// The return reason code assigned to the return item by the seller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerReturnReasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellerReturnReasonCode { get; set; }

        /// <summary>
        /// An optional comment about the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnComment { get; set; }

        /// <summary>
        /// The return reason code that the Amazon fulfillment center assigned to the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonReturnReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonReturnReasonCode { get; set; }

        /// <summary>
        /// Indicates if the return item has been processed by an Amazon fulfillment center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentReturnItemStatus Status { get; set; }

        /// <summary>
        /// Indicates when the status last changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusChangedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StatusChangedDate { get; set; }

        /// <summary>
        /// Identifies the return authorization used to return this item. See ReturnAuthorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnAuthorizationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnAuthorizationId { get; set; }

        [Newtonsoft.Json.JsonProperty("returnReceivedCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnItemDisposition? ReturnReceivedCondition { get; set; }

        /// <summary>
        /// The identifier for the Amazon fulfillment center that processed the return item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentCenterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentCenterId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReturnItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The condition of the return item when received by an Amazon fulfillment center.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReturnItemDisposition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sellable")]
        Sellable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Defective")]
        Defective = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerDamaged")]
        CustomerDamaged = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CarrierDamaged")]
        CarrierDamaged = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FulfillerDamaged")]
        FulfillerDamaged = 4,

    }

    /// <summary>
    /// An array of items that Amazon accepted for return. Returns empty if no items were accepted for return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnItemList : System.Collections.ObjectModel.Collection<ReturnItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReturnItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Delivery information for a scheduled delivery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledDeliveryInfo
    {
        /// <summary>
        /// The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryTimeZone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliveryTimeZone { get; set; }

        /// <summary>
        /// An array of time ranges that are available for scheduled delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryWindows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DeliveryWindowList DeliveryWindows { get; set; } = new DeliveryWindowList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduledDeliveryInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduledDeliveryInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingSpeedCategoryList : System.Collections.ObjectModel.Collection<ShippingSpeedCategory>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ShippingSpeedCategoryList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShippingSpeedCategoryList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringList : System.Collections.ObjectModel.Collection<string>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StringList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StringList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Address information for tracking the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingAddress
    {
        /// <summary>
        /// The city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string City { get; set; }

        /// <summary>
        /// The state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string State { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string Country { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrackingAddress FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingAddress>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The event code for the delivery event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_101")]
        EVENT_101 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_102")]
        EVENT_102 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_201")]
        EVENT_201 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_202")]
        EVENT_202 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_203")]
        EVENT_203 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_204")]
        EVENT_204 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_205")]
        EVENT_205 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_206")]
        EVENT_206 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_301")]
        EVENT_301 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_302")]
        EVENT_302 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_304")]
        EVENT_304 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_306")]
        EVENT_306 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_307")]
        EVENT_307 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_308")]
        EVENT_308 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_309")]
        EVENT_309 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_401")]
        EVENT_401 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_402")]
        EVENT_402 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_403")]
        EVENT_403 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_404")]
        EVENT_404 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_405")]
        EVENT_405 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_406")]
        EVENT_406 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_407")]
        EVENT_407 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_408")]
        EVENT_408 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_409")]
        EVENT_409 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_411")]
        EVENT_411 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_412")]
        EVENT_412 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_413")]
        EVENT_413 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_414")]
        EVENT_414 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_415")]
        EVENT_415 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_416")]
        EVENT_416 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_417")]
        EVENT_417 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_418")]
        EVENT_418 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_419")]
        EVENT_419 = 32,

    }

    /// <summary>
    /// Information for tracking package deliveries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingEvent
    {
        /// <summary>
        /// The date and time that the delivery event took place, in ISO 8601 date time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EventDate { get; set; }

        /// <summary>
        /// The city where the delivery event took place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TrackingAddress EventAddress { get; set; } = new TrackingAddress();

        /// <summary>
        /// The event code for the delivery event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventCode EventCode { get; set; }

        /// <summary>
        /// A description for the corresponding event code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventDescription { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrackingEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of tracking event information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingEventList : System.Collections.ObjectModel.Collection<TrackingEvent>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrackingEventList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingEventList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about unfulfillable items in a fulfillment order preview.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnfulfillablePreviewItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerSku { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// A fulfillment order item identifier created with a call to the getFulfillmentPreview operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// Error codes associated with the fulfillment order preview that indicate why the item is unfulfillable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemUnfulfillableReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StringList ItemUnfulfillableReasons { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnfulfillablePreviewItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnfulfillablePreviewItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of unfulfillable preview item information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnfulfillablePreviewItemList : System.Collections.ObjectModel.Collection<UnfulfillablePreviewItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnfulfillablePreviewItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnfulfillablePreviewItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Item information for updating a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFulfillmentOrderItem
    {
        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSku { get; set; }

        /// <summary>
        /// Identifies the fulfillment order item to update. Created with a previous call to the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerFulfillmentOrderItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string SellerFulfillmentOrderItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// A message to the gift recipient, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("giftMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DisplayableComment { get; set; }

        /// <summary>
        /// Amazon's fulfillment network SKU of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentNetworkSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentNetworkSku { get; set; }

        /// <summary>
        /// Indicates whether the item is sellable or unsellable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderItemDisposition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderItemDisposition { get; set; }

        /// <summary>
        /// The monetary value assigned by the seller to this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitDeclaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitDeclaredValue { get; set; }

        /// <summary>
        /// The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitPrice { get; set; }

        /// <summary>
        /// The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("perUnitTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PerUnitTax { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateFulfillmentOrderItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateFulfillmentOrderItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of fulfillment order item information for updating a fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFulfillmentOrderItemList : System.Collections.ObjectModel.Collection<UpdateFulfillmentOrderItem>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateFulfillmentOrderItemList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateFulfillmentOrderItemList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFulfillmentOrderRequest
    {
        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DisplayableOrderDate { get; set; }

        /// <summary>
        /// Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayableOrderComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string DisplayableOrderComment { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingSpeedCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingSpeedCategory? ShippingSpeedCategory { get; set; }

        /// <summary>
        /// The destination address for the fulfillment order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address DestinationAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentAction? FulfillmentAction { get; set; }

        [Newtonsoft.Json.JsonProperty("fulfillmentPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }

        /// <summary>
        /// The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipFromCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipFromCountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// A list of items to include in the fulfillment order preview, including quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateFulfillmentOrderItemList Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateFulfillmentOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateFulfillmentOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the updateFulfillmentOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFulfillmentOrderResponse
    {
        /// <summary>
        /// One or more unexpected errors occurred during the updateFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateFulfillmentOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateFulfillmentOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the createFulfillmentOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFulfillmentOrderResponse
    {
        /// <summary>
        /// One or more unexpected errors occurred during the createFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateFulfillmentOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateFulfillmentOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the cancelFulfillmentOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelFulfillmentOrderResponse
    {
        /// <summary>
        /// One or more unexpected errors occurred during the cancelFulfillmentOrder operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CancelFulfillmentOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelFulfillmentOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The weight.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        /// <summary>
        /// The unit of weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUnit Unit { get; set; }

        /// <summary>
        /// The weight value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Weight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The shipping method used for the fulfillment order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingSpeedCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Expedited")]
        Expedited = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Priority")]
        Priority = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledDelivery")]
        ScheduledDelivery = 3,

    }

    /// <summary>
    /// The breakdown of eligibility inventory by feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeatureInventoryResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetFeatureInventoryResult Payload { get; set; }

        /// <summary>
        /// One or more unexpected errors occurred during the getFeatureInventory operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFeatureInventoryResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFeatureInventoryResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the getEligibileInventory operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeatureInventoryResult
    {
        /// <summary>
        /// The requested marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The name of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

        /// <summary>
        /// An array of SKUs eligible for this feature and the quantity available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureSkus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeatureSku> FeatureSkus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFeatureInventoryResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFeatureInventoryResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about an SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureSku
    {
        /// <summary>
        /// Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The unique SKU used by Amazon's fulfillment network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fnSku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FnSku { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Asin { get; set; }

        /// <summary>
        /// The number of SKUs available for this service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skuCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SkuCount { get; set; }

        /// <summary>
        /// Other seller SKUs that are shared across the same inventory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overlappingSkus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OverlappingSkus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeatureSku FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeatureSku>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getFeatures operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeaturesResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetFeaturesResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFeaturesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFeaturesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the getFeatures operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeaturesResult
    {
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Features Features { get; set; } = new Features();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFeaturesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFeaturesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An array of features.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Features : System.Collections.ObjectModel.Collection<Feature>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Features FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Features>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A Multi-Channel Fulfillment feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Feature
    {
        /// <summary>
        /// The feature name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// The feature description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeatureDescription { get; set; }

        /// <summary>
        /// When true, indicates that the seller is eligible to use the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellerEligible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellerEligible { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Feature FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Feature>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response schema for the getFeatureSKU operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeatureSkuResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetFeatureSkuResult Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFeatureSkuResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFeatureSkuResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The payload for the getFeatureSKU operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetFeatureSkuResult
    {
        /// <summary>
        /// The requested marketplace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplaceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The name of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// When true, the seller SKU is eligible for the requested feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEligible", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEligible { get; set; }

        /// <summary>
        /// A list of one or more reasons that the seller SKU is ineligibile for the feature.
        /// <br/>
        /// <br/>Possible values:
        /// <br/>* MERCHANT_NOT_ENROLLED - The merchant isn't enrolled for the feature.
        /// <br/>* SKU_NOT_ELIGIBLE - The SKU doesn't reside in a warehouse that supports the feature.
        /// <br/>* INVALID_SKU - There is an issue with the SKU provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ineligibleReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IneligibleReasons { get; set; }

        /// <summary>
        /// Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skuInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeatureSku SkuInfo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetFeatureSkuResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFeatureSkuResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// FeatureSettings allows users to apply fulfillment features to an order. To block an order from being shipped using Amazon Logistics (AMZL) and an AMZL tracking number, use featureName as BLOCK_AMZL and featureFulfillmentPolicy as Required. Blocking AMZL will incur an additional fee surcharge on your MCF orders and increase the risk of some of your orders being unfulfilled or delivered late if there are no alternative carriers available. Using BLOCK_AMZL in an order request will take precedence over your Seller Central account setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureSettings
    {
        /// <summary>
        /// The name of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeatureName { get; set; }

        /// <summary>
        /// Specifies the policy to use when fulfilling an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("featureFulfillmentPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeatureSettingsFeatureFulfillmentPolicy? FeatureFulfillmentPolicy { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeatureSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeatureSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAPerUnitFulfillmentFee")]
        FBAPerUnitFulfillmentFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAPerOrderFulfillmentFee")]
        FBAPerOrderFulfillmentFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBATransportationFee")]
        FBATransportationFee = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAFulfillmentCODFee")]
        FBAFulfillmentCODFee = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentPreviewItemShippingWeightCalculationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dimensional")]
        Dimensional = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FulfillmentShipmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED_BY_FULFILLER")]
        CANCELLED_BY_FULFILLER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED_BY_SELLER")]
        CANCELLED_BY_SELLER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"KILOGRAMS")]
        KILOGRAMS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"POUNDS")]
        POUNDS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeatureSettingsFeatureFulfillmentPolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotRequired")]
        NotRequired = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFulfillmentOutboundApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AmazonSellingPartnerFulfillmentOutboundApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmazonSellingPartnerFulfillmentOutboundApiException<TResult> : AmazonSellingPartnerFulfillmentOutboundApiException
    {
        public TResult Result { get; private set; }

        public AmazonSellingPartnerFulfillmentOutboundApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603